;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("semantic/bovine/el" include nil nil [2598 2627])
            ("srefactor-newline-threshold" variable (:default-value 40) nil [2629 2934])
            ("srefactor-lisp-symbol-to-skip" variable (:default-value (quote (("progn" . 0) ("cond" . 0) ("save-excursion" . 0) ("unwind-protect" . 0) ("with-temp-buffer" . 0) ("defmethod" . 1) ("cons" . 2) ("kill-region" . 2) ("equal" . 2) ("member" . 2) ("eq?" . 2) ("eq" . 2) ("get" . 2) ("assoc" . 2) ("defun" . 2) ("defclass" . 2) ("defstruct" . 2) ("defmacro" . 2) ("defsubst" . 2) ("defface" . 2) ("defalias" . 2) ("defcustom" . 2) ("declare" . 2) ("defvar" . 2) ("defparameter" . 2) ("defconst" . 2) ("string-match" . 2) ("defcustom" . 2) ("setq" . 2) ("setq-default" . 2) ("member" . 2) ("setf" . 2) (">" . 2) ("<" . 2) ("<=" . 2) (">=" . 2) ("/=" . 2) ("=" . 2) ("some" . 2) ("define-key" . 3) ("modify-syntax-entry" . 3)))) nil [2936 7556])
            ("srefactor-clojure-symbol-to-skip" variable (:default-value (quote (("fn" . 1) ("ns" . 1) (":require" . 1) (":import" . 1) ("def" . 2) ("struct-map" . 1) ("defmacro" . 1) ("binding" . 1) ("with-bindings" . 1) ("doseq" . 1) ("catch" . 2) ("defn" . 2)))) nil [7558 8560])
            ("token" variable nil nil [8600 8618])
            ("token-type" variable nil nil [8619 8642])
            ("token-str" variable nil nil [8643 8665])
            ("ignore-num" variable nil nil [8666 8689])
            ("tok-start" variable nil nil [8690 8712])
            ("next-token" variable nil nil [8713 8736])
            ("next-token-start" variable nil nil [8737 8766])
            ("next-token-end" variable nil nil [8767 8794])
            ("next-token-type" variable nil nil [8795 8823])
            ("next-token-str" variable nil nil [8824 8851])
            ("tok-end" variable nil nil [8852 8872])
            ("cur-buf" variable nil nil [8873 8893])
            ("first-token" variable nil nil [8894 8918])
            ("first-token-name" variable nil nil [8919 8948])
            ("second-token" variable nil nil [8949 8974])
            ("lexemes" variable nil nil [8975 8995])
            ("comment-token" variable nil nil [8996 9022])
            ("comment-content" variable nil nil [9023 9051])
            ("token-real-line" variable nil nil [9052 9080])
            ("next-token-real-line" variable nil nil [9081 9114])
            ("comment-real-line-start" variable nil nil [9115 9151])
            ("comment-real-line-end" variable nil nil [9152 9186])
            ("comment-token-start" variable nil nil [9187 9219])
            ("comment-token-end" variable nil nil [9220 9250])
            ("format-type" variable nil nil [9251 9275])
            ("recursive-p" variable nil nil [9276 9300])
            ("orig-format-type" variable nil nil [9301 9330])
            ("srefactor--appropriate-major-mode" function (:arguments ("major-mode")) nil [9333 9688])
            ("srefactor--define-skip-list-for-mode" function (:arguments ("major-mode")) nil [9690 10071])
            ("srefactor-lisp-format-buffer" function (:user-visible-flag t) nil [10073 11822])
            ("srefactor-lisp-format-defun" function (:user-visible-flag t) nil [11824 13633])
            ("srefactor-lisp-format-sexp" function (:user-visible-flag t) nil [13635 15745])
            ("srefactor-lisp-one-line" function
               (:user-visible-flag t
                :arguments ("recursive-p"))
                nil [15747 17655])
            ("srefactor--lisp-format-one-or-multi-lines" function (:arguments ("beg" "end" "orig-point" "format-type" "newline-betwen-semantic-lists" "recursive-p")) nil [17657 20644])
            ("srefactor--lisp-number-formatter" function nil nil [20646 21240])
            ("srefactor--lisp-punctuation-formatter" function nil nil [21242 21768])
            ("srefactor--lisp-symbol-formatter" function nil nil [21770 22851])
            ("srefactor--lisp-forward-first-second-token" function nil nil [22853 23036])
            ("srefactor--lisp-forward-token" function nil nil [23038 23717])
            ("srefactor--lisp-comment-formatter" function nil nil [23719 26177])
            ("srefactor--lisp-oneline-formatter" function nil nil [26179 26514])
            ("srefactor--lisp-multiline-formatter" function nil nil [26516 28058])
            ("srefactor--lisp-token-name-in-skip-list-p" function (:arguments ("token-name")) nil [28060 28174])
            ("srefactor--lisp-token-in-punctuation-p" function (:arguments ("token")) nil [28176 28322])
            ("srefactor--lisp-token-paren-p" function (:arguments ("token")) nil [28324 28439])
            ("srefactor--lisp-token-text" function (:arguments ("token")) nil [28441 28684])
            ("srefactor--lisp-visit-semantic-list-lex" function (:arguments ("lexemes")) nil [28686 29520])
            ("srefactor--lisp-comment-debug-messages" function nil nil [29522 30054])
            ("srefactor--lisp-debug-messages" function nil nil [30056 30405])
            ("srefactor-lisp" package nil nil [30407 30432]))          
      :file "srefactor-lisp.el"
      :pointmax 30433
      :fsize 30432
      :lastmodtime '(23134 437 132241 8000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [3915 3932])
            ("cc-mode" include nil nil [3933 3951])
            ("semantic" include nil nil [3952 3971])
            ("semantic/tag-ls" include nil nil [3972 3998])
            ("semantic/bovine/c" include nil nil [3999 4027])
            ("semantic/format" include nil nil [4028 4054])
            ("semantic/doc" include nil nil [4055 4078])
            ("srecode/semantic" include nil nil [4079 4106])
            ("srefactor-ui" include nil nil [4107 4130])
            ("if" code nil nil [4132 4653])
            ("when" code nil nil [4655 4797])
            ("srefactor--current-local-var" variable nil nil [4799 4876])
            ("srefactor--getter-prefix" variable (:default-value "get_") nil [5031 5127])
            ("srefactor--setter-prefix" variable (:default-value "set_") nil [5129 5225])
            ("srefactor--getter-setter-removal-prefix" variable nil nil [5227 5334])
            ("srefactor--getter-setter-capitalize-p" variable nil nil [5336 5459])
            ("srefactor-use-srecode-p" variable nil nil [5621 5701])
            ("srefactor--is-proto" function (:arguments ("type")) nil [5713 5780])
            ("srefactor--add-menu-item" function (:arguments ("label" "operation-type" "file-options")) nil [5782 6007])
            ("srefactor-refactor-at-point" function (:user-visible-flag t) nil [6195 9143])
            ("srefactor--tag-filter" function (:arguments ("predicate" "tag-classes-or-names" "tags")) nil [9145 9637])
            ("srefactor--c-tag-start-with-comment" function (:arguments ("tag")) nil [9639 10000])
            ("srefactor--copy-tag" function nil nil [10002 10603])
            ("srefactor--refactor-based-on-tag-class" function (:arguments ("operation" "file-option")) nil [10794 14839])
            ("srefactor--select-file" function (:arguments ("option")) nil [14841 17003])
            ("srefactor--tag-persistent-action" function nil nil [17005 17954])
            ("srefactor--refactor-tag" function (:arguments ("buffer" "refactor-tag" "func-type" "ask-place-p")) nil [17956 20489])
            ("srefactor--refactor-type" function (:arguments ("dest-buffer" "refactor-tag")) nil [20491 21439])
            ("srefactor--insert-tag" function (:arguments ("refactor-tag" "dest-tag" "insert-type" "pos")) nil [21441 25457])
            ("srefactor--contextual-open-file" function (:arguments ("other-file")) nil [25615 26736])
            ("srefactor-insert-class-getters-setters" function (:arguments ("tag" "file-option")) nil [26944 27866])
            ("srefactor--insert-getter" function (:arguments ("tag" "newline-before" "newline-after" "prototype-p")) nil [27868 29474])
            ("srefactor--insert-setter" function (:arguments ("tag" "newline-before" "newline-after" "prototype-p")) nil [29476 31472])
            ("srefactor--jump-or-insert-public-label" function (:arguments ("tag")) nil [31474 32678])
            ("srefactor--variable-insert-getter-setter" function (:arguments ("insert-getter-p" "insert-setter-p" "tag" "buffer")) nil [32680 33876])
            ("srefactor--insert-with-srecode" function (:arguments ("func-tag")) nil [33896 35161])
            ("srefactor--insert-function" function (:arguments ("func-tag" "type")) nil [35163 38467])
            ("srefactor--insert-function-pointer" function (:arguments ("tag")) nil [38469 39245])
            ("srefactor--insert-function-as-parameter" function (:arguments ("tag")) nil [39247 39495])
            ("srefactor--insert-new-function-from-region" function nil nil [39497 42420])
            ("srefactor--insert-initial-content-based-on-return-type" function (:arguments ("tag-type")) nil [42422 43223])
            ("srefactor--insert-new-macro-from-region" function nil nil [43263 44231])
            ("srefactor--rename-local-var" function (:arguments ("tag" "tag-occurrences" "function-tag" "new-name")) nil [44251 45313])
            ("srefactor--indent-and-newline" function (:arguments ("number")) nil [45333 45495])
            ("srefactor--get-all-parents" function (:arguments ("tag")) nil [45702 46234])
            ("srefactor--tag-parents-string" function (:arguments ("tag")) nil [46236 47292])
            ("srefactor--tag-function-parameters-string" function (:arguments ("members")) nil [47294 47863])
            ("srefactor--tag-function-string" function (:arguments ("tag")) nil [47865 48620])
            ("srefactor--tag-template-string-list" function (:arguments ("tag")) nil [48622 48949])
            ("srefactor--calculate-parent-tag" function (:arguments ("tag")) nil [48951 49481])
            ("srefactor--tag-templates-parameters-string" function (:arguments ("tag")) nil [49483 49858])
            ("srefactor--tag-templates-declaration-string" function (:arguments ("tag")) nil [49860 50718])
            ("srefactor--function-pointer-to-function" function (:arguments ("tag")) nil [50720 51283])
            ("srefactor--function-to-function-pointer" function (:arguments ("tag")) nil [51285 51829])
            ("srefactor--tag-function-modifiers" function (:arguments ("tag")) nil [51831 51976])
            ("srefactor--tag-function-destructor" function (:arguments ("tag")) nil [51978 52153])
            ("srefactor--tag-function-constructor" function (:arguments ("tag")) nil [52155 52333])
            ("srefactor--local-var-regexp" function (:arguments ("tag")) nil [52335 52621])
            ("srefactor--tag-pointer" function (:arguments ("tag")) nil [52623 52745])
            ("srefactor--tag-typedef" function (:arguments ("tag")) nil [52747 52869])
            ("srefactor--tag-reference" function (:arguments ("tag")) nil [52871 54344])
            ("srefactor--tag-name" function (:arguments ("tag")) nil [54346 54701])
            ("srefactor--tag-type-string" function (:arguments ("tag")) nil [54703 56735])
            ("srefactor--tag-type-string-inner-template-list" function (:arguments ("tmpl-spec-list")) nil [56737 57305])
            ("srefactor--extract-region" function (:arguments ("extract-type")) nil [57307 58203])
            ("srefactor--mark-symbol-at-point" function (:user-visible-flag t) nil [58205 58397])
            ("srefactor--fetch-candidates" function nil nil [58399 58726])
            ("srefactor--fetch-candidates-helper" function (:arguments ("tags" "depth" "class")) nil [58728 61124])
            ("srefactor--menu-add-function-proto-p" function (:arguments ("tag")) nil [61290 61737])
            ("srefactor--menu-add-function-implementation-p" function (:arguments ("tag")) nil [61739 62119])
            ("srefactor--menu-add-rename-local-p" function nil nil [62121 62673])
            ("srefactor--menu-add-function-pointer-p" function (:arguments ("tag")) nil [62675 63096])
            ("srefactor--menu-add-getters-setters-p" function (:arguments ("tag")) nil [63098 63394])
            ("srefactor--menu-add-getter-setter-p" function (:arguments ("tag")) nil [63396 63666])
            ("srefactor--menu-add-move-p" function nil nil [63668 63803])
            ("srefactor--tag-at-point" function nil nil [63805 64216])
            ("srefactor--activate-region" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [64218 64407])
            ("srefactor--menu-for-region-p" function nil nil [64409 64527])
            ("srefactor--var-in-region-p" function (:arguments ("tag" "beg" "end")) nil [64529 64777])
            ("srefactor--tag-struct-p" function (:arguments ("tag")) nil [64779 65341])
            ("srefactor--tag-private-p" function (:arguments ("tag")) nil [65343 66725])
            ("srefactor--tag-auto-p" function (:arguments ("tag")) nil [66727 66913])
            ("srefactor--tag-lambda-p" function (:arguments ("tag")) nil [66915 67236])
            ("srefactor--tag-friend-p" function (:arguments ("tag")) nil [67238 67667])
            ("srefactor--unknown-symbol-at-point-p" function nil nil [67669 67871])
            ("srefactor--introduce-variable-at-point" function nil nil [67873 68382])
            ("srefactor--collect-tag-occurrences" function (:arguments ("tag" "beg" "end" "with-content")) nil [68546 69577])
            ("srefactor--highlight-tag" function (:arguments ("tag" "tag-occurrences" "scope-tag" "face")) nil [69579 70071])
            ("srefactor--switch-to-window" function (:arguments ("file-path")) nil [70073 70354])
            ("srefactor" package nil nil [70356 70376]))          
      :file "srefactor.el"
      :pointmax 70549
      :fsize 70552
      :lastmodtime '(23134 437 144241 36000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :file "srefactor-ui.el"
      :fsize 16545
      :lastmodtime '(23134 437 148241 46000)))
  :file "!home!siqual!.emacs.d!elpa!srefactor-20170223.540!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
