;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("easymenu" include nil nil [1382 1401])
            ("tree-widget" include nil nil [1402 1424])
            ("timer" include nil nil [1425 1441])
            ("recentf-list" variable nil nil [1464 1524])
            ("recentf-enabled-p" function nil nil [1526 1658])
            ("recentf" customgroup (:user-visible-flag t) nil [1682 1784])
            ("recentf-filters" customgroup (:user-visible-flag t) nil [1786 1944])
            ("recentf-max-saved-items" variable (:default-value 20) nil [1946 2165])
            ("recentf-save-file" variable (:default-value (locate-user-emacs-file "recentf" ".recentf")) nil [2167 2601])
            ("recentf-save-file-modes" variable (:default-value 384) nil [2603 2981])
            ("recentf-exclude" variable nil nil [2983 3375])
            ("recentf-keep-default-predicate" function (:arguments ("file")) nil [3377 3647])
            ("recentf-keep" variable (:default-value (quote (recentf-keep-default-predicate))) nil [3649 4388])
            ("recentf-menu-customization-changed" function (:arguments ("variable" "value")) nil [4390 4831])
            ("recentf-menu-title" variable (:default-value "Open Recent") nil [4833 4984])
            ("recentf-menu-path" variable (:default-value (quote ("File"))) nil [4986 5274])
            ("recentf-menu-before" variable (:default-value "Open File...") nil [5276 5591])
            ("recentf-menu-action" variable (:default-value (quote find-file)) nil [5593 5798])
            ("recentf-max-menu-items" variable (:default-value 10) nil [5800 5921])
            ("recentf-menu-filter" variable nil nil [5923 8355])
            ("recentf-menu-open-all-flag" variable nil nil [8357 8537])
            ("define-obsolete-variable-alias" code nil nil [8539 8709])
            ("recentf-menu-append-commands-flag" variable (:default-value t) nil [8711 8848])
            ("recentf-auto-cleanup" variable (:default-value (quote mode)) nil [8850 9958])
            ("recentf-initialize-file-name-history" variable (:default-value t) nil [9960 10169])
            ("recentf-load-hook" variable nil nil [10171 10298])
            ("recentf-filename-handlers" variable nil nil [10300 10694])
            ("recentf-show-file-shortcuts-flag" variable (:default-value t) nil [10696 10943])
            ("recentf-case-fold-search" variable
               (:constant-flag t
                :default-value (memq system-type (quote (windows-nt cygwin))))
                nil [10963 11104])
            ("recentf-string-equal" function (:arguments ("s1" "s2")) nil [11106 11370])
            ("recentf-string-lessp" function (:arguments ("s1" "s2")) nil [11372 11643])
            ("recentf-string-member" function (:arguments ("elt" "list")) nil [11645 11993])
            ("recentf-trunc-list" function (:arguments ("l" "n")) nil [11995 12220])
            ("recentf-dump-variable" function (:arguments ("variable" "limit")) nil [12222 12869])
            ("recentf-auto-cleanup-timer" variable nil nil [12871 13011])
            ("recentf-auto-cleanup" function nil nil [13013 13601])
            ("recentf-push" function (:arguments ("filename")) nil [13626 14014])
            ("recentf-apply-filename-handlers" function (:arguments ("name")) nil [14016 14515])
            ("recentf-expand-file-name" function (:arguments ("name")) nil [14517 14788])
            ("recentf-include-p" function (:arguments ("filename")) nil [14790 15556])
            ("recentf-keep-p" function (:arguments ("filename")) nil [15558 16238])
            ("recentf-add-file" function (:arguments ("filename")) nil [16240 16547])
            ("recentf-remove-if-non-kept" function (:arguments ("filename")) nil [16549 16907])
            ("recentf-directory-compare" function (:arguments ("f1" "f2")) nil [16909 17359])
            ("recentf-digit-shortcut-command-name" function (:arguments ("n")) nil [17383 17604])
            ("recentf--shortcuts-keymap" variable (:default-value (let ((km (make-sparse-keymap))) (dolist (k (quote (0 9 8 7 6 5 4 3 2 1))) (let ((cmd (recentf-digit-shortcut-command-name k))) (defalias cmd (\` (lambda nil (interactive) (recentf-open-most-recent-file (\, k))))) (define-key km (vector (+ k 48)) cmd))) km)) nil [17606 18051])
            ("recentf-menu-items-for-commands" variable (:default-value (list ["Cleanup list" recentf-cleanup :help "Remove duplicates, and obsoletes files from the recent list" :active t] ["Edit list..." recentf-edit-list :help "Manually remove files from the recent list" :active t] ["Save list now" recentf-save-list :help "Save the list of recently opened files now" :active t] ["Options..." (customize-group "recentf") :help "Customize recently opened files menu and options" :active t])) nil [18053 18625])
            ("recentf-menu-filter-commands" variable nil nil [18627 18928])
            ("recentf-elements" function (:arguments ("n")) nil [18930 19061])
            ("recentf-make-menu-element" function (:arguments ("menu-item" "menu-value")) nil [19063 19521])
            ("recentf-menu-element-item" function (:arguments ("e")) nil [19523 19621])
            ("recentf-menu-element-value" function (:arguments ("e")) nil [19623 19723])
            ("recentf-set-menu-element-item" function (:arguments ("e" "item")) nil [19725 19844])
            ("recentf-set-menu-element-value" function (:arguments ("e" "value")) nil [19846 19970])
            ("recentf-sub-menu-element-p" function (:arguments ("e")) nil [19972 20111])
            ("recentf-make-default-menu-element" function (:arguments ("file")) nil [20113 20286])
            ("recentf-menu-elements" function (:arguments ("n")) nil [20288 20524])
            ("recentf-apply-menu-filter" function (:arguments ("filter" "l")) nil [20526 21628])
            ("recentf-menu-shortcuts" variable nil nil [21678 21709])
            ("recentf-make-menu-items" function (:arguments ("_menu")) nil [21711 22995])
            ("recentf-menu-value-shortcut" function (:arguments ("name")) nil [22997 23399])
            ("recentf-make-menu-item" function (:arguments ("elt")) nil [23401 24262])
            ("recentf-menu-bar" function nil nil [24264 24377])
            ("recentf-show-menu" function nil nil [24379 24599])
            ("recentf-hide-menu" function nil nil [24601 24780])
            ("recentf-sort-ascending" function (:arguments ("l")) nil [24814 25138])
            ("recentf-sort-descending" function (:arguments ("l")) nil [25140 25466])
            ("recentf-sort-basenames-ascending" function (:arguments ("l")) nil [25468 25845])
            ("recentf-sort-basenames-descending" function (:arguments ("l")) nil [25847 26226])
            ("recentf-sort-directories-ascending" function (:arguments ("l")) nil [26228 26573])
            ("recentf-sort-directories-descending" function (:arguments ("l")) nil [26575 26922])
            ("recentf-show-basenames" function (:arguments ("l" "no-dir")) nil [26924 27824])
            ("recentf-show-basenames-ascending" function (:arguments ("l")) nil [27826 28149])
            ("recentf-show-basenames-descending" function (:arguments ("l")) nil [28151 28478])
            ("recentf-relative-filter" function (:arguments ("l")) nil [28480 28960])
            ("recentf-arrange-rules" variable (:default-value (quote (("Elisp files (%d)" ".\\.el\\'") ("Java files (%d)" ".\\.java\\'") ("C/C++ files (%d)" "c\\(pp\\)?\\'")))) nil [28994 29971])
            ("recentf-arrange-by-rule-others" variable (:default-value "Other files (%d)") nil [29973 30448])
            ("recentf-arrange-by-rules-min-items" variable nil nil [30450 30811])
            ("recentf-arrange-by-rule-subfilter" variable nil nil [30813 31397])
            ("recentf-match-rule" function (:arguments ("file")) nil [31399 31865])
            ("recentf-arrange-by-rule" function (:arguments ("l")) nil [31867 34234])
            ("recentf-indirect-mode-rule" function (:arguments ("file")) nil [34279 34441])
            ("recentf-build-mode-rules" function nil nil [34443 35678])
            ("recentf-arrange-by-mode" function (:arguments ("l")) nil [35680 35931])
            ("recentf-file-name-nondir" function (:arguments ("l")) nil [35933 36403])
            ("recentf-dir-rule" function (:arguments ("file")) nil [36405 36534])
            ("recentf-arrange-by-dir" function (:arguments ("l")) nil [36536 36841])
            ("recentf-filter-changer-current" variable nil nil [36872 36968])
            ("recentf-filter-changer-alist" variable (:default-value (quote ((recentf-arrange-by-mode . "Grouped by Mode") (recentf-arrange-by-dir . "Grouped by Directory") (recentf-arrange-by-rule . "Grouped by Custom Rules")))) nil [36970 37582])
            ("recentf-filter-changer-select" function (:arguments ("filter")) nil [37584 37753])
            ("recentf-filter-changer" function (:arguments ("l")) nil [37755 38766])
            ("recentf-track-opened-file" function nil nil [38782 39037])
            ("recentf-track-closed-file" function nil nil [39039 39259])
            ("recentf-used-hooks" variable
               (:constant-flag t
                :default-value (quote ((find-file-hook recentf-track-opened-file) (write-file-functions recentf-track-opened-file) (kill-buffer-hook recentf-track-closed-file) (kill-emacs-hook recentf-save-list))))
                nil [39261 39532])
            ("recentf-cancel-dialog" function
               (:user-visible-flag t
                :arguments ("_ignore"))
                nil [39579 39752])
            ("recentf-dialog-goto-first" function (:arguments ("widget-type")) nil [39754 40191])
            ("recentf-dialog-mode-map" variable (:default-value (let ((km (copy-keymap recentf--shortcuts-keymap))) (set-keymap-parent km widget-keymap) (define-key km "q" (quote recentf-cancel-dialog)) (define-key km "n" (quote next-line)) (define-key km "p" (quote previous-line)) km)) nil [40193 40485])
            ("define-derived-mode" code nil nil [40487 40679])
            ("recentf-dialog" function (:arguments ("name" "forms")) nil [40681 41144])
            ("recentf-edit-list" variable nil nil [41171 41201])
            ("recentf-edit-list-select" function (:arguments ("widget" "_ignore")) nil [41203 41606])
            ("recentf-edit-list-validate" function (:arguments ("_ignore")) nil [41608 42032])
            ("recentf-edit-list" function (:user-visible-flag t) nil [42034 43098])
            ("recentf-open-files-action" function (:arguments ("widget" "_ignore")) nil [43125 43350])
            ("recentf--files-with-key" variable nil nil [43405 43441])
            ("recentf-show-digit-shortcut-filter" function (:arguments ("l")) nil [43443 43721])
            ("recentf-open-files-item" function (:arguments ("menu-element")) nil [43723 44660])
            ("recentf-open-files-items" function (:arguments ("files")) nil [44662 45501])
            ("recentf-open-files" function
               (:user-visible-flag t
                :arguments ("files" "buffer-name"))
                nil [45503 46710])
            ("recentf-open-more-files" function (:user-visible-flag t) nil [46712 46959])
            ("recentf-open-most-recent-file" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [46961 47635])
            ("recentf-save-file-header" variable
               (:constant-flag t
                :default-value ";;; Automatically generated by `recentf' on %s.
")
                nil [47679 47823])
            ("recentf-save-file-coding-system" variable
               (:constant-flag t
                :default-value (if (coding-system-p (quote utf-8-emacs)) (quote utf-8-emacs) (quote emacs-mule)))
                nil [47825 47991])
            ("recentf-save-list" function (:user-visible-flag t) nil [47993 48885])
            ("recentf-load-list" function (:user-visible-flag t) nil [48887 49466])
            ("recentf-cleanup" function (:user-visible-flag t) nil [49468 50241])
            ("recentf-mode-map" variable (:default-value (make-sparse-keymap)) nil [50266 50347])
            ("define-minor-mode" code nil nil [50364 51180])
            ("recentf-unload-function" function nil nil [51182 51307])
            ("recentf" package nil nil [51309 51327])
            ("run-hooks" code nil nil [51329 51359]))          
      :file "recentf.el.gz"
      :pointmax 51387
      :fsize 12941
      :lastmodtime '(22768 58519 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("case-replace" variable (:default-value t) nil [1016 1150])
            ("replace-char-fold" variable nil nil [1152 1486])
            ("replace-lax-whitespace" variable nil nil [1488 1795])
            ("replace-regexp-lax-whitespace" variable nil nil [1797 2118])
            ("query-replace-history" variable nil nil [2120 2290])
            ("query-replace-defaults" variable nil nil [2292 2491])
            ("query-replace-interactive" variable nil nil [2493 2634])
            ("make-obsolete-variable" code nil nil [2635 2883])
            ("query-replace-from-to-separator" variable (:default-value (propertize (if (char-displayable-p 8594) " → " " -> ") (quote face) (quote minibuffer-prompt))) nil [2885 3375])
            ("query-replace-from-history-variable" variable (:default-value (quote query-replace-history)) nil [3377 3723])
            ("query-replace-to-history-variable" variable (:default-value (quote query-replace-history)) nil [3725 4060])
            ("query-replace-skip-read-only" variable nil nil [4062 4232])
            ("query-replace-show-replacement" variable (:default-value t) nil [4234 4454])
            ("query-replace-highlight" variable (:default-value t) nil [4456 4594])
            ("query-replace-lazy-highlight" variable (:default-value t) nil [4596 4965])
            ("query-replace" variable
               (:default-value (quote ((t (:inherit isearch))))
                :type "face")
                nil [4967 5108])
            ("replace-count" variable nil nil [5110 5228])
            ("query-replace-descr" function (:arguments ("string")) nil [5230 5321])
            ("query-replace--split-string" function (:arguments ("string")) nil [5323 5815])
            ("query-replace-read-from" function (:arguments ("prompt" "regexp-flag")) nil [5817 8991])
            ("query-replace-compile-replacement" function (:arguments ("to" "regexp-flag")) nil [8993 10341])
            ("query-replace-read-to" function (:arguments ("from" "prompt" "regexp-flag")) nil [10344 10882])
            ("query-replace-read-args" function (:arguments ("prompt" "regexp-flag" "noerror")) nil [10884 11325])
            ("query-replace" function
               (:user-visible-flag t
                :arguments ("from-string" "to-string" "delimited" "start" "end" "backward" "region-noncontiguous-p"))
                nil [11327 14060])
            ("define-key" code nil nil [14062 14101])
            ("query-replace-regexp" function
               (:user-visible-flag t
                :arguments ("regexp" "to-string" "delimited" "start" "end" "backward" "region-noncontiguous-p"))
                nil [14103 17763])
            ("define-key" code nil nil [17765 17815])
            ("query-replace-regexp-eval" function (:arguments ("regexp" "to-expr" "delimited" "start" "end")) nil [17817 21132])
            ("map-query-replace-regexp" function
               (:user-visible-flag t
                :arguments ("regexp" "to-strings" "n" "start" "end"))
                nil [21134 23161])
            ("replace-string" function (:arguments ("from-string" "to-string" "delimited" "start" "end" "backward")) nil [23163 25616])
            ("replace-regexp" function (:arguments ("regexp" "to-string" "delimited" "start" "end" "backward")) nil [25618 28812])
            ("regexp-history" variable nil nil [28816 29004])
            ("occur-collect-regexp-history" variable (:default-value (quote ("\\1"))) nil [29006 29104])
            ("read-regexp-defaults-function" variable nil nil [29106 30079])
            ("read-regexp-suggestions" function nil nil [30081 30662])
            ("read-regexp" function (:arguments ("prompt" "defaults" "history")) nil [30664 33470])
            ("defalias" code nil nil [33473 33522])
            ("defalias" code nil nil [33523 33569])
            ("defalias" code nil nil [33570 33605])
            ("keep-lines-read-args" function (:arguments ("prompt")) nil [33608 33794])
            ("keep-lines" function
               (:user-visible-flag t
                :arguments ("regexp" "rstart" "rend" "interactive"))
                nil [33796 36493])
            ("flush-lines" function
               (:user-visible-flag t
                :arguments ("regexp" "rstart" "rend" "interactive"))
                nil [36496 38544])
            ("how-many" function
               (:user-visible-flag t
                :arguments ("regexp" "rstart" "rend" "interactive"))
                nil [38547 40352])
            ("occur-menu-map" variable (:default-value (let ((map (make-sparse-keymap))) (bindings--define-key map [next-error-follow-minor-mode] (quote (menu-item "Auto Occurrence Display" next-error-follow-minor-mode :help "Display another occurrence when moving the cursor" :button (:toggle and (boundp (quote next-error-follow-minor-mode)) next-error-follow-minor-mode)))) (bindings--define-key map [separator-1] menu-bar-separator) (bindings--define-key map [kill-this-buffer] (quote (menu-item "Kill Occur Buffer" kill-this-buffer :help "Kill the current *Occur* buffer"))) (bindings--define-key map [quit-window] (quote (menu-item "Quit Occur Window" quit-window :help "Quit the current *Occur* buffer.  Bury it, and maybe delete the selected frame"))) (bindings--define-key map [revert-buffer] (quote (menu-item "Revert Occur Buffer" revert-buffer :help "Replace the text in the *Occur* buffer with the results of rerunning occur"))) (bindings--define-key map [clone-buffer] (quote (menu-item "Clone Occur Buffer" clone-buffer :help "Create and return a twin copy of the current *Occur* buffer"))) (bindings--define-key map [occur-rename-buffer] (quote (menu-item "Rename Occur Buffer" occur-rename-buffer :help "Rename the current *Occur* buffer to *Occur: original-buffer-name*."))) (bindings--define-key map [occur-edit-buffer] (quote (menu-item "Edit Occur Buffer" occur-edit-mode :help "Edit the *Occur* buffer and apply changes to the original buffers."))) (bindings--define-key map [separator-2] menu-bar-separator) (bindings--define-key map [occur-mode-goto-occurrence-other-window] (quote (menu-item "Go To Occurrence Other Window" occur-mode-goto-occurrence-other-window :help "Go to the occurrence the current line describes, in another window"))) (bindings--define-key map [occur-mode-goto-occurrence] (quote (menu-item "Go To Occurrence" occur-mode-goto-occurrence :help "Go to the occurrence the current line describes"))) (bindings--define-key map [occur-mode-display-occurrence] (quote (menu-item "Display Occurrence" occur-mode-display-occurrence :help "Display in another window the occurrence the current line describes"))) (bindings--define-key map [occur-next] (quote (menu-item "Move to Next Match" occur-next :help "Move to the Nth (default 1) next match in an Occur mode buffer"))) (bindings--define-key map [occur-prev] (quote (menu-item "Move to Previous Match" occur-prev :help "Move to the Nth (default 1) previous match in an Occur mode buffer"))) map)) nil [40356 42958])
            ("occur-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mouse-2] (quote occur-mode-mouse-goto)) (define-key map "" (quote occur-mode-goto-occurrence)) (define-key map "e" (quote occur-edit-mode)) (define-key map "" (quote occur-mode-goto-occurrence)) (define-key map "o" (quote occur-mode-goto-occurrence-other-window)) (define-key map "" (quote occur-mode-display-occurrence)) (define-key map "\356" (quote occur-next)) (define-key map "\360" (quote occur-prev)) (define-key map "r" (quote occur-rename-buffer)) (define-key map "c" (quote clone-buffer)) (define-key map "" (quote next-error-follow-minor-mode)) (bindings--define-key map [menu-bar occur] (cons "Occur" occur-menu-map)) map)) nil [42960 43777])
            ("occur-revert-arguments" variable nil nil [43779 43910])
            ("make-variable-buffer-local" code nil nil [43911 43963])
            ("put" code nil nil [43964 44012])
            ("occur-mode-hook" variable (:default-value (quote (turn-on-font-lock))) nil [44014 44134])
            ("occur-hook" variable nil nil [44136 44245])
            ("occur-mode-find-occurrence-hook" variable nil nil [44247 44539])
            ("put" code nil nil [44541 44579])
            ("define-derived-mode" code nil nil [44580 45044])
            ("occur-edit-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map text-mode-map) (define-key map [mouse-2] (quote occur-mode-mouse-goto)) (define-key map "" (quote occur-cease-edit)) (define-key map "" (quote occur-mode-display-occurrence)) (define-key map "" (quote next-error-follow-minor-mode)) (bindings--define-key map [menu-bar occur] (cons "Occur" occur-menu-map)) map)) nil [45069 45521])
            ("define-derived-mode" code nil nil [45523 45984])
            ("occur-cease-edit" function (:user-visible-flag t) nil [45986 46177])
            ("occur-after-change-function" function (:arguments ("beg" "end" "length")) nil [46179 47681])
            ("occur-revert-function" function (:arguments ("_ignore1" "_ignore2")) nil [47685 47857])
            ("occur-mode-find-occurrence" function nil nil [47859 48125])
            ("defalias" code nil nil [48127 48188])
            ("occur-mode-goto-occurrence" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [48189 48937])
            ("occur-mode-goto-occurrence-other-window" function (:user-visible-flag t) nil [48939 49247])
            ("occur-mode-display-occurrence" function (:user-visible-flag t) nil [49249 49675])
            ("occur-find-match" function (:arguments ("n" "search" "message")) nil [49677 50028])
            ("occur-next" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [50030 50221])
            ("occur-prev" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [50223 50425])
            ("occur-next-error" function
               (:user-visible-flag t
                :arguments ("argp" "reset"))
                nil [50427 51418])
            ("match" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) :background "yellow1") (((class color) (min-colors 88) (background dark)) :background "RoyalBlue3") (((class color) (min-colors 8) (background light)) :background "yellow" :foreground "black") (((class color) (min-colors 8) (background dark)) :background "blue" :foreground "white") (((type tty) (class mono)) :inverse-video t) (t :background "gray")))
                :type "face")
                nil [51421 51996])
            ("list-matching-lines-default-context-lines" variable nil nil [51998 52315])
            ("defalias" code nil nil [52317 52355])
            ("list-matching-lines-face" variable (:default-value (quote match)) nil [52357 52575])
            ("list-matching-lines-buffer-name-face" variable (:default-value (quote underline)) nil [52577 52805])
            ("list-matching-lines-prefix-face" variable (:default-value (quote shadow)) nil [52807 53083])
            ("occur-excluded-properties" variable (:default-value (quote (read-only invisible intangible field mouse-face help-echo local-map keymap yank-handler follow-link))) nil [53085 53503])
            ("occur-read-primary-args" function nil nil [53505 54376])
            ("occur-rename-buffer" function
               (:user-visible-flag t
                :arguments ("unique-p" "interactive-p"))
                nil [54378 55265])
            ("occur" function
               (:user-visible-flag t
                :arguments ("regexp" "nlines"))
                nil [55267 56651])
            ("ido-ignore-item-temp-list" variable nil nil [56653 56687])
            ("multi-occur" function
               (:user-visible-flag t
                :arguments ("bufs" "regexp" "nlines"))
                nil [56689 57609])
            ("multi-occur-in-matching-buffers" function
               (:user-visible-flag t
                :arguments ("bufregexp" "regexp" "allbufs"))
                nil [57611 58564])
            ("occur-regexp-descr" function (:arguments ("regexp")) nil [58566 58979])
            ("occur-1" function (:arguments ("regexp" "nlines" "bufs" "buf-name")) nil [58981 62073])
            ("occur-engine" function (:arguments ("regexp" "buffers" "out-buf" "nlines" "case-fold" "title-face" "prefix-face" "match-face" "keep-props")) nil [62075 68989])
            ("occur-engine-line" function (:arguments ("beg" "end" "keep-props")) nil [68991 69481])
            ("occur-engine-add-prefix" function (:arguments ("lines" "prefix-face")) nil [69483 69707])
            ("occur-accumulate-lines" function (:arguments ("count" "keep-props" "pt")) nil [69709 70229])
            ("occur-context-lines" function (:arguments ("out-line" "nlines" "keep-props" "begpt" "endpt" "curr-line" "prev-line" "prev-after-lines" "prefix-face")) nil [70642 72469])
            ("query-replace-help" variable
               (:constant-flag t
                :default-value "Type Space or `y' to replace one match, Delete or `n' to skip to next,
RET or `q' to exit, Period to replace one match and exit,
Comma to replace but not move point immediately,
C-r to enter recursive edit (\\[exit-recursive-edit] to get out again),
C-w to delete match and recursive edit,
C-l to clear the screen, redisplay, and offer same replacement again,
! to replace all remaining matches in this buffer with no more questions,
^ to move point back to previous match,
E to edit the replacement string.
In multi-buffer replacements type `Y' to replace all remaining
matches in all remaining buffers with no more questions,
`N' to skip to the next buffer without replacing remaining matches
in the current buffer.")
                nil [72580 73374])
            ("query-replace-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map " " (quote act)) (define-key map "" (quote skip)) (define-key map [delete] (quote skip)) (define-key map [backspace] (quote skip)) (define-key map "y" (quote act)) (define-key map "n" (quote skip)) (define-key map "Y" (quote act)) (define-key map "N" (quote skip)) (define-key map "e" (quote edit-replacement)) (define-key map "E" (quote edit-replacement)) (define-key map "," (quote act-and-show)) (define-key map "q" (quote exit)) (define-key map "" (quote exit)) (define-key map [return] (quote exit)) (define-key map "." (quote act-and-exit)) (define-key map "" (quote edit)) (define-key map "" (quote delete-and-edit)) (define-key map "" (quote recenter)) (define-key map "!" (quote automatic)) (define-key map "^" (quote backup)) (define-key map "" (quote help)) (define-key map [f1] (quote help)) (define-key map [help] (quote help)) (define-key map "?" (quote help)) (define-key map "" (quote quit)) (define-key map "" (quote quit)) (define-key map "" (quote scroll-up)) (define-key map "\366" (quote scroll-down)) (define-key map [next] (quote scroll-up)) (define-key map [prior] (quote scroll-down)) (define-key map [134217750] (quote scroll-other-window)) (define-key map [M-next] (quote scroll-other-window)) (define-key map [167772182] (quote scroll-other-window-down)) (define-key map [M-prior] (quote scroll-other-window-down)) (define-key map [escape] (quote exit-prefix)) map)) nil [73376 75412])
            ("multi-query-replace-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map query-replace-map) (define-key map "Y" (quote automatic-all)) (define-key map "N" (quote exit-current)) map)) nil [75414 76074])
            ("replace-match-string-symbols" function (:arguments ("n")) nil [76076 77237])
            ("replace-eval-replacement" function (:arguments ("expression" "count")) nil [77239 77602])
            ("replace-quote" function (:arguments ("replacement")) nil [77604 78078])
            ("replace-loop-through-replacements" function (:arguments ("data" "count")) nil [78080 78503])
            ("replace-match-data" function (:arguments ("integers" "reuse" "new")) nil [78505 78908])
            ("replace-match-maybe-edit" function (:arguments ("newtext" "fixedcase" "literal" "noedit" "match-data" "backward")) nil [78910 80497])
            ("replace-update-post-hook" variable nil nil [80499 80613])
            ("replace-search-function" variable nil nil [80615 80830])
            ("replace-re-search-function" variable nil nil [80832 81117])
            ("replace-search" function (:arguments ("search-string" "limit" "regexp-flag" "delimited-flag" "case-fold-search" "backward")) nil [81119 82439])
            ("replace-overlay" variable nil nil [82441 82469])
            ("replace-highlight" function (:arguments ("match-beg" "match-end" "range-beg" "range-end" "search-string" "regexp-flag" "delimited-flag" "case-fold-search" "backward")) nil [82471 83433])
            ("replace-dehighlight" function nil nil [83435 83772])
            ("perform-replace" function (:arguments ("from-string" "replacements" "query-flag" "regexp-flag" "delimited-flag" "repeat-count" "map" "start" "end" "backward" "region-noncontiguous-p")) nil [83774 99929]))          
      :file "replace.el.gz"
      :pointmax 99956
      :fsize 24963
      :lastmodtime '(22768 58519 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1051 1068])
            ("declare-function" code nil nil [1071 1133])
            ("declare-function" code nil nil [1134 1174])
            ("compilation-current-error" variable nil nil [1196 1230])
            ("compilation-context-lines" variable nil nil [1231 1265])
            ("idle-update-delay" variable (:default-value 0.5) nil [1267 1564])
            ("killing" customgroup (:user-visible-flag t) nil [1566 1640])
            ("paren-matching" customgroup (:user-visible-flag t) nil [1642 1744])
            ("next-error" customgroup (:user-visible-flag t) nil [1781 1882])
            ("next-error" variable
               (:default-value (quote ((t (:inherit region))))
                :type "face")
                nil [1884 2015])
            ("next-error-highlight" variable (:default-value 0.5) nil [2017 2772])
            ("next-error-highlight-no-select" variable (:default-value 0.5) nil [2774 3467])
            ("next-error-recenter" variable nil nil [3469 3831])
            ("next-error-hook" variable nil nil [3833 3974])
            ("next-error-highlight-timer" variable nil nil [3976 4015])
            ("next-error-overlay-arrow-position" variable nil nil [4017 4063])
            ("put" code nil nil [4064 4142])
            ("add-to-list" code nil nil [4143 4220])
            ("next-error-last-buffer" variable nil nil [4222 4449])
            ("next-error-function" variable nil nil [4451 4909])
            ("make-variable-buffer-local" code nil nil [4910 4959])
            ("next-error-move-function" variable nil nil [4961 5274])
            ("make-variable-buffer-local" code nil nil [5275 5329])
            ("next-error-buffer-p" function (:arguments ("buffer" "avoid-current" "extra-test-inclusive" "extra-test-exclusive")) nil [5331 6413])
            ("next-error-find-buffer" function (:arguments ("avoid-current" "extra-test-inclusive" "extra-test-exclusive")) nil [6415 8697])
            ("next-error" function
               (:user-visible-flag t
                :arguments ("arg" "reset"))
                nil [8699 10468])
            ("next-error-internal" function nil nil [10470 10891])
            ("defalias" code nil nil [10893 10932])
            ("defalias" code nil nil [10933 10967])
            ("previous-error" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [10969 11286])
            ("first-error" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [11288 11556])
            ("next-error-no-select" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [11558 12010])
            ("previous-error-no-select" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [12012 12390])
            ("next-error-follow-last-line" variable nil nil [12461 12501])
            ("define-minor-mode" code nil nil [12503 13211])
            ("next-error-follow-mode-post-command-hook" function nil nil [13327 13660])
            ("fundamental-mode" function (:user-visible-flag t) nil [13669 13878])
            ("special-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (suppress-keymap map) (define-key map "q" (quote quit-window)) (define-key map " " (quote scroll-up-command)) (define-key map [33554464] (quote scroll-down-command)) (define-key map "" (quote scroll-down-command)) (define-key map "?" (quote describe-mode)) (define-key map "h" (quote describe-mode)) (define-key map ">" (quote end-of-buffer)) (define-key map "<" (quote beginning-of-buffer)) (define-key map "g" (quote revert-buffer)) map)) nil [13956 14440])
            ("put" code nil nil [14442 14482])
            ("define-derived-mode" code nil nil [14483 14628])
            ("self-insert-uses-region-functions" variable nil nil [14661 15034])
            ("hard-newline" variable (:default-value (propertize "
" (quote hard) t (quote rear-nonsticky) (quote (hard)))) nil [15036 15169])
            ("newline" function
               (:user-visible-flag t
                :arguments ("arg" "interactive"))
                nil [15171 18496])
            ("set-hard-newline-properties" function (:arguments ("from" "to")) nil [18498 18846])
            ("open-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [18848 19625])
            ("split-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [19627 20428])
            ("delete-indentation" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [20430 21143])
            ("defalias" code nil nil [21145 21187])
            ("delete-blank-lines" function (:user-visible-flag t) nil [21206 22633])
            ("delete-trailing-lines" variable (:default-value t) nil [22635 22921])
            ("delete-trailing-whitespace" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [22923 24729])
            ("newline-and-indent" function (:user-visible-flag t) nil [24731 25164])
            ("reindent-then-newline-and-indent" function (:user-visible-flag t) nil [25166 26392])
            ("read-quoted-char-radix" variable (:default-value 8) nil [26394 26615])
            ("read-quoted-char" function (:arguments ("prompt")) nil [26617 29466])
            ("quoted-insert" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [29468 31497])
            ("forward-to-indentation" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [31499 31692])
            ("backward-to-indentation" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [31694 31893])
            ("back-to-indentation" function (:user-visible-flag t) nil [31895 32185])
            ("fixup-whitespace" function (:user-visible-flag t) nil [32187 32526])
            ("delete-horizontal-space" function
               (:user-visible-flag t
                :arguments ("backward-only"))
                nil [32528 32966])
            ("just-one-space" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [32968 33228])
            ("cycle-spacing--context" variable nil nil [33230 33485])
            ("cycle-spacing" function
               (:user-visible-flag t
                :arguments ("n" "preserve-nl-back" "mode"))
                nil [33487 35936])
            ("beginning-of-buffer" function (:arguments ("arg")) nil [35939 36862])
            ("end-of-buffer" function (:arguments ("arg")) nil [36864 38111])
            ("delete-active-region" variable (:default-value t) nil [38113 38650])
            ("region-extract-function" variable (:default-value (lambda (delete) (when (region-beginning) (cond ((eq delete (quote bounds)) (list (cons (region-beginning) (region-end)))) ((eq delete (quote delete-only)) (delete-region (region-beginning) (region-end))) (t (filter-buffer-substring (region-beginning) (region-end) delete)))))) nil [38652 39474])
            ("region-insert-function" variable (:default-value (lambda (lines) (let ((first t)) (while lines (or first (insert 10)) (insert-for-yank (car lines)) (setq lines (cdr lines) first nil))))) nil [39476 39822])
            ("delete-backward-char" function (:arguments ("n" "killflag")) nil [39824 41461])
            ("delete-forward-char" function (:arguments ("n" "killflag")) nil [41463 42606])
            ("mark-whole-buffer" function nil nil [42608 43045])
            ("goto-line" function (:arguments ("line" "buffer")) nil [43089 45366])
            ("count-words-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "arg"))
                nil [45368 46050])
            ("count-words" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [46052 46845])
            ("count-words--buffer-message" function nil nil [46847 47000])
            ("count-words--message" function (:arguments ("str" "start" "end")) nil [47002 47327])
            ("define-obsolete-function-alias" code nil nil [47329 47408])
            ("what-line" function (:user-visible-flag t) nil [47410 47761])
            ("count-lines" function (:arguments ("start" "end")) nil [47763 48600])
            ("line-number-at-pos" function (:arguments ("pos")) nil [48602 49062])
            ("what-cursor-position" function
               (:user-visible-flag t
                :arguments ("detail"))
                nil [49064 53567])
            ("read-expression-map" variable (:default-value (let ((m (make-sparse-keymap))) (define-key m "\211" (quote completion-at-point)) (define-key m "	" (quote completion-at-point)) (set-keymap-parent m minibuffer-local-map) m)) nil [53632 53947])
            ("read-minibuffer" function (:arguments ("prompt" "initial-contents")) nil [53949 54472])
            ("eval-minibuffer" function (:arguments ("prompt" "initial-contents")) nil [54474 54931])
            ("minibuffer-completing-symbol" variable nil nil [54933 55036])
            ("make-obsolete-variable" code nil nil [55037 55107])
            ("minibuffer-default" variable nil nil [55109 55302])
            ("eval-expression-print-level" variable (:default-value 4) nil [55304 55534])
            ("eval-expression-print-length" variable (:default-value 12) nil [55536 55769])
            ("eval-expression-debug-on-error" variable (:default-value t) nil [55771 55980])
            ("eval-expression-print-format" function (:arguments ("value")) nil [55982 56674])
            ("eval-expression-minibuffer-setup-hook" variable nil nil [56676 56790])
            ("read--expression" function (:arguments ("prompt" "initial-contents")) nil [56792 57451])
            ("eval-expression" function
               (:user-visible-flag t
                :arguments ("exp" "insert-value"))
                nil [57581 59870])
            ("edit-and-eval-command" function (:arguments ("prompt" "command")) nil [59872 60799])
            ("repeat-complex-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [60801 62469])
            ("extended-command-history" variable nil nil [62472 62509])
            ("execute-extended-command--last-typed" variable nil nil [62510 62559])
            ("read-extended-command" function nil nil [62561 64745])
            ("suggest-key-bindings" variable (:default-value t) nil [64747 65113])
            ("execute-extended-command--shorter-1" function (:arguments ("name" "length")) nil [65115 65577])
            ("execute-extended-command--shorter" function (:arguments ("name" "typed")) nil [65579 66489])
            ("execute-extended-command" function (:arguments ("prefixarg" "command-name" "typed")) nil [66491 70056])
            ("command-execute" function (:arguments ("cmd" "record-flag" "keys" "special")) nil [70058 72667])
            ("minibuffer-history" variable nil nil [72670 72923])
            ("minibuffer-history-sexp-flag" variable nil nil [72924 73239])
            ("setq" code nil nil [73240 73294])
            ("setq" code nil nil [73295 73333])
            ("minibuffer-history-search-history" variable nil nil [73359 73405])
            ("minibuffer-text-before-history" variable nil nil [73407 73607])
            ("add-hook" code nil nil [73609 73673])
            ("minibuffer-history-initialize" function nil nil [73675 73759])
            ("minibuffer-avoid-prompt" function (:arguments ("_new" "_old")) nil [73761 73976])
            ("minibuffer-history-case-insensitive-variables" variable nil nil [73978 74368])
            ("previous-matching-history-element" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [74370 77214])
            ("next-matching-history-element" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [77216 78270])
            ("minibuffer-temporary-goal-position" variable nil nil [78272 78319])
            ("minibuffer-default-add-function" variable (:default-value (quote minibuffer-default-add-completions)) nil [78321 78961])
            ("minibuffer-default-add-done" variable nil nil [78963 79286])
            ("make-variable-buffer-local" code nil nil [79288 79345])
            ("minibuffer-default-add-completions" function nil nil [79347 79801])
            ("goto-history-element" function
               (:user-visible-flag t
                :arguments ("nabs"))
                nil [79803 82091])
            ("next-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [82093 82344])
            ("previous-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [82346 82604])
            ("next-line-or-history-element" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [82606 84088])
            ("previous-line-or-history-element" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [84090 86129])
            ("next-complete-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [86131 86787])
            ("previous-complete-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [86789 87074])
            ("minibuffer-prompt-width" function nil nil [87133 87422])
            ("add-hook" code nil nil [87455 87522])
            ("minibuffer-history-isearch-message-overlay" variable nil nil [87524 87575])
            ("make-variable-buffer-local" code nil nil [87576 87648])
            ("minibuffer-history-isearch-setup" function nil nil [87650 88290])
            ("minibuffer-history-isearch-end" function nil nil [88292 88522])
            ("minibuffer-history-isearch-search" function nil nil [88524 90429])
            ("minibuffer-history-isearch-message" function (:arguments ("c-q-hack" "ellipsis")) nil [90431 91828])
            ("minibuffer-history-isearch-wrap" function nil nil [91830 92447])
            ("minibuffer-history-isearch-push-state" function nil nil [92449 92780])
            ("minibuffer-history-isearch-pop-state" function (:arguments ("_cmd" "hist-pos")) nil [92782 92994])
            ("define-obsolete-function-alias" code nil nil [93072 93134])
            ("undo-equiv-table" variable
               (:constant-flag t
                :default-value (make-hash-table :test (quote eq) :weakness t))
                nil [93136 93379])
            ("undo-in-region" variable nil nil [93381 93485])
            ("undo-no-redo" variable nil nil [93487 93562])
            ("pending-undo-list" variable nil nil [93564 93715])
            ("undo" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [93717 98338])
            ("buffer-disable-undo" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [98340 98621])
            ("undo-only" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [98623 98885])
            ("undo-in-progress" variable nil nil [98887 99018])
            ("undo-more" function (:arguments ("n")) nil [99020 99715])
            ("primitive-undo" function (:arguments ("n" "list")) nil [99717 106117])
            ("undo-copy-list" function (:arguments ("list")) nil [106142 106240])
            ("undo-copy-list-1" function (:arguments ("elt")) nil [106242 106351])
            ("undo-start" function (:arguments ("beg" "end")) nil [106353 106941])
            ("undo-make-selective-list" function (:arguments ("start" "end")) nil [109939 112225])
            ("undo-elt-in-region" function (:arguments ("undo-elt" "start" "end")) nil [112227 113266])
            ("undo-elt-crosses-region" function (:arguments ("undo-elt" "start" "end")) nil [113268 113810])
            ("undo-adjust-elt" function (:arguments ("elt" "deltas")) nil [113812 114577])
            ("undo-adjust-beg-end" function (:arguments ("beg" "end" "deltas")) nil [115468 115773])
            ("undo-adjust-pos" function (:arguments ("pos" "deltas" "use-<")) nil [115775 116247])
            ("undo-delta" function (:arguments ("undo-elt")) nil [116418 116751])
            ("defvar-local" code nil nil [116947 117668])
            ("undo-auto-current-boundary-timer" variable nil nil [117670 117845])
            ("undo-auto--this-command-amalgamating" variable nil nil [117847 118043])
            ("undo-auto--needs-boundary-p" function nil nil [118045 118185])
            ("undo-auto--last-boundary-amalgamating-number" function nil nil [118187 118491])
            ("undo-auto--ensure-boundary" function (:arguments ("cause")) nil [118493 119121])
            ("undo-auto--boundaries" function (:arguments ("cause")) nil [119123 119557])
            ("undo-auto--boundary-timer" function nil nil [119559 119728])
            ("undo-auto--boundary-ensure-timer" function nil nil [119730 119975])
            ("undo-auto--undoably-changed-buffers" variable nil nil [119977 120214])
            ("undo-auto--add-boundary" function nil nil [120216 120495])
            ("undo-auto-amalgamate" function nil nil [120497 121826])
            ("undo-auto--undoable-change-no-timer" function nil nil [122050 122206])
            ("undo-auto--undoable-change" function nil nil [122208 122369])
            ("undo-ask-before-discard" variable nil nil [122400 123166])
            ("undo-extra-outer-limit" variable nil nil [123168 123444])
            ("make-variable-buffer-local" code nil nil [123445 123497])
            ("setq" code nil nil [123782 123841])
            ("undo-outer-limit-truncate" function (:arguments ("size")) nil [123842 125633])
            ("password-word-equivalents" variable (:default-value (quote ("password" "passcode" "passphrase" "pass phrase" "암호" "パスワード" "ପ୍ରବେଶ ସଙ୍କେତ" "ពាក្យសម្ងាត់" "adgangskode" "contraseña" "contrasenya" "geslo" "hasło" "heslo" "iphasiwedi" "jelszó" "lösenord" "lozinka" "mật khẩu" "mot de passe" "parola" "pasahitza" "passord" "passwort" "pasvorto" "salasana" "senha" "slaptažodis" "wachtwoord" "كلمة السر" "ססמה" "лозинка" "пароль" "गुप्तशब्द" "शब्दकूट" "પાસવર્ડ" "సంకేతపదము" "ਪਾਸਵਰਡ" "ಗುಪ್ತಪದ" "கடவுச்சொல்" "അടയാളവാക്ക്" "গুপ্তশব্দ" "পাসওয়ার্ড" "රහස්පදය" "密码" "密碼"))) nil [125636 127025])
            ("shell-command-history" variable nil nil [127027 127217])
            ("shell-command-switch" variable (:default-value (purecopy "-c")) nil [127219 127333])
            ("shell-command-default-error-buffer" variable nil nil [127335 127650])
            ("declare-function" code nil nil [127652 127718])
            ("declare-function" code nil nil [127719 127805])
            ("minibuffer-default-add-shell-commands" function (:user-visible-flag t) nil [127807 128511])
            ("declare-function" code nil nil [128513 128564])
            ("minibuffer-local-shell-command-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-map) (define-key map "	" (quote completion-at-point)) map)) nil [128566 128811])
            ("read-shell-command" function (:arguments ("prompt" "initial-contents" "hist" "args")) nil [128813 129442])
            ("async-shell-command-buffer" variable (:default-value (quote confirm-new-buffer)) nil [129444 130697])
            ("async-shell-command" function
               (:user-visible-flag t
                :arguments ("command" "output-buffer" "error-buffer"))
                nil [130699 132004])
            ("shell-command" function
               (:user-visible-flag t
                :arguments ("command" "output-buffer" "error-buffer"))
                nil [132006 140155])
            ("display-message-or-buffer" function (:arguments ("message" "buffer-name" "action" "frame")) nil [140157 142553])
            ("shell-command-sentinel" function (:arguments ("process" "signal")) nil [142649 142860])
            ("shell-command-on-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "command" "output-buffer" "replace" "error-buffer" "display-error-buffer" "region-noncontiguous-p"))
                nil [142862 152418])
            ("shell-command-to-string" function (:arguments ("command")) nil [152420 152680])
            ("process-file" function (:arguments ("program" "infile" "buffer" "display" "args")) nil [152682 154132])
            ("process-file-side-effects" variable (:default-value t) nil [154134 154556])
            ("start-file-process" function (:arguments ("name" "buffer" "program" "program-args")) nil [154558 155443])
            ("tabulated-list-format" variable nil nil [155465 155495])
            ("tabulated-list-entries" variable nil nil [155496 155527])
            ("tabulated-list-sort-key" variable nil nil [155528 155560])
            ("declare-function" code nil nil [155561 155627])
            ("declare-function" code nil nil [155628 155734])
            ("process-menu-query-only" variable nil nil [155736 155772])
            ("process-menu-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [100] (quote process-menu-delete-process)) map)) nil [155774 155904])
            ("define-derived-mode" code nil nil [155906 156402])
            ("process-menu-delete-process" function (:user-visible-flag t) nil [156404 156575])
            ("list-processes--refresh" function nil nil [156577 158224])
            ("process-menu-visit-buffer" function (:arguments ("button")) nil [158226 158323])
            ("list-processes" function
               (:user-visible-flag t
                :arguments ("query-only" "buffer"))
                nil [158325 159288])
            ("setq" code nil nil [159313 159352])
            ("setq" code nil nil [159353 159389])
            ("internal-echo-keystrokes-prefix" function nil nil [159391 159996])
            ("prefix-command-echo-keystrokes-functions" variable nil nil [159998 160204])
            ("prefix-command-update" function nil nil [160206 160373])
            ("prefix-command-preserve-state-hook" variable nil nil [160375 160487])
            ("prefix-command-preserve-state" function nil nil [160489 160982])
            ("reset-this-command-lengths" function nil nil [160984 161087])
            ("add-hook" code nil nil [161183 161279])
            ("universal-argument--description" function nil nil [161280 161739])
            ("add-hook" code nil nil [161741 161828])
            ("universal-argument--preserve" function nil nil [161829 161907])
            ("universal-argument-map" variable (:default-value (let ((map (make-sparse-keymap)) (universal-argument-minus (\` (menu-item "" negative-argument :filter (\, (lambda (cmd) (if (integerp prefix-arg) nil cmd))))))) (define-key map [switch-frame] (lambda (e) (interactive "e") (handle-switch-frame e) (universal-argument--mode))) (define-key map [21] (quote universal-argument-more)) (define-key map [45] universal-argument-minus) (define-key map [48] (quote digit-argument)) (define-key map [49] (quote digit-argument)) (define-key map [50] (quote digit-argument)) (define-key map [51] (quote digit-argument)) (define-key map [52] (quote digit-argument)) (define-key map [53] (quote digit-argument)) (define-key map [54] (quote digit-argument)) (define-key map [55] (quote digit-argument)) (define-key map [56] (quote digit-argument)) (define-key map [57] (quote digit-argument)) (define-key map [kp-0] (quote digit-argument)) (define-key map [kp-1] (quote digit-argument)) (define-key map [kp-2] (quote digit-argument)) (define-key map [kp-3] (quote digit-argument)) (define-key map [kp-4] (quote digit-argument)) (define-key map [kp-5] (quote digit-argument)) (define-key map [kp-6] (quote digit-argument)) (define-key map [kp-7] (quote digit-argument)) (define-key map [kp-8] (quote digit-argument)) (define-key map [kp-9] (quote digit-argument)) (define-key map [kp-subtract] universal-argument-minus) map)) nil [161909 163525])
            ("universal-argument--mode" function nil nil [163527 163637])
            ("universal-argument" function (:user-visible-flag t) nil [163639 164382])
            ("universal-argument-more" function (:arguments ("arg")) nil [164384 164856])
            ("negative-argument" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [164858 165232])
            ("digit-argument" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [165234 166002])
            ("filter-buffer-substring-functions" variable nil nil [166006 166183])
            ("make-obsolete-variable" code nil nil [166184 166308])
            ("filter-buffer-substring-function" variable (:default-value (function buffer-substring--filter)) nil [166310 166716])
            ("buffer-substring-filters" variable nil nil [166718 167199])
            ("make-obsolete-variable" code nil nil [167200 167315])
            ("filter-buffer-substring" function (:arguments ("beg" "end" "delete")) nil [167317 168173])
            ("buffer-substring--filter" function (:arguments ("beg" "end" "delete")) nil [168175 169072])
            ("interprogram-cut-function" variable (:default-value (function gui-select-text)) nil [169116 169667])
            ("interprogram-paste-function" variable (:default-value (function gui-selection-value)) nil [169669 171108])
            ("kill-ring" variable nil nil [171149 171604])
            ("kill-ring-max" variable (:default-value 60) nil [171606 171741])
            ("kill-ring-yank-pointer" variable nil nil [171743 171844])
            ("save-interprogram-paste-before-kill" variable nil nil [171846 172348])
            ("kill-do-not-save-duplicates" variable nil nil [172350 172579])
            ("kill-new" function (:arguments ("string" "replace")) nil [172581 174607])
            ("kill-append-merge-undo" variable nil nil [174766 174956])
            ("kill-append" function (:arguments ("string" "before-p")) nil [174958 175814])
            ("yank-pop-change-selection" variable nil nil [175816 176164])
            ("current-kill" function (:arguments ("n" "do-not-move")) nil [176166 177824])
            ("kill-read-only-ok" variable nil nil [177875 178011])
            ("kill-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [178013 180889])
            ("copy-region-as-kill" function
               (:user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [181083 182216])
            ("kill-ring-save" function
               (:user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [182218 183507])
            ("indicate-copied-region" function (:arguments ("message-len")) nil [183509 185091])
            ("append-next-kill" function
               (:user-visible-flag t
                :arguments ("interactive"))
                nil [185093 185913])
            ("bidi-directional-controls-chars" variable (:default-value "‪-‮⁦-⁩") nil [185915 186060])
            ("bidi-directional-non-controls-chars" variable (:default-value "^‪-‮⁦-⁩") nil [186062 186212])
            ("squeeze-bidi-context-1" function (:arguments ("from" "to" "category" "replacement")) nil [186214 187320])
            ("squeeze-bidi-context" function (:arguments ("from" "to")) nil [187322 188423])
            ("line-substring-with-bidi-context" function (:arguments ("start" "end" "no-properties")) nil [188425 190351])
            ("buffer-substring-with-bidi-context" function (:arguments ("start" "end" "no-properties")) nil [190353 191656])
            ("yank-handled-properties" variable (:default-value (quote ((font-lock-face . yank-handle-font-lock-face-property) (category . yank-handle-category-property)))) nil [191672 192497])
            ("yank-excluded-properties" variable (:default-value (quote (category field follow-link fontified font-lock-face help-echo intangible invisible keymap local-map mouse-face read-only yank-handler))) nil [192570 193033])
            ("yank-window-start" variable nil nil [193035 193065])
            ("yank-undo-function" variable nil nil [193066 193397])
            ("yank-pop" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [193399 195115])
            ("yank" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [195117 197865])
            ("rotate-yank-pointer" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [197867 198057])
            ("kill-forward-chars" function (:arguments ("arg")) nil [198122 198267])
            ("kill-backward-chars" function (:arguments ("arg")) nil [198316 198462])
            ("backward-delete-char-untabify-method" variable (:default-value (quote untabify)) nil [198464 198939])
            ("backward-delete-char-untabify" function
               (:user-visible-flag t
                :arguments ("arg" "killp"))
                nil [198941 200293])
            ("zap-to-char" function
               (:user-visible-flag t
                :arguments ("arg" "char"))
                nil [200295 200912])
            ("kill-whole-line" variable nil nil [200949 201094])
            ("kill-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [201096 203310])
            ("kill-whole-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [203312 204941])
            ("forward-visible-line" function (:arguments ("arg")) nil [204943 207433])
            ("end-of-visible-line" function nil nil [207435 208201])
            ("insert-buffer" function (:arguments ("buffer")) nil [208204 208757])
            ("append-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer" "start" "end"))
                nil [208759 209659])
            ("prepend-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer" "start" "end"))
                nil [209661 210203])
            ("copy-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer" "start" "end"))
                nil [210205 210774])
            ("define-error" code nil nil [210777 210846])
            ("activate-mark-hook" variable nil nil [210848 211037])
            ("deactivate-mark-hook" variable nil nil [211039 211117])
            ("mark" function (:arguments ("force")) nil [211119 211743])
            ("deactivate-mark" function (:arguments ("force")) nil [211778 213868])
            ("activate-mark" function (:arguments ("no-tmm")) nil [213870 214261])
            ("set-mark" function (:arguments ("pos")) nil [214263 215487])
            ("save-mark-and-excursion--save" function nil nil [215489 215638])
            ("save-mark-and-excursion--restore" function (:arguments ("saved-mark-info")) nil [215640 216590])
            ("save-mark-and-excursion" function (:arguments ("body")) nil [216592 217014])
            ("use-empty-active-region" variable nil nil [217016 217515])
            ("use-region-p" function nil nil [217517 218123])
            ("region-active-p" function nil nil [218125 218814])
            ("region-noncontiguous-p" function nil nil [218816 219065])
            ("redisplay-unhighlight-region-function" variable (:default-value (lambda (rol) (when (overlayp rol) (delete-overlay rol)))) nil [219067 219173])
            ("redisplay-highlight-region-function" variable (:default-value (lambda (start end window rol) (if (not (overlayp rol)) (let ((nrol (make-overlay start end))) (funcall redisplay-unhighlight-region-function rol) (overlay-put nrol (quote window) window) (overlay-put nrol (quote face) (quote region)) (overlay-put nrol (quote priority) (quote (nil . 100))) nrol) (unless (and (eq (overlay-buffer rol) (current-buffer)) (eq (overlay-start rol) start) (eq (overlay-end rol) end)) (move-overlay rol start end (current-buffer))) rol))) nil [219175 220046])
            ("redisplay--update-region-highlight" function (:arguments ("window")) nil [220048 220884])
            ("pre-redisplay-functions" variable (:default-value (list (function redisplay--update-region-highlight))) nil [220886 221202])
            ("redisplay--pre-redisplay-functions" function (:arguments ("windows")) nil [221204 221669])
            ("add-function" code nil nil [221671 221767])
            ("defvar-local" code nil nil [221770 221869])
            ("put" code nil nil [221870 221905])
            ("mark-ring-max" variable (:default-value 16) nil [221907 222052])
            ("global-mark-ring" variable nil nil [222054 222138])
            ("global-mark-ring-max" variable (:default-value 16) nil [222140 222301])
            ("pop-to-mark-command" function (:user-visible-flag t) nil [222303 222616])
            ("push-mark-command" function
               (:user-visible-flag t
                :arguments ("arg" "nomsg"))
                nil [222618 223029])
            ("set-mark-command-repeat-pop" variable nil nil [223031 223490])
            ("set-mark-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [223492 225811])
            ("push-mark" function (:arguments ("location" "nomsg" "activate")) nil [225813 227367])
            ("pop-mark" function nil nil [227369 227788])
            ("define-obsolete-function-alias" code nil nil [227790 227879])
            ("exchange-point-and-mark" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [227880 228775])
            ("shift-select-mode" variable (:default-value t) nil [228777 229349])
            ("handle-shift-selection" function nil nil [229351 230676])
            ("define-minor-mode" code nil nil [230678 232038])
            ("widen-automatically" variable (:default-value t) nil [232040 232374])
            ("non-essential" variable nil nil [232376 232774])
            ("pop-global-mark" function (:user-visible-flag t) nil [232776 233591])
            ("next-line-add-newlines" variable nil nil [233594 233768])
            ("next-line" function (:arguments ("arg" "try-vscroll")) nil [233770 235967])
            ("previous-line" function (:arguments ("arg" "try-vscroll")) nil [235969 237675])
            ("track-eol" variable nil nil [237677 238015])
            ("goal-column" variable nil nil [238017 238284])
            ("make-variable-buffer-local" code nil nil [238285 238326])
            ("temporary-goal-column" variable nil nil [238328 238845])
            ("line-move-ignore-invisible" variable (:default-value t) nil [238847 239505])
            ("line-move-visual" variable (:default-value t) nil [239507 240083])
            ("declare-function" code nil nil [240120 240180])
            ("default-font-height" function nil nil [240182 240816])
            ("default-font-width" function nil nil [240818 241539])
            ("default-line-height" function nil nil [241541 242003])
            ("window-screen-lines" function nil nil [242005 242575])
            ("line-move-partial" function (:arguments ("arg" "noerror" "to-end")) nil [242622 246395])
            ("line-move" function (:arguments ("arg" "noerror" "to-end" "try-vscroll")) nil [246719 248696])
            ("line-move-visual" function (:arguments ("arg" "noerror")) nil [248844 251434])
            ("line-move-1" function (:arguments ("arg" "noerror" "_to-end")) nil [251588 256261])
            ("line-move-finish" function (:arguments ("column" "opoint" "forward")) nil [256263 259401])
            ("line-move-to-column" function (:arguments ("col")) nil [259403 260985])
            ("move-end-of-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [260987 262342])
            ("move-beginning-of-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [262344 263876])
            ("put" code nil nil [264006 264040])
            ("set-goal-column" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [264042 265075])
            ("end-of-visual-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [265143 265707])
            ("beginning-of-visual-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [265709 266300])
            ("kill-visual-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [266302 267717])
            ("next-logical-line" function
               (:user-visible-flag t
                :arguments ("arg" "try-vscroll"))
                nil [267719 268088])
            ("previous-logical-line" function
               (:user-visible-flag t
                :arguments ("arg" "try-vscroll"))
                nil [268090 268469])
            ("visual-line" customgroup (:user-visible-flag t) nil [268471 268572])
            ("visual-line-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [remap kill-line] (quote kill-visual-line)) (define-key map [remap move-beginning-of-line] (quote beginning-of-visual-line)) (define-key map [remap move-end-of-line] (quote end-of-visual-line)) map)) nil [268574 269062])
            ("visual-line-fringe-indicators" variable (:default-value (quote (nil nil))) nil [269064 270251])
            ("visual-line--saved-state" variable nil nil [270253 270290])
            ("define-minor-mode" code nil nil [270292 271933])
            ("turn-on-visual-line-mode" function nil nil [271935 271993])
            ("define-globalized-minor-mode" code nil nil [271995 272093])
            ("transpose-chars" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [272097 272611])
            ("transpose-words" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [272613 273057])
            ("transpose-sexps" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [273059 274813])
            ("transpose-lines" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [274815 275422])
            ("transpose-subr" function (:arguments ("mover" "arg" "special")) nil [275573 276830])
            ("transpose-subr-1" function (:arguments ("pos1" "pos2")) nil [276832 277836])
            ("backward-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [277839 278389])
            ("mark-word" function
               (:user-visible-flag t
                :arguments ("arg" "allow-extend"))
                nil [278391 279143])
            ("kill-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [279145 279357])
            ("backward-kill-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [279359 279550])
            ("current-word" function (:arguments ("strict" "really-word")) nil [279552 281160])
            ("fill-prefix" variable nil nil [281163 281329])
            ("make-variable-buffer-local" code nil nil [281330 281371])
            ("put" code nil nil [281372 281429])
            ("auto-fill-inhibit-regexp" variable nil nil [281431 281597])
            ("do-auto-fill" function nil nil [281599 284899])
            ("comment-line-break-function" variable (:default-value (quote comment-indent-new-line)) nil [284901 285227])
            ("default-indent-new-line" function
               (:user-visible-flag t
                :arguments ("soft"))
                nil [285229 286336])
            ("normal-auto-fill-function" variable (:default-value (quote do-auto-fill)) nil [286338 286494])
            ("put" code nil nil [286496 286558])
            ("put" code nil nil [286732 286784])
            ("define-minor-mode" code nil nil [286786 287529])
            ("auto-fill-function" function nil nil [287596 287703])
            ("turn-on-auto-fill" function nil nil [287705 287798])
            ("turn-off-auto-fill" function nil nil [287800 287896])
            ("custom-add-option" code nil nil [287898 287952])
            ("set-fill-column" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [287954 288792])
            ("set-selective-display" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [288795 289585])
            ("defvaralias" code nil nil [289587 289645])
            ("toggle-truncate-lines" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [289647 290427])
            ("toggle-word-wrap" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [290429 290973])
            ("overwrite-mode-textual" variable (:default-value (purecopy " Ovwrt")) nil [290975 291092])
            ("overwrite-mode-binary" variable (:default-value (purecopy " Bin Ovwrt")) nil [291093 291220])
            ("define-minor-mode" code nil nil [291222 291955])
            ("define-minor-mode" code nil nil [291957 292885])
            ("define-minor-mode" code nil nil [292887 293363])
            ("define-minor-mode" code nil nil [293365 293669])
            ("define-minor-mode" code nil nil [293671 293979])
            ("define-minor-mode" code nil nil [293981 294977])
            ("paren-blinking" customgroup (:user-visible-flag t) nil [294980 295111])
            ("blink-matching-paren" variable (:default-value t) nil [295113 295711])
            ("blink-matching-paren-on-screen" variable (:default-value t) nil [295713 296129])
            ("blink-matching-paren-distance" variable (:default-value (* 100 1024)) nil [296131 296456])
            ("blink-matching-delay" variable (:default-value 1) nil [296458 296594])
            ("blink-matching-paren-dont-ignore-comments" variable nil nil [296596 296864])
            ("blink-matching-check-mismatch" function (:arguments ("start" "end")) nil [296866 297851])
            ("blink-matching-check-function" variable (:default-value (function blink-matching-check-mismatch)) nil [297853 298219])
            ("blink-matching--overlay" variable (:default-value (let ((ol (make-overlay (point) (point) nil t))) (overlay-put ol (quote face) (quote show-paren-match)) (delete-overlay ol) ol)) nil [298221 298431])
            ("blink-matching-open" function (:user-visible-flag t) nil [298433 302997])
            ("blink-paren-function" variable (:default-value (quote blink-matching-open)) nil [302999 303188])
            ("blink-paren-post-self-insert-function" function nil nil [303190 303837])
            ("put" code nil nil [303839 303897])
            ("add-hook" code nil nil [303899 304278])
            ("keyboard-quit" function (:user-visible-flag t) nil [304456 305174])
            ("buffer-quit-function" variable nil nil [305176 305426])
            ("keyboard-escape-quit" function (:user-visible-flag t) nil [305428 306254])
            ("play-sound-file" function
               (:user-visible-flag t
                :arguments ("file" "volume" "device"))
                nil [306256 306651])
            ("read-mail-command" variable (:default-value (quote rmail)) nil [306655 307172])
            ("mail-user-agent" variable (:default-value (quote message-user-agent)) nil [307174 308718])
            ("compose-mail-user-agent-warnings" variable (:default-value t) nil [308720 309045])
            ("rfc822-goto-eoh" function nil nil [309047 309451])
            ("mail-encode-mml" variable nil nil [309493 309632])
            ("compose-mail" function
               (:user-visible-flag t
                :arguments ("to" "subject" "other-headers" "continue" "switch-function" "yank-action" "send-actions" "return-action"))
                nil [309634 312328])
            ("compose-mail-other-window" function
               (:user-visible-flag t
                :arguments ("to" "subject" "other-headers" "continue" "yank-action" "send-actions" "return-action"))
                nil [312330 312721])
            ("compose-mail-other-frame" function
               (:user-visible-flag t
                :arguments ("to" "subject" "other-headers" "continue" "yank-action" "send-actions" "return-action"))
                nil [312723 313111])
            ("set-variable-value-history" variable nil nil [313115 313300])
            ("set-variable" function
               (:user-visible-flag t
                :arguments ("variable" "value" "make-local"))
                nil [313302 316398])
            ("completion-list-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mouse-2] (quote choose-completion)) (define-key map [follow-link] (quote mouse-face)) (define-key map [down-mouse-2] nil) (define-key map "" (quote choose-completion)) (define-key map "" (quote delete-completion-window)) (define-key map [left] (quote previous-completion)) (define-key map [right] (quote next-completion)) (define-key map [9] (quote next-completion)) (define-key map [backtab] (quote previous-completion)) (define-key map "q" (quote quit-window)) (define-key map "z" (quote kill-this-buffer)) map)) nil [316453 317086])
            ("put" code nil nil [317154 317202])
            ("completion-reference-buffer" variable nil nil [317204 317433])
            ("completion-no-auto-exit" variable nil nil [317435 317616])
            ("completion-base-position" variable nil nil [317618 317988])
            ("completion-list-insert-choice-function" variable (:default-value (function completion--replace)) nil [317990 318289])
            ("completion-base-size" variable nil nil [318291 318746])
            ("make-obsolete-variable" code nil nil [318747 318826])
            ("delete-completion-window" function (:user-visible-flag t) nil [318828 319202])
            ("previous-completion" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [319204 319335])
            ("next-completion" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [319337 320587])
            ("choose-completion" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [320589 322548])
            ("choose-completion-guess-base-position" function (:arguments ("string")) nil [322632 323470])
            ("choose-completion-delete-max-match" function (:arguments ("string")) nil [323472 323664])
            ("choose-completion-string-functions" variable nil nil [323666 324305])
            ("choose-completion-string" function (:arguments ("choice" "buffer" "base-position" "insert-function")) nil [324307 327717])
            ("define-derived-mode" code nil nil [327719 328091])
            ("completion-list-mode-finish" function nil nil [328093 328289])
            ("add-hook" code nil nil [328291 328353])
            ("completion-show-help" variable (:default-value t) nil [328417 328568])
            ("completion-setup-function" function nil nil [328699 330681])
            ("add-hook" code nil nil [330683 330743])
            ("define-key" code nil nil [330745 330820])
            ("define-key" code nil nil [330821 330896])
            ("switch-to-completions" function (:user-visible-flag t) nil [330898 331439])
            ("event-apply-alt-modifier" function (:arguments ("_ignore-prompt")) nil [331601 331844])
            ("event-apply-super-modifier" function (:arguments ("_ignore-prompt")) nil [331845 332098])
            ("event-apply-hyper-modifier" function (:arguments ("_ignore-prompt")) nil [332099 332352])
            ("event-apply-shift-modifier" function (:arguments ("_ignore-prompt")) nil [332353 332606])
            ("event-apply-control-modifier" function (:arguments ("_ignore-prompt")) nil [332607 332864])
            ("event-apply-meta-modifier" function (:arguments ("_ignore-prompt")) nil [332865 333113])
            ("event-apply-modifier" function (:arguments ("event" "symbol" "lshiftby" "prefix")) nil [333115 334179])
            ("define-key" code nil nil [334181 334252])
            ("define-key" code nil nil [334253 334324])
            ("define-key" code nil nil [334325 334395])
            ("define-key" code nil nil [334396 334465])
            ("define-key" code nil nil [334466 334537])
            ("define-key" code nil nil [334538 334611])
            ("mapc" code nil nil [334901 335496])
            ("clone-buffer-hook" variable nil nil [335548 335649])
            ("clone-indirect-buffer-hook" variable nil nil [335651 335770])
            ("clone-process" function (:arguments ("process" "newname")) nil [335772 337281])
            ("clone-buffer" function
               (:user-visible-flag t
                :arguments ("newname" "display-flag"))
                nil [337384 340347])
            ("clone-indirect-buffer" function
               (:user-visible-flag t
                :arguments ("newname" "display-flag" "norecord"))
                nil [340350 341986])
            ("clone-indirect-buffer-other-window" function
               (:user-visible-flag t
                :arguments ("newname" "display-flag" "norecord"))
                nil [341989 342472])
            ("normal-erase-is-backspace" variable (:default-value (quote maybe)) nil [342520 344061])
            ("normal-erase-is-backspace-setup-frame" function (:arguments ("frame")) nil [344063 345138])
            ("define-minor-mode" code nil nil [345140 348635])
            ("vis-mode-saved-buffer-invisibility-spec" variable nil nil [348638 348761])
            ("define-minor-mode" code nil nil [348763 349916])
            ("define-minor-mode" code nil nil [349918 350688])
            ("messages-buffer-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map special-mode-map) (define-key map "g" nil) map)) nil [350691 350874])
            ("define-derived-mode" code nil nil [350876 350992])
            ("messages-buffer" function nil nil [350994 351281])
            ("bad-packages-alist" variable
               (:constant-flag t
                :default-value (quote ((semantic semantic-version "\\`2\\.0pre[1-3]\\'" "The version of `semantic' loaded does not work in Emacs 22.
It can cause constant high CPU load.
Upgrade to at least Semantic 2.0pre4 (distributed with CEDET 1.0pre4).") (CUA-mode t nil "CUA-mode is now part of the standard GNU Emacs distribution,
so you can now enable CUA via the Options menu or by customizing `cua-mode'.

You have loaded an older version of CUA-mode which does not work
correctly with this version of Emacs.  You should remove the old
version and use the one distributed with Emacs."))))
                nil [352240 353666])
            ("bad-package-check" function (:arguments ("package")) nil [353668 354173])
            ("dolist" code nil nil [354175 354297])
            ("define-alternatives" function (:arguments ("command" "customizations")) nil [354950 357574])
            ("upcase-dwim" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [357640 358009])
            ("downcase-dwim" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [358011 358398])
            ("capitalize-dwim" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [358400 358801])
            ("simple" package nil nil [358806 358823]))          
      :file "simple.el.gz"
      :pointmax 358849
      :fsize 97569
      :lastmodtime '(22768 58519 0 0)
      :unmatched-syntax '((close-paren 1068 . 1069) (symbol 1033 . 1050) (open-paren 1032 . 1033)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("declare-function" function (:arguments ("_fn" "_file" "_arglist" "_fileonly")) nil [1096 2616])
            ("defalias" code nil nil [2645 2666])
            ("noreturn" function (:arguments ("form")) nil [2668 2872])
            ("1value" function (:arguments ("form")) nil [2874 3112])
            ("def-edebug-spec" function (:arguments ("symbol" "spec")) nil [3114 3574])
            ("lambda" function (:arguments ("cdr")) nil [3576 4734])
            ("setq-local" function (:arguments ("var" "val")) nil [4736 4948])
            ("defvar-local" function (:arguments ("var" "val" "docstring")) nil [4950 5391])
            ("apply-partially" function (:arguments ("fun" "args")) nil [5393 5770])
            ("push" function (:arguments ("newelt" "place")) nil [5772 6366])
            ("pop" function (:arguments ("place")) nil [6368 7225])
            ("when" function (:arguments ("cond" "body")) nil [7227 7515])
            ("unless" function (:arguments ("cond" "body")) nil [7517 7803])
            ("dolist" function (:arguments ("spec" "body")) nil [7805 9084])
            ("dotimes" function (:arguments ("spec" "body")) nil [9086 10551])
            ("declare" function (:arguments ("_specs")) nil [10553 11128])
            ("ignore-errors" function (:arguments ("body")) nil [11130 11437])
            ("ignore" function
               (:user-visible-flag t
                :arguments ("_ignore"))
                nil [11468 11616])
            ("error" function (:arguments ("args")) nil [11673 12189])
            ("user-error" function (:arguments ("format" "args")) nil [12191 12851])
            ("define-error" function (:arguments ("name" "message" "parent")) nil [12853 13766])
            ("frame-configuration-p" function (:arguments ("object")) nil [13880 14135])
            ("internal--compiler-macro-cXXr" function (:arguments ("form" "x")) nil [14329 14909])
            ("caar" function (:arguments ("x")) nil [14911 15038])
            ("cadr" function (:arguments ("x")) nil [15040 15167])
            ("cdar" function (:arguments ("x")) nil [15169 15296])
            ("cddr" function (:arguments ("x")) nil [15298 15425])
            ("last" function (:arguments ("list" "n")) nil [15427 15844])
            ("butlast" function (:arguments ("list" "n")) nil [15846 16074])
            ("nbutlast" function (:arguments ("list" "n")) nil [16076 16353])
            ("zerop" function (:arguments ("number")) nil [16355 16585])
            ("delete-dups" function (:arguments ("list")) nil [16587 17374])
            ("delete-consecutive-dups" function (:arguments ("list" "circular")) nil [17451 17909])
            ("number-sequence" function (:arguments ("from" "to" "inc")) nil [17911 19918])
            ("copy-tree" function (:arguments ("tree" "vecp")) nil [19920 20669])
            ("assoc-default" function (:arguments ("key" "alist" "test" "default")) nil [20709 21509])
            ("assoc-ignore-case" function (:arguments ("key" "alist")) nil [21511 21833])
            ("assoc-ignore-representation" function (:arguments ("key" "alist")) nil [21835 22103])
            ("member-ignore-case" function (:arguments ("elt" "list")) nil [22105 22540])
            ("assq-delete-all" function (:arguments ("key" "alist")) nil [22542 23026])
            ("rassq-delete-all" function (:arguments ("value" "alist")) nil [23028 23521])
            ("alist-get" function (:arguments ("key" "alist" "default" "remove")) nil [23523 23983])
            ("remove" function (:arguments ("elt" "seq")) nil [23985 24338])
            ("remq" function (:arguments ("elt" "list")) nil [24340 24671])
            ("kbd" function (:arguments ("keys")) nil [24696 25076])
            ("put" code nil nil [25077 25095])
            ("undefined" function (:user-visible-flag t) nil [25097 25552])
            ("put" code nil nil [25647 25682])
            ("suppress-keymap" function (:arguments ("map" "nodigits")) nil [25684 26248])
            ("make-composed-keymap" function (:arguments ("maps" "parent")) nil [26250 26902])
            ("define-key-after" function (:arguments ("keymap" "key" "definition" "after")) nil [26904 28965])
            ("map-keymap-sorted" function (:arguments ("function" "keymap")) nil [28967 29647])
            ("keymap--menu-item-binding" function (:arguments ("val")) nil [29649 30119])
            ("keymap--menu-item-with-binding" function (:arguments ("item" "binding")) nil [30173 30773])
            ("keymap--merge-bindings" function (:arguments ("val1" "val2")) nil [30775 31241])
            ("keymap-canonicalize" function (:arguments ("map")) nil [31243 33112])
            ("put" code nil nil [33114 33171])
            ("keyboard-translate" function (:arguments ("from" "to")) nil [33173 33548])
            ("global-set-key" function
               (:user-visible-flag t
                :arguments ("key" "command"))
                nil [33579 34325])
            ("local-set-key" function
               (:user-visible-flag t
                :arguments ("key" "command"))
                nil [34327 35131])
            ("global-unset-key" function
               (:user-visible-flag t
                :arguments ("key"))
                nil [35133 35329])
            ("local-unset-key" function
               (:user-visible-flag t
                :arguments ("key"))
                nil [35331 35560])
            ("key-substitution-in-progress" variable nil nil [35616 35709])
            ("substitute-key-definition" function (:arguments ("olddef" "newdef" "keymap" "oldmap" "prefix")) nil [35711 37093])
            ("substitute-key-definition-key" function (:arguments ("defn" "olddef" "newdef" "prefix" "keymap")) nil [37095 38758])
            ("global-map" variable nil nil [38907 39081])
            ("esc-map" variable nil nil [39083 39223])
            ("ctl-x-map" variable nil nil [39225 39360])
            ("ctl-x-4-map" variable (:default-value (make-sparse-keymap)) nil [39362 39440])
            ("defalias" code nil nil [39441 39479])
            ("define-key" code nil nil [39480 39522])
            ("ctl-x-5-map" variable (:default-value (make-sparse-keymap)) nil [39524 39596])
            ("defalias" code nil nil [39597 39635])
            ("define-key" code nil nil [39636 39678])
            ("listify-key-sequence-1" variable
               (:constant-flag t
                :default-value (logior 128 134217728))
                nil [39718 39773])
            ("listify-key-sequence" function (:arguments ("key")) nil [39775 40013])
            ("eventp" function (:arguments ("obj")) nil [40015 40216])
            ("event-modifiers" function (:arguments ("event")) nil [40218 41512])
            ("event-basic-type" function (:arguments ("event")) nil [41514 42282])
            ("mouse-movement-p" function (:arguments ("object")) nil [42284 42417])
            ("mouse-event-p" function (:arguments ("object")) nil [42419 42637])
            ("event-start" function (:arguments ("event")) nil [42639 43799])
            ("event-end" function (:arguments ("event")) nil [43801 44119])
            ("event-click-count" function (:arguments ("event")) nil [44121 44331])
            ("posnp" function (:arguments ("obj")) nil [44388 45036])
            ("posn-window" function (:arguments ("position")) nil [45070 45252])
            ("posn-area" function (:arguments ("position")) nil [45254 45578])
            ("posn-point" function (:arguments ("position")) nil [45580 46046])
            ("posn-set-point" function (:arguments ("position")) nil [46048 46368])
            ("posn-x-y" function (:arguments ("position")) nil [46370 46623])
            ("declare-function" code nil nil [46625 46691])
            ("posn-col-row" function (:arguments ("position")) nil [46693 48511])
            ("posn-actual-col-row" function (:arguments ("position")) nil [48513 49101])
            ("posn-timestamp" function (:arguments ("position")) nil [49103 49291])
            ("posn-string" function (:arguments ("position")) nil [49293 49652])
            ("posn-image" function (:arguments ("position")) nil [49654 49894])
            ("posn-object" function (:arguments ("position")) nil [49896 50265])
            ("posn-object-x-y" function (:arguments ("position")) nil [50267 50554])
            ("posn-object-width-height" function (:arguments ("position")) nil [50556 50816])
            ("define-obsolete-function-alias" code nil nil [50859 50924])
            ("define-obsolete-function-alias" code nil nil [50925 50998])
            ("define-obsolete-function-alias" code nil nil [50999 51063])
            ("define-obsolete-function-alias" code nil nil [51064 51135])
            ("define-obsolete-function-alias" code nil nil [51136 51209])
            ("define-obsolete-function-alias" code nil nil [51210 51282])
            ("make-obsolete" code nil nil [51284 51350])
            ("make-obsolete" code nil nil [51351 51400])
            ("insert-string" function (:arguments ("args")) nil [51402 51720])
            ("makehash" function (:arguments ("test")) nil [51722 51842])
            ("log10" function (:arguments ("x")) nil [51844 51953])
            ("defalias" code nil nil [52001 52035])
            ("make-obsolete" code nil nil [52036 52090])
            ("defalias" code nil nil [52091 52127])
            ("make-obsolete" code nil nil [52128 52184])
            ("make-obsolete" code nil nil [52185 52292])
            ("set-advertised-calling-convention" code nil nil [52293 52394])
            ("set-advertised-calling-convention" code nil nil [52395 52463])
            ("set-advertised-calling-convention" code nil nil [52464 52535])
            ("set-advertised-calling-convention" code nil nil [52536 52621])
            ("set-advertised-calling-convention" code nil nil [52622 52691])
            ("set-advertised-calling-convention" code nil nil [52692 52761])
            ("make-obsolete-variable" code nil nil [53166 53353])
            ("make-obsolete-variable" code nil nil [53354 53433])
            ("make-obsolete-variable" code nil nil [53434 53501])
            ("make-obsolete-variable" code nil nil [53502 53567])
            ("make-obsolete-variable" code nil nil [53568 53629])
            ("make-obsolete-variable" code nil nil [53630 53701])
            ("make-obsolete-variable" code nil nil [53702 53767])
            ("make-obsolete-variable" code nil nil [53768 53829])
            ("make-obsolete-variable" code nil nil [53830 53905])
            ("make-obsolete-variable" code nil nil [53906 53983])
            ("make-obsolete-variable" code nil nil [53984 54063])
            ("make-obsolete-variable" code nil nil [54064 54141])
            ("make-obsolete-variable" code nil nil [54142 54221])
            ("make-obsolete-variable" code nil nil [54222 54311])
            ("make-obsolete-variable" code nil nil [54312 54387])
            ("make-obsolete-variable" code nil nil [54388 54469])
            ("make-obsolete-variable" code nil nil [54470 54553])
            ("make-obsolete-variable" code nil nil [54554 54649])
            ("make-obsolete-variable" code nil nil [54650 54737])
            ("make-obsolete-variable" code nil nil [54738 54819])
            ("make-obsolete-variable" code nil nil [54820 54907])
            ("make-obsolete-variable" code nil nil [54908 54999])
            ("make-obsolete-variable" code nil nil [55000 55065])
            ("make-obsolete-variable" code nil nil [55066 55131])
            ("make-obsolete-variable" code nil nil [55132 55235])
            ("make-obsolete-variable" code nil nil [55236 55329])
            ("make-obsolete-variable" code nil nil [55330 55393])
            ("make-obsolete-variable" code nil nil [55394 55534])
            ("make-obsolete-variable" code nil nil [55536 55600])
            ("make-obsolete-variable" code nil nil [55601 55684])
            ("make-obsolete-variable" code nil nil [55685 55757])
            ("make-obsolete-variable" code nil nil [55758 55834])
            ("make-obsolete-variable" code nil nil [55835 55892])
            ("make-obsolete" code nil nil [55893 55949])
            ("make-obsolete" code nil nil [55950 56010])
            ("make-obsolete" code nil nil [56012 56066])
            ("make-obsolete" code nil nil [56067 56123])
            ("make-obsolete-variable" code nil nil [56125 56249])
            ("define-obsolete-variable-alias" code nil nil [56288 56375])
            ("define-obsolete-variable-alias" code nil nil [56377 56470])
            ("define-obsolete-variable-alias" code nil nil [56471 56564])
            ("make-obsolete-variable" code nil nil [56810 56874])
            ("defvaralias" code nil nil [56876 56933])
            ("defalias" code nil nil [57006 57050])
            ("defalias" code nil nil [57051 57095])
            ("defalias" code nil nil [57096 57129])
            ("defalias" code nil nil [57130 57163])
            ("defalias" code nil nil [57164 57200])
            ("defalias" code nil nil [57201 57236])
            ("defalias" code nil nil [57237 57263])
            ("defalias" code nil nil [57264 57290])
            ("defalias" code nil nil [57291 57313])
            ("defalias" code nil nil [57339 57378])
            ("defalias" code nil nil [57379 57433])
            ("defalias" code nil nil [57434 57504])
            ("defalias" code nil nil [57505 57577])
            ("defalias" code nil nil [57578 57621])
            ("defalias" code nil nil [57622 57666])
            ("defalias" code nil nil [57667 57700])
            ("defalias" code nil nil [57701 57734])
            ("defalias" code nil nil [57766 57809])
            ("defalias" code nil nil [57810 57859])
            ("defalias" code nil nil [57861 57914])
            ("add-hook" function (:arguments ("hook" "function" "append" "local")) nil [57953 60082])
            ("remove-hook" function (:arguments ("hook" "function" "local")) nil [60084 61752])
            ("letrec" function (:arguments ("binders" "body")) nil [61754 62383])
            ("with-wrapper-hook" function (:arguments ("hook" "args" "body")) nil [62385 65438])
            ("add-to-list" function (:arguments ("list-var" "element" "append" "compare-fn")) nil [65440 68809])
            ("add-to-ordered-list" function (:arguments ("list-var" "element" "order")) nil [68812 70131])
            ("add-to-history" function (:arguments ("history-var" "newelt" "maxelt" "keep-all")) nil [70133 71345])
            ("delay-mode-hooks" variable nil nil [71367 71461])
            ("delayed-mode-hooks" variable nil nil [71462 71543])
            ("make-variable-buffer-local" code nil nil [71544 71592])
            ("put" code nil nil [71593 71635])
            ("change-major-mode-after-body-hook" variable nil nil [71637 71751])
            ("after-change-major-mode-hook" variable nil nil [71753 71855])
            ("run-mode-hooks" function (:arguments ("hooks")) nil [71857 72740])
            ("delay-mode-hooks" function (:arguments ("body")) nil [72742 73141])
            ("derived-mode-p" function (:arguments ("modes")) nil [73202 73515])
            ("minor-mode-list" variable (:default-value (quote (auto-save-mode auto-fill-mode abbrev-mode overwrite-mode view-mode hs-minor-mode))) nil [73706 73899])
            ("add-minor-mode" function (:arguments ("toggle" "name" "keymap" "after" "toggle-fun")) nil [73901 76586])
            ("autoloadp" function (:arguments ("object")) nil [76608 76710])
            ("symbol-file" function (:arguments ("symbol" "type")) nil [77194 78401])
            ("locate-library" function
               (:user-visible-flag t
                :arguments ("library" "nosuffix" "path" "interactive-call"))
                nil [78403 79809])
            ("start-process" function (:arguments ("name" "buffer" "program" "program-args")) nil [79834 81177])
            ("process-lines" function (:arguments ("program" "args")) nil [81179 81784])
            ("process-live-p" function (:arguments ("process")) nil [81786 82099])
            ("process-kill-without-query" function (:arguments ("process" "_flag")) nil [82119 82589])
            ("process-kill-buffer-query-function" function nil nil [82591 83010])
            ("add-hook" code nil nil [83012 83087])
            ("process-get" function (:arguments ("process" "propname")) nil [83118 83330])
            ("process-put" function (:arguments ("process" "propname" "value")) nil [83332 83571])
            ("read-key-empty-map" variable
               (:constant-flag t
                :default-value (make-sparse-keymap))
                nil [83611 83661])
            ("read-key-delay" variable (:default-value 0.01) nil [83663 83691])
            ("read-key" function (:arguments ("prompt")) nil [83740 86964])
            ("read-passwd-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-map) (define-key map "" (function delete-minibuffer-contents)) map)) nil [86966 87303])
            ("read-passwd" function (:arguments ("prompt" "confirm" "default")) nil [87305 90017])
            ("read-number" function (:arguments ("prompt" "default")) nil [90019 91089])
            ("read-char-choice" function (:arguments ("prompt" "chars" "inhibit-keyboard-quit")) nil [91091 92830])
            ("sit-for" function (:arguments ("seconds" "nodisp" "obsolete")) nil [92832 96191])
            ("declare-function" code nil nil [96231 96310])
            ("y-or-n-p" function (:arguments ("prompt")) nil [96312 99873])
            ("atomic-change-group" function (:arguments ("body")) nil [99904 101110])
            ("prepare-change-group" function (:arguments ("buffer")) nil [101112 102588])
            ("activate-change-group" function (:arguments ("handle")) nil [102590 102828])
            ("accept-change-group" function (:arguments ("handle")) nil [102830 103121])
            ("cancel-change-group" function (:arguments ("handle")) nil [103123 104294])
            ("define-obsolete-function-alias" code nil nil [104352 104434])
            ("momentary-string-display" function (:arguments ("string" "pos" "exit-char" "message")) nil [104436 105988])
            ("copy-overlay" function (:arguments ("o")) nil [106017 106591])
            ("remove-overlays" function (:arguments ("beg" "end" "name" "val")) nil [106593 107601])
            ("suspend-hook" variable nil nil [107623 107707])
            ("suspend-resume-hook" variable nil nil [107709 107807])
            ("temp-buffer-show-hook" variable nil nil [107809 108025])
            ("temp-buffer-setup-hook" variable nil nil [108027 108258])
            ("user-emacs-directory" variable
               (:constant-flag t
                :default-value (if (eq system-type (quote ms-dos)) "~/_emacs.d/" "~/.emacs.d/"))
                nil [108260 108635])
            ("buffer-narrowed-p" function nil nil [108668 108802])
            ("find-tag-default-bounds" function nil nil [108804 109058])
            ("find-tag-default" function nil nil [109060 109326])
            ("find-tag-default-as-regexp" function nil nil [109328 109763])
            ("find-tag-default-as-symbol-regexp" function nil nil [109765 110324])
            ("play-sound" function (:arguments ("sound")) nil [110326 111145])
            ("declare-function" code nil nil [111147 111203])
            ("shell-quote-argument" function (:arguments ("argument")) nil [111205 113539])
            ("string-or-null-p" function (:arguments ("object")) nil [113541 113678])
            ("booleanp" function (:arguments ("object")) nil [113680 113838])
            ("special-form-p" function (:arguments ("object")) nil [113840 114083])
            ("macrop" function (:arguments ("object")) nil [114085 114315])
            ("field-at-pos" function (:arguments ("pos")) nil [114317 114587])
            ("sha1" function (:arguments ("object" "start" "end" "binary")) nil [114589 114952])
            ("function-get" function (:arguments ("f" "prop" "autoload")) nil [114954 115764])
            ("yank-handled-properties" variable nil nil [115871 115903])
            ("yank-excluded-properties" variable nil nil [115904 115937])
            ("remove-yank-excluded-properties" function (:arguments ("start" "end")) nil [115939 116850])
            ("yank-undo-function" variable nil nil [116852 116879])
            ("insert-for-yank" function (:arguments ("string")) nil [116881 117362])
            ("insert-for-yank-1" function (:arguments ("string")) nil [117364 118396])
            ("insert-buffer-substring-no-properties" function (:arguments ("buffer" "start" "end")) nil [118398 118883])
            ("insert-buffer-substring-as-yank" function (:arguments ("buffer" "start" "end")) nil [118885 119571])
            ("yank-handle-font-lock-face-property" function (:arguments ("face" "start" "end")) nil [119573 119885])
            ("yank-handle-category-property" function (:arguments ("category" "start" "end")) nil [120024 120462])
            ("start-process-shell-command" function (:arguments ("name" "buffer" "args")) nil [120500 121484])
            ("start-file-process-shell-command" function (:arguments ("name" "buffer" "args")) nil [121486 121978])
            ("call-process-shell-command" function (:arguments ("command" "infile" "buffer" "display" "args")) nil [121980 123621])
            ("process-file-shell-command" function (:arguments ("command" "infile" "buffer" "display" "args")) nil [123623 124172])
            ("track-mouse" function (:arguments ("body")) nil [124227 124533])
            ("with-current-buffer" function (:arguments ("buffer-or-name" "body")) nil [124535 124923])
            ("internal--before-with-selected-window" function (:arguments ("window")) nil [124925 125445])
            ("internal--after-with-selected-window" function (:arguments ("state")) nil [125447 126007])
            ("with-selected-window" function (:arguments ("window" "body")) nil [126009 127147])
            ("with-selected-frame" function (:arguments ("frame" "body")) nil [127149 127890])
            ("save-window-excursion" function (:arguments ("body")) nil [127892 128711])
            ("internal-temp-output-buffer-show" function (:arguments ("buffer")) nil [128713 130108])
            ("with-output-to-temp-buffer" function (:arguments ("bufname" "body")) nil [130161 132614])
            ("with-temp-file" function (:arguments ("file" "body")) nil [132616 133311])
            ("with-temp-message" function (:arguments ("message" "body")) nil [133313 134240])
            ("with-temp-buffer" function (:arguments ("body")) nil [134242 134801])
            ("with-silent-modifications" function (:arguments ("body")) nil [134803 135793])
            ("with-output-to-string" function (:arguments ("body")) nil [135795 136240])
            ("with-local-quit" function (:arguments ("body")) nil [136242 136997])
            ("while-no-input" function (:arguments ("body")) nil [136999 137499])
            ("condition-case-unless-debug" function (:arguments ("var" "bodyform" "handlers")) nil [137501 138054])
            ("define-obsolete-function-alias" code nil nil [138056 138151])
            ("with-demoted-errors" function (:arguments ("format" "body")) nil [138153 139090])
            ("combine-after-change-calls" function (:arguments ("body")) nil [139092 139787])
            ("with-case-table" function (:arguments ("table" "body")) nil [139789 140310])
            ("with-file-modes" function (:arguments ("modes" "body")) nil [140312 140737])
            ("save-match-data-internal" variable nil nil [140771 140804])
            ("save-match-data" function (:arguments ("body")) nil [141062 141742])
            ("match-string" function (:arguments ("num" "string")) nil [141744 142389])
            ("match-string-no-properties" function (:arguments ("num" "string")) nil [142391 143115])
            ("match-substitute-replacement" function (:arguments ("replacement" "fixedcase" "literal" "string" "subexp")) nil [143118 143767])
            ("looking-back" function (:arguments ("regexp" "limit" "greedy")) nil [143770 145041])
            ("looking-at-p" function (:arguments ("regexp")) nil [145043 145221])
            ("string-match-p" function (:arguments ("regexp" "string" "start")) nil [145223 145443])
            ("subregexp-context-p" function (:arguments ("regexp" "pos" "start")) nil [145445 147355])
            ("split-string-default-separators" variable
               (:constant-flag t
                :default-value "[ 	
]+")
                nil [147377 147730])
            ("split-string" function (:arguments ("string" "separators" "omit-nulls" "trim")) nil [147992 151108])
            ("combine-and-quote-strings" function (:arguments ("strings" "separator")) nil [151110 151790])
            ("split-string-and-unquote" function (:arguments ("string" "separator")) nil [151792 152428])
            ("subst-char-in-string" function (:arguments ("fromchar" "tochar" "string" "inplace")) nil [152462 152866])
            ("replace-regexp-in-string" function (:arguments ("regexp" "rep" "string" "fixedcase" "literal" "subexp" "start")) nil [152868 155549])
            ("string-prefix-p" function (:arguments ("prefix" "string" "ignore-case")) nil [155552 155947])
            ("string-suffix-p" function (:arguments ("suffix" "string" "ignore-case")) nil [155949 156358])
            ("bidi-string-mark-left-to-right" function (:arguments ("str")) nil [156360 157143])
            ("string-greaterp" function (:arguments ("string1" "string2")) nil [157145 157380])
            ("load-history-regexp" function (:arguments ("file")) nil [157421 158057])
            ("load-history-filename-element" function (:arguments ("file-regexp")) nil [158059 158495])
            ("put" code nil nil [158497 158543])
            ("eval-after-load" function (:arguments ("file" "form")) nil [158544 162426])
            ("with-eval-after-load" function (:arguments ("file" "body")) nil [162428 162803])
            ("after-load-functions" variable nil nil [162805 162978])
            ("do-after-load-evaluation" function (:arguments ("abs-file")) nil [162980 164549])
            ("eval-next-after-load" function (:arguments ("file")) nil [164551 164851])
            ("display-delayed-warnings" function nil nil [164855 165122])
            ("collapse-delayed-warnings" function nil nil [165124 165803])
            ("delayed-warnings-hook" variable (:default-value (quote (collapse-delayed-warnings display-delayed-warnings))) nil [165933 166273])
            ("delay-warning" function (:arguments ("type" "message" "level" "buffer-name")) nil [166275 166530])
            ("add-to-invisibility-spec" function (:arguments ("element")) nil [166559 166902])
            ("remove-from-invisibility-spec" function (:arguments ("element")) nil [166904 167149])
            ("with-syntax-table" function (:arguments ("table" "body")) nil [167173 167809])
            ("make-syntax-table" function (:arguments ("oldtable")) nil [167811 168131])
            ("syntax-after" function (:arguments ("pos")) nil [168133 168506])
            ("syntax-class" function (:arguments ("syntax")) nil [168508 168860])
            ("word-move-empty-char-table" variable nil nil [168891 169061])
            ("forward-word-strictly" function (:arguments ("arg")) nil [169063 169836])
            ("backward-word-strictly" function (:arguments ("arg")) nil [169838 170455])
            ("forward-whitespace" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [170473 171056])
            ("forward-symbol" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [171071 171620])
            ("forward-same-syntax" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [171641 172123])
            ("text-clone--maintaining" variable nil nil [172145 172181])
            ("text-clone--maintain" function (:arguments ("ol1" "after" "beg" "end" "_len")) nil [172183 174249])
            ("text-clone-create" function (:arguments ("start" "end" "spreadp" "syntax")) nil [174251 176499])
            ("define-mail-user-agent" function (:arguments ("symbol" "composefunc" "sendfunc" "abortfunc" "hookvar")) nil [176607 178185])
            ("called-interactively-p-functions" variable nil nil [178188 178605])
            ("internal--funcall-interactively" variable
               (:constant-flag t
                :default-value (symbol-function (quote funcall-interactively)))
                nil [178607 178692])
            ("called-interactively-p" function (:arguments ("kind")) nil [178694 182875])
            ("interactive-p" function nil nil [182877 183887])
            ("internal-push-keymap" function (:arguments ("keymap" "symbol")) nil [183889 184234])
            ("internal-pop-keymap" function (:arguments ("keymap" "symbol")) nil [184236 184544])
            ("define-obsolete-function-alias" code nil nil [184546 184633])
            ("set-transient-map" function (:arguments ("map" "keep-pred" "on-exit")) nil [184635 187328])
            ("progress-reporter-update" function (:arguments ("reporter" "value")) nil [187911 188678])
            ("make-progress-reporter" function (:arguments ("message" "min-value" "max-value" "current-value" "min-change" "min-time")) nil [188680 190525])
            ("progress-reporter-force-update" function (:arguments ("reporter" "value" "new-message")) nil [190527 191026])
            ("progress-reporter--pulse-characters" variable (:default-value ["-" "\\" "|" "/"]) nil [191028 191145])
            ("progress-reporter-do-update" function (:arguments ("reporter" "value")) nil [191147 192823])
            ("progress-reporter-done" function (:arguments ("reporter")) nil [192825 192980])
            ("dotimes-with-progress-reporter" function (:arguments ("spec" "message" "body")) nil [192982 194086])
            ("version-separator" variable
               (:constant-flag t
                :default-value ".")
                nil [194123 194282])
            ("version-regexp-alist" variable
               (:constant-flag t
                :default-value (quote (("^[-._+ ]?snapshot$" . -4) ("^[-._+]$" . -4) ("^[-._+ ]?\\(cvs\\|git\\|bzr\\|svn\\|hg\\|darcs\\)$" . -4) ("^[-._+ ]?alpha$" . -3) ("^[-._+ ]?beta$" . -2) ("^[-._+ ]?\\(pre\\|rc\\)$" . -1))))
                nil [194285 195819])
            ("version-to-list" function (:arguments ("ver")) nil [195822 198605])
            ("version-list-<" function (:arguments ("l1" "l2")) nil [198607 199438])
            ("version-list-=" function (:arguments ("l1" "l2")) nil [199441 200240])
            ("version-list-<=" function (:arguments ("l1" "l2")) nil [200243 201028])
            ("version-list-not-zero" function (:arguments ("lst")) nil [201030 201340])
            ("version<" function (:arguments ("v1" "v2")) nil [201343 201847])
            ("version<=" function (:arguments ("v1" "v2")) nil [201849 202367])
            ("version=" function (:arguments ("v1" "v2")) nil [202369 202863])
            ("package--builtin-versions" variable (:default-value (purecopy (\` ((emacs \, (version-to-list emacs-version)))))) nil [202865 203242])
            ("package--description-file" function (:arguments ("dir")) nil [203244 203575])
            ("menu-bar-separator" variable
               (:constant-flag t
                :default-value (quote ("--")))
                nil [203589 203651])
            ("when" code nil nil [203813 203938])
            ("unmsys--file-name" function (:arguments ("file")) nil [204071 204558]))          
      :file "subr.el.gz"
      :pointmax 204583
      :fsize 60845
      :lastmodtime '(22768 58519 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("make-mode-line-mouse-map" function (:arguments ("mouse" "function")) nil [928 1263])
            ("mode-line-toggle-read-only" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [1266 1471])
            ("mode-line-toggle-modified" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [1473 1732])
            ("mode-line-widen" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [1734 1924])
            ("mode-line-input-method-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mode-line mouse-2] (lambda (e) (interactive "e") (with-selected-window (posn-window (event-start e)) (toggle-input-method) (force-mode-line-update)))) (define-key map [mode-line mouse-3] (lambda (e) (interactive "e") (with-selected-window (posn-window (event-start e)) (describe-current-input-method)))) (purecopy map))) nil [1926 2371])
            ("mode-line-coding-system-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mode-line mouse-1] (lambda (e) (interactive "e") (with-selected-window (posn-window (event-start e)) (when (and enable-multibyte-characters buffer-file-coding-system) (describe-coding-system buffer-file-coding-system))))) (define-key map [mode-line mouse-3] (lambda (e) (interactive "e") (with-selected-window (posn-window (event-start e)) (call-interactively (quote set-buffer-file-coding-system))))) (purecopy map))) nil [2373 2981])
            ("mode-line-change-eol" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [2983 3333])
            ("mode-line-eol-desc-cache" variable nil nil [3335 3372])
            ("mode-line-eol-desc" function nil nil [3374 4253])
            ("mode-line-default-help-echo" variable (:default-value "mouse-1: Select (drag to resize)
mouse-2: Make current window occupy the whole frame
mouse-3: Remove current window from display") nil [4281 4821])
            ("mode-line-front-space" variable (:default-value (quote (:eval (if (display-graphic-p) " " "-")))) nil [4823 5108])
            ("put" code nil nil [5109 5161])
            ("mode-line-mule-info-help-echo" function (:arguments ("window" "_object" "_point")) nil [5163 5615])
            ("mode-line-mule-info" variable (:default-value (\` ("" (current-input-method (:propertize ("" current-input-method-title) help-echo (concat (\, (purecopy "Current input method: ")) current-input-method (\, (purecopy "
mouse-2: Disable input method
mouse-3: Describe current input method"))) local-map (\, mode-line-input-method-map) mouse-face mode-line-highlight)) (\, (propertize "%z" (quote help-echo) (quote mode-line-mule-info-help-echo) (quote mouse-face) (quote mode-line-highlight) (quote local-map) mode-line-coding-system-map)) (:eval (mode-line-eol-desc))))) nil [5617 6539])
            ("put" code nil nil [6555 6605])
            ("make-variable-buffer-local" code nil nil [6606 6655])
            ("mode-line-client" variable (:default-value (\` ("" (:propertize ("" (:eval (if (frame-parameter nil (quote client)) "@" ""))) help-echo (\, (purecopy "emacsclient frame")))))) nil [6657 6868])
            ("put" code nil nil [6884 6931])
            ("mode-line-read-only-help-echo" function (:arguments ("window" "_object" "_point")) nil [6933 7208])
            ("mode-line-modified-help-echo" function (:arguments ("window" "_object" "_point")) nil [7210 7470])
            ("mode-line-modified" variable (:default-value (list (propertize "%1*" (quote help-echo) (quote mode-line-read-only-help-echo) (quote local-map) (purecopy (make-mode-line-mouse-map (quote mouse-1) (function mode-line-toggle-read-only))) (quote mouse-face) (quote mode-line-highlight)) (propertize "%1+" (quote help-echo) (quote mode-line-modified-help-echo) (quote local-map) (purecopy (make-mode-line-mouse-map (quote mouse-1) (function mode-line-toggle-modified))) (quote mouse-face) (quote mode-line-highlight)))) nil [7472 7990])
            ("put" code nil nil [8006 8055])
            ("make-variable-buffer-local" code nil nil [8056 8104])
            ("mode-line-remote" variable (:default-value (list (propertize "%1@" (quote mouse-face) (quote mode-line-highlight) (quote help-echo) (purecopy (lambda (window _object _point) (format "%s" (with-selected-window window (if (stringp default-directory) (concat (if (file-remote-p default-directory) "Current directory is remote: " "Current directory is local: ") default-directory) "Current directory is nil")))))))) nil [8106 8616])
            ("put" code nil nil [8632 8679])
            ("make-variable-buffer-local" code nil nil [8680 8726])
            ("mode-line-frame-control" function nil nil [8796 9033])
            ("mode-line-frame-identification" variable (:default-value (quote (:eval (mode-line-frame-control)))) nil [9143 9272])
            ("put" code nil nil [9288 9349])
            ("mode-line-process" variable nil nil [9351 9510])
            ("put" code nil nil [9526 9574])
            ("make-variable-buffer-local" code nil nil [9575 9622])
            ("bindings--define-key" function (:arguments ("map" "key" "item")) nil [9624 10375])
            ("mode-line-mode-menu" variable (:default-value (make-sparse-keymap "Minor Modes")) nil [10377 10486])
            ("mode-line-major-mode-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (bindings--define-key map [mode-line down-mouse-1] (\` (menu-item "Menu Bar" ignore :filter (\, (lambda (_) (mouse-menu-major-mode-map)))))) (define-key map [mode-line mouse-2] (quote describe-mode)) (define-key map [mode-line down-mouse-3] mode-line-mode-menu) map)) nil [10488 10879])
            ("mode-line-minor-mode-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mode-line down-mouse-1] (quote mouse-minor-mode-menu)) (define-key map [mode-line mouse-2] (quote mode-line-minor-mode-help)) (define-key map [mode-line down-mouse-3] mode-line-mode-menu) (define-key map [header-line down-mouse-3] mode-line-mode-menu) map)) nil [10881 11271])
            ("mode-line-modes" variable (:default-value (let ((recursive-edit-help-echo "Recursive edit, type C-M-c to get out")) (list (propertize "%[" (quote help-echo) recursive-edit-help-echo) "(" (\` (:propertize ("" mode-name) help-echo "Major mode
mouse-1: Display major mode menu
mouse-2: Show help for major mode
mouse-3: Toggle minor modes" mouse-face mode-line-highlight local-map (\, mode-line-major-mode-keymap))) (quote ("" mode-line-process)) (\` (:propertize ("" minor-mode-alist) mouse-face mode-line-highlight help-echo "Minor mode
mouse-1: Display minor mode menu
mouse-2: Show help for minor mode
mouse-3: Toggle minor modes" local-map (\, mode-line-minor-mode-keymap))) (propertize "%n" (quote help-echo) "mouse-2: Remove narrowing from buffer" (quote mouse-face) (quote mode-line-highlight) (quote local-map) (make-mode-line-mouse-map (quote mouse-2) (function mode-line-widen))) ")" (propertize "%]" (quote help-echo) recursive-edit-help-echo) " "))) nil [11273 12283])
            ("put" code nil nil [12284 12330])
            ("mode-line-column-line-number-mode-map" variable (:default-value (let ((map (make-sparse-keymap)) (menu-map (make-sparse-keymap "Toggle Line and Column Number Display"))) (bindings--define-key menu-map [line-number-mode] (quote (menu-item "Display Line Numbers" line-number-mode :help "Toggle displaying line numbers in the mode-line" :button (:toggle . line-number-mode)))) (bindings--define-key menu-map [column-number-mode] (quote (menu-item "Display Column Numbers" column-number-mode :help "Toggle displaying column numbers in the mode-line" :button (:toggle . column-number-mode)))) (define-key map [mode-line down-mouse-1] menu-map) map)) nil [12332 13041])
            ("mode-line-position" variable (:default-value (\` ((-3 (\, (propertize "%p" (quote local-map) mode-line-column-line-number-mode-map (quote mouse-face) (quote mode-line-highlight) (quote help-echo) "Size indication mode
mouse-1: Display Line and Column Mode Menu"))) (size-indication-mode (8 (\, (propertize " of %I" (quote local-map) mode-line-column-line-number-mode-map (quote mouse-face) (quote mode-line-highlight) (quote help-echo) "Size indication mode
mouse-1: Display Line and Column Mode Menu")))) (line-number-mode ((column-number-mode (10 (\, (propertize " (%l,%c)" (quote local-map) mode-line-column-line-number-mode-map (quote mouse-face) (quote mode-line-highlight) (quote help-echo) "Line number and Column number
mouse-1: Display Line and Column Mode Menu"))) (6 (\, (propertize " L%l" (quote local-map) mode-line-column-line-number-mode-map (quote mouse-face) (quote mode-line-highlight) (quote help-echo) "Line Number
mouse-1: Display Line and Column Mode Menu"))))) ((column-number-mode (5 (\, (propertize " C%c" (quote local-map) mode-line-column-line-number-mode-map (quote mouse-face) (quote mode-line-highlight) (quote help-echo) "Column number
mouse-1: Display Line and Column Mode Menu"))))))))) nil [13043 14479])
            ("put" code nil nil [14480 14529])
            ("mode-line-buffer-identification-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mode-line mouse-1] (quote mode-line-previous-buffer)) (define-key map [header-line down-mouse-1] (quote ignore)) (define-key map [header-line mouse-1] (quote mode-line-previous-buffer)) (define-key map [mode-line mouse-3] (quote mode-line-next-buffer)) (define-key map [header-line down-mouse-3] (quote ignore)) (define-key map [header-line mouse-3] (quote mode-line-next-buffer)) map)) nil [14531 15264])
            ("propertized-buffer-identification" function (:arguments ("fmt")) nil [15266 15750])
            ("mode-line-buffer-identification" variable (:default-value (propertized-buffer-identification "%12b")) nil [15752 16065])
            ("put" code nil nil [16081 16143])
            ("make-variable-buffer-local" code nil nil [16144 16205])
            ("mode-line-misc-info" variable (:default-value (quote ((which-func-mode ("" which-func-format " ")) (global-mode-string ("" global-mode-string " "))))) nil [16207 16489])
            ("put" code nil nil [16490 16540])
            ("mode-line-end-spaces" variable (:default-value (quote (:eval (unless (display-graphic-p) "-%-")))) nil [16542 16675])
            ("put" code nil nil [16676 16727])
            ("let" code nil nil [16792 17357])
            ("mode-line-unbury-buffer" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [17361 17540])
            ("mode-line-bury-buffer" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [17542 17739])
            ("mode-line-other-buffer" function (:user-visible-flag t) nil [17741 17908])
            ("mode-line-next-buffer" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [17910 18107])
            ("mode-line-previous-buffer" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [18109 18318])
            ("bound-and-true-p" function (:arguments ("var")) nil [18320 18450])
            ("bindings--define-key" code nil nil [18569 18790])
            ("bindings--define-key" code nil nil [18791 19039])
            ("bindings--define-key" code nil nil [19040 19305])
            ("bindings--define-key" code nil nil [19306 19535])
            ("bindings--define-key" code nil nil [19536 19775])
            ("bindings--define-key" code nil nil [19776 19950])
            ("bindings--define-key" code nil nil [19951 20156])
            ("bindings--define-key" code nil nil [20157 20451])
            ("bindings--define-key" code nil nil [20452 20692])
            ("bindings--define-key" code nil nil [20693 20893])
            ("bindings--define-key" code nil nil [20894 21084])
            ("mode-line-minor-mode-help" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [21086 21325])
            ("minor-mode-alist" variable nil nil [21327 21624])
            ("put" code nil nil [21640 21687])
            ("setq" code nil nil [21758 21965])
            ("setq" code nil nil [22250 23512])
            ("setq" code nil nil [23548 23690])
            ("setq" code nil nil [23804 24207])
            ("make-variable-buffer-local" code nil nil [24209 24255])
            ("mapc" code nil nil [24511 24877])
            ("base64" package nil nil [24935 24952])
            ("md5" package nil nil [24953 24967])
            ("sha1" package nil nil [24968 24983])
            ("overlay" package nil nil [24984 25032])
            ("text-properties" package nil nil [25033 25103])
            ("define-key" code nil nil [25105 25147])
            ("complete-symbol" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [25149 25528])
            ("garbage-collect" code nil nil [25646 25663])
            ("setq" code nil nil [25667 25704])
            ("make-variable-buffer-local" code nil nil [25706 25767])
            ("global-set-key" code nil nil [25785 25837])
            ("global-set-key" code nil nil [25838 25892])
            ("global-set-key" code nil nil [26088 26140])
            ("global-set-key" code nil nil [26141 26187])
            ("global-set-key" code nil nil [26188 26239])
            ("put" code nil nil [26325 26360])
            ("visual-order-cursor-movement" variable nil nil [26413 27117])
            ("right-char" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [27119 27875])
            ("left-char" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [27877 28632])
            ("right-word" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [28634 29248])
            ("left-word" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [29250 29863])
            ("narrow-map" variable (:default-value (make-sparse-keymap)) nil [29865 29940])
            ("define-key" code nil nil [29941 29978])
            ("define-key" code nil nil [29980 30025])
            ("define-key" code nil nil [30026 30060])
            ("define-key" code nil nil [30074 30128])
            ("define-key" code nil nil [30129 30174])
            ("substitute-key-definition" code nil nil [30283 30351])
            ("define-key" code nil nil [30353 30392])
            ("define-key" code nil nil [30393 30434])
            ("define-key" code nil nil [30435 30474])
            ("define-key" code nil nil [30475 30520])
            ("define-key" code nil nil [30521 30565])
            ("define-key" code nil nil [30566 30616])
            ("define-key" code nil nil [30617 30662])
            ("define-key" code nil nil [30663 30712])
            ("define-key" code nil nil [30713 30753])
            ("define-key" code nil nil [30754 30791])
            ("define-key" code nil nil [30792 30836])
            ("define-key" code nil nil [30837 30885])
            ("define-key" code nil nil [30886 30927])
            ("define-key" code nil nil [31001 31045])
            ("define-key" code nil nil [31112 31165])
            ("define-key" code nil nil [31199 31252])
            ("define-key" code nil nil [31253 31285])
            ("put" code nil nil [31286 31328])
            ("define-key" code nil nil [31399 31436])
            ("define-key" code nil nil [31437 31473])
            ("define-key" code nil nil [31652 31691])
            ("define-key" code nil nil [31692 31741])
            ("define-key" code nil nil [31742 31787])
            ("define-key" code nil nil [31789 31832])
            ("define-key" code nil nil [31833 31878])
            ("define-key" code nil nil [31879 31929])
            ("define-key" code nil nil [31930 31976])
            ("define-key" code nil nil [31977 32025])
            ("define-key" code nil nil [32026 32077])
            ("let" code nil nil [32079 32982])
            ("define-key" code nil nil [32984 33034])
            ("let" code nil nil [33035 33149])
            ("define-key" code nil nil [33150 33193])
            ("let" code nil nil [33220 33348])
            ("define-key" code nil nil [33349 33399])
            ("let" code nil nil [33431 33556])
            ("define-key" code nil nil [33557 33610])
            ("define-key" code nil nil [33666 33718])
            ("define-key" code nil nil [34001 34044])
            ("define-key" code nil nil [34046 34087])
            ("define-key" code nil nil [34088 34131])
            ("define-key" code nil nil [34132 34172])
            ("define-key" code nil nil [34173 34218])
            ("define-key" code nil nil [34219 34255])
            ("define-key" code nil nil [34256 34290])
            ("define-key" code nil nil [34341 34389])
            ("define-key" code nil nil [34447 34496])
            ("put" code nil nil [34497 34548])
            ("define-key" code nil nil [34550 34604])
            ("define-key" code nil nil [34605 34651])
            ("define-key" code nil nil [34652 34699])
            ("define-key" code nil nil [34700 34747])
            ("define-key" code nil nil [34749 34790])
            ("define-key" code nil nil [34791 34836])
            ("define-key" code nil nil [34837 34883])
            ("define-key" code nil nil [34884 34938])
            ("define-key" code nil nil [34939 34987])
            ("define-key" code nil nil [34989 35027])
            ("goto-map" variable (:default-value (make-sparse-keymap)) nil [35029 35103])
            ("define-key" code nil nil [35104 35137])
            ("define-key" code nil nil [35139 35178])
            ("define-key" code nil nil [35179 35218])
            ("define-key" code nil nil [35219 35258])
            ("define-key" code nil nil [35259 35299])
            ("define-key" code nil nil [35300 35340])
            ("define-key" code nil nil [35341 35385])
            ("define-key" code nil nil [35386 35430])
            ("define-key" code nil nil [35431 35475])
            ("search-map" variable (:default-value (make-sparse-keymap)) nil [35477 35557])
            ("define-key" code nil nil [35558 35593])
            ("define-key" code nil nil [35595 35632])
            ("define-key" code nil nil [35633 35681])
            ("define-key" code nil nil [35682 35730])
            ("define-key" code nil nil [35731 35779])
            ("define-key" code nil nil [35780 35843])
            ("define-key" code nil nil [35844 35901])
            ("define-key" code nil nil [35902 35952])
            ("define-key" code nil nil [35953 36006])
            ("define-key" code nil nil [36007 36073])
            ("define-key" code nil nil [36183 36239])
            ("define-key" code nil nil [36240 36286])
            ("define-key" code nil nil [36483 36540])
            ("define-key" code nil nil [36541 36596])
            ("define-key" code nil nil [36597 36651])
            ("define-key" code nil nil [36652 36719])
            ("define-key" code nil nil [36720 36785])
            ("define-key" code nil nil [36786 36828])
            ("define-key" code nil nil [36829 36873])
            ("define-key" code nil nil [36874 36918])
            ("define-key" code nil nil [36919 36961])
            ("define-key" code nil nil [36962 37015])
            ("define-key" code nil nil [37016 37066])
            ("define-key" code nil nil [37067 37118])
            ("define-key" code nil nil [37119 37171])
            ("define-key" code nil nil [37172 37219])
            ("put" code nil nil [37220 37250])
            ("define-key" code nil nil [37251 37297])
            ("define-key" code nil nil [37298 37352])
            ("define-key" code nil nil [37353 37405])
            ("define-key" code nil nil [37406 37465])
            ("define-key" code nil nil [37466 37524])
            ("define-key" code nil nil [37525 37583])
            ("define-key" code nil nil [37584 37632])
            ("define-key" code nil nil [37633 37680])
            ("define-key" code nil nil [37681 37741])
            ("define-key" code nil nil [37742 37800])
            ("define-key" code nil nil [37801 37854])
            ("define-key" code nil nil [37855 37922])
            ("define-key" code nil nil [37923 37989])
            ("define-key" code nil nil [38101 38160])
            ("define-key" code nil nil [38161 38210])
            ("define-key" code nil nil [38211 38261])
            ("define-key" code nil nil [38262 38302])
            ("define-key" code nil nil [38401 38453])
            ("define-key" code nil nil [38454 38508])
            ("define-key" code nil nil [38509 38553])
            ("define-key" code nil nil [38554 38591])
            ("define-key" code nil nil [38592 38647])
            ("define-key" code nil nil [38648 38704])
            ("define-key" code nil nil [38720 38762])
            ("define-key" code nil nil [38994 39041])
            ("define-key" code nil nil [39042 39089])
            ("define-key" code nil nil [39090 39147])
            ("let" code nil nil [43108 43954])
            ("define-key" code nil nil [43956 44005])
            ("define-key" code nil nil [44006 44052])
            ("define-key" code nil nil [44053 44102])
            ("define-key" code nil nil [45269 45315])
            ("define-key" code nil nil [45437 45484])
            ("define-key" code nil nil [45486 45534])
            ("define-key" code nil nil [45536 45583])
            ("define-key" code nil nil [45584 45625])
            ("define-key" code nil nil [45626 45670])
            ("define-key" code nil nil [45671 45717])
            ("define-key" code nil nil [45719 45757])
            ("define-key" code nil nil [45758 45807])
            ("define-key" code nil nil [45808 45860])
            ("define-key" code nil nil [45861 45907])
            ("define-key" code nil nil [45908 45953])
            ("define-key" code nil nil [45954 45997])
            ("define-key" code nil nil [45998 46047])
            ("define-key" code nil nil [46049 46084])
            ("define-key" code nil nil [46085 46123])
            ("define-key" code nil nil [46124 46163])
            ("define-key" code nil nil [46164 46199])
            ("define-key" code nil nil [46200 46247])
            ("define-key" code nil nil [46249 46294])
            ("define-key" code nil nil [46295 46334])
            ("define-key" code nil nil [46335 46380])
            ("define-key" code nil nil [46381 46431])
            ("defalias" code nil nil [46433 46494])
            ("mode-specific-map" variable (:default-value (symbol-function (quote mode-specific-command-prefix))) nil [46495 46610])
            ("define-key" code nil nil [46611 46671])
            ("global-set-key" code nil nil [46673 46712])
            ("define-key" code nil nil [46713 46755])
            ("global-set-key" code nil nil [46756 46794])
            ("define-key" code nil nil [46795 46837])
            ("global-set-key" code nil nil [46914 46953])
            ("global-set-key" code nil nil [46954 46992])
            ("global-set-key" code nil nil [47052 47090])
            ("global-set-key" code nil nil [47091 47141])
            ("global-set-key" code nil nil [47202 47242])
            ("global-set-key" code nil nil [47244 47289])
            ("define-key" code nil nil [47290 47335])
            ("global-set-key" code nil nil [47336 47380])
            ("define-key" code nil nil [47381 47425])
            ("global-set-key" code nil nil [47426 47474])
            ("define-key" code nil nil [47475 47523])
            ("global-set-key" code nil nil [47524 47565])
            ("define-key" code nil nil [47566 47607])
            ("global-set-key" code nil nil [47608 47658])
            ("define-key" code nil nil [47659 47709])
            ("global-set-key" code nil nil [47710 47754])
            ("define-key" code nil nil [47755 47799])
            ("define-key" code nil nil [47801 47842])
            ("define-key" code nil nil [47843 47885])
            ("define-key" code nil nil [47886 47931])
            ("define-key" code nil nil [47932 47970])
            ("define-key" code nil nil [47971 48011])
            ("define-key" code nil nil [48012 48050])
            ("define-key" code nil nil [48051 48089])
            ("define-key" code nil nil [48307 48358])
            ("define-key" code nil nil [48359 48413])
            ("define-key" code nil nil [48414 48455])
            ("define-key" code nil nil [48456 48498])
            ("define-key" code nil nil [48499 48546])
            ("define-key" code nil nil [48547 48588])
            ("define-key" code nil nil [48589 48628])
            ("define-key" code nil nil [48629 48673])
            ("define-key" code nil nil [48674 48718])
            ("define-key" code nil nil [48719 48773])
            ("define-key" code nil nil [48775 48820])
            ("define-key" code nil nil [48822 48862])
            ("define-key" code nil nil [48863 48918])
            ("define-key" code nil nil [48919 48973])
            ("ctl-x-r-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "c" (quote clear-rectangle)) (define-key map "k" (quote kill-rectangle)) (define-key map "d" (quote delete-rectangle)) (define-key map "y" (quote yank-rectangle)) (define-key map "o" (quote open-rectangle)) (define-key map "t" (quote string-rectangle)) (define-key map "N" (quote rectangle-number-lines)) (define-key map "\367" (quote copy-rectangle-as-kill)) (define-key map " " (quote point-to-register)) (define-key map [67108896] (quote point-to-register)) (define-key map " " (quote point-to-register)) (define-key map "j" (quote jump-to-register)) (define-key map "s" (quote copy-to-register)) (define-key map "x" (quote copy-to-register)) (define-key map "i" (quote insert-register)) (define-key map "g" (quote insert-register)) (define-key map "r" (quote copy-rectangle-to-register)) (define-key map "n" (quote number-to-register)) (define-key map "+" (quote increment-register)) (define-key map "w" (quote window-configuration-to-register)) (define-key map "f" (quote frameset-to-register)) map)) nil [48977 50033])
            ("define-key" code nil nil [50034 50072])
            ("define-key" code nil nil [50074 50114])
            ("define-key" code nil nil [50115 50158])
            ("define-key" code nil nil [50161 50205])
            ("define-key" code nil nil [50206 50249])
            ("define-key" code nil nil [50250 50290])
            ("define-key" code nil nil [50291 50334])
            ("define-key" code nil nil [50335 50377])
            ("define-key" code nil nil [50378 50417])
            ("define-key" code nil nil [50418 50471])
            ("define-key" code nil nil [50473 50514])
            ("define-key" code nil nil [50515 50555])
            ("define-key" code nil nil [50556 50596])
            ("define-key" code nil nil [50597 50641])
            ("define-key" code nil nil [50642 50685])
            ("abbrev-map" variable (:default-value (make-sparse-keymap)) nil [50734 50806])
            ("define-key" code nil nil [50807 50844])
            ("define-key" code nil nil [50846 50890])
            ("define-key" code nil nil [50891 50938])
            ("define-key" code nil nil [50939 50985])
            ("define-key" code nil nil [50986 51030])
            ("define-key" code nil nil [51031 51086])
            ("define-key" code nil nil [51087 51140])
            ("define-key" code nil nil [51202 51256])
            ("define-key" code nil nil [51257 51299])
            ("define-key" code nil nil [51300 51342])
            ("define-key" code nil nil [51557 51601])
            ("define-key" code nil nil [51602 51643])
            ("define-key" code nil nil [51644 51687])
            ("define-key" code nil nil [51689 51723])
            ("define-key" code nil nil [51725 51771])
            ("define-key" code nil nil [51773 51836])
            ("define-key" code nil nil [51837 51901])
            ("define-key" code nil nil [51922 51970])
            ("define-key" code nil nil [51971 52019]))          
      :file "bindings.el.gz"
      :pointmax 52151
      :fsize 13080
      :lastmodtime '(22768 58519 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("repeat-too-dangerous" variable (:default-value (quote (kill-this-buffer))) nil [4414 4569])
            ("repeat-message-function" variable nil nil [5104 5517])
            ("repeat-on-final-keystroke" variable (:default-value t) nil [5519 6287])
            ("repeat-num-input-keys-at-repeat" variable (:default-value -1) nil [8353 8466])
            ("repeat-is-really-this-command" function nil nil [8642 9299])
            ("repeat-previous-repeated-command" variable nil nil [9555 9635])
            ("repeat" function
               (:user-visible-flag t
                :arguments ("repeat-arg"))
                nil [9652 14870])
            ("repeat-message" function (:arguments ("format" "args")) nil [14872 15149])
            ("repeat" package nil nil [16897 16914]))          
      :file "repeat.el.gz"
      :pointmax 16940
      :fsize 6219
      :lastmodtime '(22768 58519 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("font-lock-keywords" variable nil nil [1117 1144])
            ("backup" customgroup (:user-visible-flag t) nil [1146 1217])
            ("find-file" customgroup (:user-visible-flag t) nil [1219 1278])
            ("delete-auto-save-files" variable (:default-value t) nil [1281 1531])
            ("directory-abbrev-alist" variable nil nil [1533 2545])
            ("make-backup-files" variable (:default-value t) nil [2547 3470])
            ("backup-inhibited" variable nil nil [3571 3763])
            ("put" code nil nil [3764 3806])
            ("backup-by-copying" variable nil nil [3808 3986])
            ("backup-by-copying-when-linked" variable nil nil [3988 4281])
            ("backup-by-copying-when-mismatch" variable (:default-value t) nil [4283 4771])
            ("put" code nil nil [4772 4829])
            ("backup-by-copying-when-privileged-mismatch" variable (:default-value 200) nil [4831 5454])
            ("backup-enable-predicate" variable (:default-value (quote normal-backup-enable-predicate)) nil [5456 5675])
            ("buffer-offer-save" variable nil nil [5677 5896])
            ("make-variable-buffer-local" code nil nil [5897 5944])
            ("put" code nil nil [5945 5988])
            ("find-file-existing-other-name" variable (:default-value t) nil [5990 6283])
            ("find-file-visit-truename" variable nil nil [6285 6657])
            ("put" code nil nil [6658 6720])
            ("revert-without-query" variable nil nil [6722 7087])
            ("buffer-file-number" variable nil nil [7089 7358])
            ("make-variable-buffer-local" code nil nil [7359 7407])
            ("put" code nil nil [7408 7452])
            ("buffer-file-numbers-unique" variable (:default-value (not (memq system-type (quote (windows-nt))))) nil [7454 7599])
            ("buffer-file-read-only" variable nil nil [7601 7691])
            ("make-variable-buffer-local" code nil nil [7692 7743])
            ("small-temporary-file-directory" variable (:default-value (if (eq system-type (quote ms-dos)) (getenv "TMPDIR"))) nil [7745 8189])
            ("null-device" variable (:default-value (purecopy "/dev/null")) nil [8257 8326])
            ("declare-function" code nil nil [8328 8378])
            ("declare-function" code nil nil [8379 8428])
            ("declare-function" code nil nil [8429 8515])
            ("declare-function" code nil nil [8516 8583])
            ("declare-function" code nil nil [8584 8656])
            ("declare-function" code nil nil [8657 8713])
            ("declare-function" code nil nil [8714 8773])
            ("file-name-invalid-regexp" variable (:default-value (cond ((and (eq system-type (quote ms-dos)) (not (msdos-long-file-names))) (purecopy (concat "^\\([^A-Z[-`a-z]\\|..+\\)?:\\|" "[+, ;=|<>\"?*]\\|\\[\\|\\]\\|" "[ -]\\|" "\\(/\\.\\.?[^/]\\)\\|" "\\(/[^/.]+\\.[^/.]*\\.\\)"))) ((memq system-type (quote (ms-dos windows-nt cygwin))) (purecopy (concat "^\\([^A-Z[-`a-z]\\|..+\\)?:\\|" "[|<>\"?* -]"))) (t (purecopy "[ ]")))) nil [8775 9448])
            ("file-precious-flag" variable nil nil [9450 10290])
            ("break-hardlink-on-save" variable nil nil [10292 11047])
            ("version-control" variable nil nil [11049 11419])
            ("put" code nil nil [11420 11516])
            ("dired-kept-versions" variable (:default-value 2) nil [11518 11658])
            ("delete-old-versions" variable nil nil [11660 11926])
            ("kept-old-versions" variable (:default-value 2) nil [11928 12067])
            ("put" code nil nil [12068 12123])
            ("kept-new-versions" variable (:default-value 2) nil [12125 12302])
            ("put" code nil nil [12303 12358])
            ("require-final-newline" variable nil nil [12360 13131])
            ("mode-require-final-newline" variable (:default-value t) nil [13133 14268])
            ("auto-save-default" variable (:default-value t) nil [14270 14412])
            ("auto-save-file-name-transforms" variable (:default-value (\` (("\\`/[^/]*:\\([^/]*/\\)*\\([^/]*\\)\\'" (\, (concat temporary-file-directory "\\2")) t)))) nil [14414 15842])
            ("save-abbrevs" variable (:default-value t) nil [15844 16055])
            ("find-file-run-dired" variable (:default-value t) nil [16057 16254])
            ("find-directory-functions" variable (:default-value (quote (cvs-dired-noselect dired-noselect))) nil [16256 16584])
            ("file-name-at-point-functions" variable (:default-value (quote (ffap-guess-file-name-at-point))) nil [16645 16973])
            ("define-obsolete-variable-alias" code nil nil [17081 17182])
            ("find-file-not-found-functions" variable nil nil [17183 17484])
            ("define-obsolete-variable-alias" code nil nil [17582 17654])
            ("find-file-hook" variable nil nil [17655 17932])
            ("define-obsolete-variable-alias" code nil nil [17934 18013])
            ("write-file-functions" variable nil nil [18014 18818])
            ("put" code nil nil [18819 18865])
            ("local-write-file-hooks" variable nil nil [18867 18902])
            ("make-variable-buffer-local" code nil nil [18903 18955])
            ("put" code nil nil [18956 19004])
            ("make-obsolete-variable" code nil nil [19005 19082])
            ("define-obsolete-variable-alias" code nil nil [19084 19175])
            ("write-contents-functions" variable nil nil [19176 19960])
            ("make-variable-buffer-local" code nil nil [19961 20015])
            ("enable-local-variables" variable (:default-value t) nil [20017 21269])
            ("enable-dir-local-variables" variable (:default-value t) nil [21271 21492])
            ("local-enable-local-variables" variable (:default-value t) nil [22855 23240])
            ("enable-local-eval" variable (:default-value (quote maybe)) nil [23242 23633])
            ("view-read-only" variable nil nil [23635 23985])
            ("file-name-history" variable nil nil [23987 24170])
            ("save-silently" variable nil nil [24172 24327])
            ("put" code nil nil [24331 24385])
            ("ange-ftp-completion-hook-function" function (:arguments ("op" "args")) nil [24386 24992])
            ("declare-function" code nil nil [24994 25066])
            ("declare-function" code nil nil [25067 25139])
            ("convert-standard-filename" function (:arguments ("filename")) nil [25141 26394])
            ("read-directory-name" function (:arguments ("prompt" "dir" "default-dirname" "mustmatch" "initial")) nil [26396 27517])
            ("pwd" function
               (:user-visible-flag t
                :arguments ("insert"))
                nil [27521 27789])
            ("cd-path" variable nil nil [27791 27921])
            ("parse-colon-path" function (:arguments ("search-path")) nil [27923 28542])
            ("cd-absolute" function (:arguments ("dir")) nil [28544 29449])
            ("cd" function
               (:user-visible-flag t
                :arguments ("dir"))
                nil [29451 31278])
            ("directory-name-p" function (:arguments ("name")) nil [31280 31597])
            ("directory-files-recursively" function (:arguments ("dir" "regexp" "include-directories")) nil [31599 32994])
            ("module-file-suffix" variable nil nil [32996 33023])
            ("load-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [33025 33493])
            ("locate-file" function (:arguments ("filename" "path" "suffixes" "predicate")) nil [33495 34872])
            ("locate-file-completion-table" function (:arguments ("dirs" "suffixes" "string" "pred" "action")) nil [34874 37836])
            ("locate-file-completion" function (:arguments ("string" "path-and-suffixes" "action")) nil [37838 38246])
            ("locate-dominating-stop-dir-regexp" variable (:default-value (purecopy "\\`\\(?:[\\/][\\/][^\\/]+[\\/]\\|/\\(?:net\\|afs\\|\\.\\.\\.\\)/\\)\\'")) nil [38248 38852])
            ("locate-dominating-file" function (:arguments ("file" "name")) nil [40405 42613])
            ("user-emacs-directory-warning" variable (:default-value t) nil [42615 42817])
            ("locate-user-emacs-file" function (:arguments ("new-name" "old-name")) nil [42819 44505])
            ("executable-find" function (:arguments ("command")) nil [44508 44816])
            ("load-library" function
               (:user-visible-flag t
                :arguments ("library"))
                nil [44818 45513])
            ("file-remote-p" function (:arguments ("file" "identification" "connected")) nil [45515 47267])
            ("remote-shell-program" variable (:default-value (purecopy (let ((list (quote ("ssh" "remsh" "rcmd" "rsh")))) (while (and list (not (executable-find (car list))) (setq list (cdr list)))) (or (car list) "ssh")))) nil [47566 48285])
            ("remote-file-name-inhibit-cache" variable (:default-value 10) nil [48287 49506])
            ("file-local-copy" function (:arguments ("file")) nil [49508 49897])
            ("file-truename" function (:arguments ("filename" "counter" "prev-dirs")) nil [49899 54795])
            ("file-chase-links" function (:arguments ("filename" "limit")) nil [54797 56200])
            ("file-size-human-readable" function (:arguments ("file-size" "flavor")) nil [56332 57449])
            ("make-temp-file" function (:arguments ("prefix" "dir-flag" "suffix")) nil [57451 58753])
            ("recode-file-name" function
               (:user-visible-flag t
                :arguments ("file" "coding" "new-coding" "ok-if-already-exists"))
                nil [58755 60992])
            ("confirm-nonexistent-file-or-buffer" variable (:default-value (quote after-completion)) nil [60995 61608])
            ("confirm-nonexistent-file-or-buffer" function nil nil [61610 62051])
            ("minibuffer-with-setup-hook" function (:arguments ("fun" "body")) nil [62053 63296])
            ("find-file-read-args" function (:arguments ("prompt" "mustmatch")) nil [63298 63412])
            ("find-file" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [63414 64659])
            ("find-file-other-window" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [64661 65592])
            ("find-file-other-frame" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [65594 66519])
            ("find-file-existing" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [66521 66956])
            ("find-file--read-only" function (:arguments ("fun" "filename" "wildcards")) nil [66958 67385])
            ("find-file-read-only" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [67387 67768])
            ("find-file-read-only-other-window" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [67770 68221])
            ("find-file-read-only-other-frame" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [68223 68669])
            ("find-alternate-file-other-window" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [68671 69620])
            ("kill-buffer-hook" variable nil nil [69681 69921])
            ("find-alternate-file" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [69923 72976])
            ("create-file-buffer" function (:arguments ("filename")) nil [73101 73781])
            ("generate-new-buffer" function (:arguments ("name")) nil [73783 73988])
            ("automount-dir-prefix" variable (:default-value (purecopy "^/tmp_mnt/")) nil [73990 74142])
            ("make-obsolete-variable" code nil nil [74143 74220])
            ("abbreviated-home-dir" variable nil nil [74222 74396])
            ("abbreviate-file-name" function (:arguments ("filename")) nil [74398 77697])
            ("find-buffer-visiting" function (:arguments ("filename" "predicate")) nil [77699 79626])
            ("find-file-wildcards" variable (:default-value t) nil [79629 79876])
            ("find-file-suppress-same-file-warnings" variable nil nil [79878 80204])
            ("large-file-warning-threshold" variable (:default-value 10000000) nil [80206 80485])
            ("out-of-memory-warning-percentage" variable nil nil [80487 80870])
            ("abort-if-file-too-large" function (:arguments ("size" "op-type" "filename")) nil [80872 81364])
            ("warn-maybe-out-of-memory" function (:arguments ("size")) nil [81366 82204])
            ("files--message" function (:arguments ("format" "args")) nil [82206 82473])
            ("find-file-noselect" function (:arguments ("filename" "nowarn" "rawfile" "wildcards")) nil [82475 89545])
            ("find-file-noselect-1" function (:arguments ("buf" "filename" "nowarn" "rawfile" "truename" "number")) nil [89547 92041])
            ("insert-file-contents-literally" function (:arguments ("filename" "visit" "beg" "end" "replace")) nil [92044 93065])
            ("insert-file-1" function (:arguments ("filename" "insert-func")) nil [93067 93759])
            ("insert-file-literally" function (:arguments ("filename")) nil [93761 94244])
            ("find-file-literally" variable nil nil [94246 94453])
            ("put" code nil nil [94454 94499])
            ("find-file-literally" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [94501 95595])
            ("after-find-file" function (:arguments ("error" "warn" "noauto" "_after-find-file-from-revert-buffer" "nomodes")) nil [95598 98938])
            ("define-obsolete-function-alias" code nil nil [98940 99015])
            ("normal-mode" function
               (:user-visible-flag t
                :arguments ("find-file"))
                nil [99017 100638])
            ("auto-mode-case-fold" variable (:default-value t) nil [100640 101078])
            ("auto-mode-alist" variable (:default-value (mapcar (lambda (elt) (cons (purecopy (car elt)) (cdr elt))) (\` (("\\.[sx]?html?\\(\\.[a-zA-Z_]+\\)?\\'" . html-mode) ("\\.svgz?\\'" . image-mode) ("\\.svgz?\\'" . xml-mode) ("\\.x[bp]m\\'" . image-mode) ("\\.x[bp]m\\'" . c-mode) ("\\.p[bpgn]m\\'" . image-mode) ("\\.tiff?\\'" . image-mode) ("\\.gif\\'" . image-mode) ("\\.png\\'" . image-mode) ("\\.jpe?g\\'" . image-mode) ("\\.te?xt\\'" . text-mode) ("\\.[tT]e[xX]\\'" . tex-mode) ("\\.ins\\'" . tex-mode) ("\\.ltx\\'" . latex-mode) ("\\.dtx\\'" . doctex-mode) ("\\.org\\'" . org-mode) ("\\.el\\'" . emacs-lisp-mode) ("Project\\.ede\\'" . emacs-lisp-mode) ("\\.\\(scm\\|stk\\|ss\\|sch\\)\\'" . scheme-mode) ("\\.l\\'" . lisp-mode) ("\\.li?sp\\'" . lisp-mode) ("\\.[fF]\\'" . fortran-mode) ("\\.for\\'" . fortran-mode) ("\\.p\\'" . pascal-mode) ("\\.pas\\'" . pascal-mode) ("\\.\\(dpr\\|DPR\\)\\'" . delphi-mode) ("\\.ad[abs]\\'" . ada-mode) ("\\.ad[bs].dg\\'" . ada-mode) ("\\.\\([pP]\\([Llm]\\|erl\\|od\\)\\|al\\)\\'" . perl-mode) ("Imakefile\\'" . makefile-imake-mode) ("Makeppfile\\(?:\\.mk\\)?\\'" . makefile-makepp-mode) ("\\.makepp\\'" . makefile-makepp-mode) (\,@ (if (memq system-type (quote (berkeley-unix darwin))) (quote (("\\.mk\\'" . makefile-bsdmake-mode) ("\\.make\\'" . makefile-bsdmake-mode) ("GNUmakefile\\'" . makefile-gmake-mode) ("[Mm]akefile\\'" . makefile-bsdmake-mode))) (quote (("\\.mk\\'" . makefile-gmake-mode) ("\\.make\\'" . makefile-gmake-mode) ("[Mm]akefile\\'" . makefile-gmake-mode))))) ("\\.am\\'" . makefile-automake-mode) ("\\.texinfo\\'" . texinfo-mode) ("\\.te?xi\\'" . texinfo-mode) ("\\.[sS]\\'" . asm-mode) ("\\.asm\\'" . asm-mode) ("\\.css\\'" . css-mode) ("\\.mixal\\'" . mixal-mode) ("\\.gcov\\'" . compilation-mode) ("/\\.[a-z0-9-]*gdbinit" . gdb-script-mode) ("-gdb\\.gdb" . gdb-script-mode) ("[cC]hange\\.?[lL]og?\\'" . change-log-mode) ("[cC]hange[lL]og[-.][0-9]+\\'" . change-log-mode) ("\\$CHANGE_LOG\\$\\.TXT" . change-log-mode) ("\\.scm\\.[0-9]*\\'" . scheme-mode) ("\\.[ckz]?sh\\'\\|\\.shar\\'\\|/\\.z?profile\\'" . sh-mode) ("\\.bash\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\(bash_\\(profile\\|history\\|log\\(in\\|out\\)\\)\\|z?log\\(in\\|out\\)\\)\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\(shrc\\|[kz]shrc\\|bashrc\\|t?cshrc\\|esrc\\)\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\([kz]shenv\\|xinitrc\\|startxrc\\|xsession\\)\\'" . sh-mode) ("\\.m?spec\\'" . sh-mode) ("\\.m[mes]\\'" . nroff-mode) ("\\.man\\'" . nroff-mode) ("\\.sty\\'" . latex-mode) ("\\.cl[so]\\'" . latex-mode) ("\\.bbl\\'" . latex-mode) ("\\.bib\\'" . bibtex-mode) ("\\.bst\\'" . bibtex-style-mode) ("\\.sql\\'" . sql-mode) ("\\.m[4c]\\'" . m4-mode) ("\\.mf\\'" . metafont-mode) ("\\.mp\\'" . metapost-mode) ("\\.vhdl?\\'" . vhdl-mode) ("\\.article\\'" . text-mode) ("\\.letter\\'" . text-mode) ("\\.i?tcl\\'" . tcl-mode) ("\\.exp\\'" . tcl-mode) ("\\.itk\\'" . tcl-mode) ("\\.icn\\'" . icon-mode) ("\\.sim\\'" . simula-mode) ("\\.mss\\'" . scribe-mode) ("\\.f9[05]\\'" . f90-mode) ("\\.f0[38]\\'" . f90-mode) ("\\.indent\\.pro\\'" . fundamental-mode) ("\\.\\(pro\\|PRO\\)\\'" . idlwave-mode) ("\\.srt\\'" . srecode-template-mode) ("\\.prolog\\'" . prolog-mode) ("\\.tar\\'" . tar-mode) ("\\.\\(arc\\|zip\\|lzh\\|lha\\|zoo\\|[jew]ar\\|xpi\\|rar\\|7z\\|ARC\\|ZIP\\|LZH\\|LHA\\|ZOO\\|[JEW]AR\\|XPI\\|RAR\\|7Z\\)\\'" . archive-mode) ("\\.oxt\\'" . archive-mode) ("\\.\\(deb\\|[oi]pk\\)\\'" . archive-mode) ("\\`/tmp/Re" . text-mode) ("/Message[0-9]*\\'" . text-mode) ("\\`/tmp/fol/" . text-mode) ("\\.oak\\'" . scheme-mode) ("\\.sgml?\\'" . sgml-mode) ("\\.x[ms]l\\'" . xml-mode) ("\\.dbk\\'" . xml-mode) ("\\.dtd\\'" . sgml-mode) ("\\.ds\\(ss\\)?l\\'" . dsssl-mode) ("\\.jsm?\\'" . javascript-mode) ("\\.json\\'" . javascript-mode) ("\\.[ds]?vh?\\'" . verilog-mode) ("\\.by\\'" . bovine-grammar-mode) ("\\.wy\\'" . wisent-grammar-mode) ("[:/\\]\\..*\\(emacs\\|gnus\\|viper\\)\\'" . emacs-lisp-mode) ("\\`\\..*emacs\\'" . emacs-lisp-mode) ("[:/]_emacs\\'" . emacs-lisp-mode) ("/crontab\\.X*[0-9]+\\'" . shell-script-mode) ("\\.ml\\'" . lisp-mode) ("\\.ld[si]?\\'" . ld-script-mode) ("ld\\.?script\\'" . ld-script-mode) ("\\.xs\\'" . c-mode) ("\\.x[abdsru]?[cnw]?\\'" . ld-script-mode) ("\\.zone\\'" . dns-mode) ("\\.soa\\'" . dns-mode) ("\\.asd\\'" . lisp-mode) ("\\.\\(asn\\|mib\\|smi\\)\\'" . snmp-mode) ("\\.\\(as\\|mi\\|sm\\)2\\'" . snmpv2-mode) ("\\.\\(diffs?\\|patch\\|rej\\)\\'" . diff-mode) ("\\.\\(dif\\|pat\\)\\'" . diff-mode) ("\\.[eE]?[pP][sS]\\'" . ps-mode) ("\\.\\(?:PDF\\|DVI\\|OD[FGPST]\\|DOCX?\\|XLSX?\\|PPTX?\\|pdf\\|djvu\\|dvi\\|od[fgpst]\\|docx?\\|xlsx?\\|pptx?\\)\\'" . doc-view-mode-maybe) ("configure\\.\\(ac\\|in\\)\\'" . autoconf-mode) ("\\.s\\(v\\|iv\\|ieve\\)\\'" . sieve-mode) ("BROWSE\\'" . ebrowse-tree-mode) ("\\.ebrowse\\'" . ebrowse-tree-mode) ("#\\*mail\\*" . mail-mode) ("\\.g\\'" . antlr-mode) ("\\.mod\\'" . m2-mode) ("\\.ses\\'" . ses-mode) ("\\.docbook\\'" . sgml-mode) ("\\.com\\'" . dcl-mode) ("/config\\.\\(?:bat\\|log\\)\\'" . fundamental-mode) ("\\.\\(?:[iI][nN][iI]\\|[lL][sS][tT]\\|[rR][eE][gG]\\|[sS][yY][sS]\\)\\'" . conf-mode) ("\\.\\(?:desktop\\|la\\)\\'" . conf-unix-mode) ("\\.ppd\\'" . conf-ppd-mode) ("java.+\\.conf\\'" . conf-javaprop-mode) ("\\.properties\\(?:\\.[a-zA-Z0-9._-]+\\)?\\'" . conf-javaprop-mode) ("\\`/etc/\\(?:DIR_COLORS\\|ethers\\|.?fstab\\|.*hosts\\|lesskey\\|login\\.?de\\(?:fs\\|vperm\\)\\|magic\\|mtab\\|pam\\.d/.*\\|permissions\\(?:\\.d/.+\\)?\\|protocols\\|rpc\\|services\\)\\'" . conf-space-mode) ("\\`/etc/\\(?:acpid?/.+\\|aliases\\(?:\\.d/.+\\)?\\|default/.+\\|group-?\\|hosts\\..+\\|inittab\\|ksysguarddrc\\|opera6rc\\|passwd-?\\|shadow-?\\|sysconfig/.+\\)\\'" . conf-mode) ("[cC]hange[lL]og[-.][-0-9a-z]+\\'" . change-log-mode) ("/\\.?\\(?:gitconfig\\|gnokiirc\\|hgrc\\|kde.*rc\\|mime\\.types\\|wgetrc\\)\\'" . conf-mode) ("/\\.\\(?:enigma\\|gltron\\|gtk\\|hxplayer\\|net\\|neverball\\|qt/.+\\|realplayer\\|scummvm\\|sversion\\|sylpheed/.+\\|xmp\\)rc\\'" . conf-mode) ("/\\.\\(?:gdbtkinit\\|grip\\|orbital/.+txt\\|rhosts\\|tuxracer/options\\)\\'" . conf-mode) ("/\\.?X\\(?:default\\|resource\\|re\\)s\\>" . conf-xdefaults-mode) ("/X11.+app-defaults/\\|\\.ad\\'" . conf-xdefaults-mode) ("/X11.+locale/.+/Compose\\'" . conf-colon-mode) ("/X11.+locale/compose\\.dir\\'" . conf-javaprop-mode) ("\\.~?[0-9]+\\.[0-9][-.0-9]*~?\\'" nil t) ("\\.\\(?:orig\\|in\\|[bB][aA][kK]\\)\\'" nil t) ("[/.]c\\(?:on\\)?f\\(?:i?g\\)?\\(?:\\.[a-zA-Z0-9._-]+\\)?\\'" . conf-mode-maybe) ("\\.[1-9]\\'" . nroff-mode))))) nil [101080 112489])
            ("put" code nil nil [112490 112536])
            ("conf-mode-maybe" function nil nil [112538 112788])
            ("interpreter-mode-alist" variable (:default-value (mapcar (lambda (l) (cons (purecopy (car l)) (cdr l))) (quote (("\\(mini\\)?perl5?" . perl-mode) ("wishx?" . tcl-mode) ("tcl\\(sh\\)?" . tcl-mode) ("expect" . tcl-mode) ("octave" . octave-mode) ("scm" . scheme-mode) ("[acjkwz]sh" . sh-mode) ("r?bash2?" . sh-mode) ("dash" . sh-mode) ("mksh" . sh-mode) ("\\(dt\\|pd\\|w\\)ksh" . sh-mode) ("es" . sh-mode) ("i?tcsh" . sh-mode) ("oash" . sh-mode) ("rc" . sh-mode) ("rpm" . sh-mode) ("sh5?" . sh-mode) ("tail" . text-mode) ("more" . text-mode) ("less" . text-mode) ("pg" . text-mode) ("make" . makefile-gmake-mode) ("guile" . scheme-mode) ("clisp" . lisp-mode) ("emacs" . emacs-lisp-mode))))) nil [112790 114185])
            ("define-obsolete-variable-alias" code nil nil [114187 114300])
            ("inhibit-local-variables-regexps" variable (:default-value (mapcar (quote purecopy) (quote ("\\.tar\\'" "\\.t[bg]z\\'" "\\.arc\\'" "\\.zip\\'" "\\.lzh\\'" "\\.lha\\'" "\\.zoo\\'" "\\.[jew]ar\\'" "\\.xpi\\'" "\\.rar\\'" "\\.7z\\'" "\\.sx[dmicw]\\'" "\\.odt\\'" "\\.diff\\'" "\\.patch\\'" "\\.tiff?\\'" "\\.gif\\'" "\\.png\\'" "\\.jpe?g\\'")))) nil [114499 115359])
            ("define-obsolete-variable-alias" code nil nil [115361 115471])
            ("inhibit-local-variables-suffixes" variable nil nil [115473 115749])
            ("inhibit-local-variables-ignore-case" variable (:default-value t) nil [115821 115927])
            ("inhibit-local-variables-p" function nil nil [115929 116739])
            ("auto-mode-interpreter-regexp" variable (:default-value (purecopy "#![ 	]?\\([^ 	
]*/bin/env[ 	]\\)?\\([^ 	
]+\\)")) nil [116741 117259])
            ("magic-mode-alist" variable nil nil [117261 117795])
            ("put" code nil nil [117796 117843])
            ("magic-fallback-mode-alist" variable (:default-value (purecopy (\` ((image-type-auto-detected-p . image-mode) ("\\(PK00\\)?[P]K" . archive-mode) ((\, (let* ((incomment-re "\\(?:[^-]\\|-[^-]\\)") (comment-re (concat "\\(?:!--" incomment-re "*-->[ 	
]*<\\)"))) (concat "\\(?:<\\?xml[ 	
]+[^>]*>\\)?[ 	
]*<" comment-re "*" "\\(?:!DOCTYPE[ 	
]+[^>]*>[ 	
]*<[ 	
]*" comment-re "*\\)?" "[Hh][Tt][Mm][Ll]"))) . html-mode) ("<!DOCTYPE[ 	
]+[Hh][Tt][Mm][Ll]" . html-mode) ("<\\?xml " . xml-mode) ((\, (let* ((incomment-re "\\(?:[^-]\\|-[^-]\\)") (comment-re (concat "\\(?:!--" incomment-re "*-->[ 	
]*<\\)"))) (concat "[ 	
]*<" comment-re "*!DOCTYPE "))) . sgml-mode) ("%!PS" . ps-mode) ("# xmcd " . conf-unix-mode))))) nil [117845 119386])
            ("put" code nil nil [119387 119443])
            ("magic-mode-regexp-match-limit" variable (:default-value 4000) nil [119445 119587])
            ("set-auto-mode" function (:arguments ("keep-mode-if-same")) nil [119589 126017])
            ("set-auto-mode-0" function (:arguments ("mode" "keep-mode-if-same")) nil [126270 126677])
            ("file-auto-mode-skip" variable (:default-value "^\\(#!\\|'\\\\\"\\)") nil [126679 126945])
            ("set-auto-mode-1" function nil nil [126947 128452])
            ("ignored-local-variables" variable (:default-value (quote (ignored-local-variables safe-local-variable-values file-local-variables-alist dir-local-variables-alist))) nil [128490 128696])
            ("put" code nil nil [128697 128751])
            ("hack-local-variables-hook" variable nil nil [128753 128986])
            ("safe-local-variable-values" variable nil nil [128988 129248])
            ("safe-local-eval-forms" variable (:default-value (quote ((add-hook (quote write-file-hooks) (quote time-stamp)) (add-hook (quote write-file-functions) (quote time-stamp)) (add-hook (quote before-save-hook) (quote time-stamp) nil t) (add-hook (quote before-save-hook) (quote delete-trailing-whitespace) nil t)))) nil [129250 129912])
            ("mapc" code nil nil [129940 130557])
            ("dolist" code nil nil [131199 131887])
            ("put" code nil nil [131889 132003])
            ("put" code nil nil [132005 132051])
            ("file-local-variables-alist" variable nil nil [132053 132408])
            ("make-variable-buffer-local" code nil nil [132409 132465])
            ("put" code nil nil [132466 132518])
            ("dir-local-variables-alist" variable nil nil [132520 132902])
            ("make-variable-buffer-local" code nil nil [132903 132958])
            ("before-hack-local-variables-hook" variable nil nil [132960 133378])
            ("hack-local-variables-confirm" function (:arguments ("all-vars" "unsafe-vars" "risky-vars" "dir-name")) nil [133380 136250])
            ("hack-local-variable-regexp" variable
               (:constant-flag t
                :default-value "[ 	]*\\([^][;\"'?()\\ 	
]+\\)[ 	]*:[ 	]*")
                nil [136252 136339])
            ("hack-local-variables-prop-line" function (:arguments ("mode-only")) nil [136341 138795])
            ("hack-local-variables-filter" function (:arguments ("variables" "dir-name")) nil [138797 141283])
            ("hack-local-variables--warned-lexical" variable nil nil [141344 141393])
            ("hack-local-variables" function (:arguments ("mode-only")) nil [141395 147633])
            ("hack-local-variables-apply" function nil nil [147635 148436])
            ("safe-local-variable-p" function (:arguments ("sym" "val")) nil [148438 149126])
            ("risky-local-variable-p" function (:arguments ("sym" "_ignored")) nil [149128 150031])
            ("hack-one-local-variable-quotep" function (:arguments ("exp")) nil [150033 150137])
            ("hack-one-local-variable-constantp" function (:arguments ("exp")) nil [150139 150327])
            ("hack-one-local-variable-eval-safep" function (:arguments ("exp")) nil [150329 152149])
            ("hack-one-local-variable--obsolete" function (:arguments ("var")) nil [152151 152583])
            ("hack-one-local-variable" function (:arguments ("var" "val")) nil [152585 153498])
            ("dir-locals-class-alist" variable (:default-value (quote nil)) nil [153564 153679])
            ("dir-locals-directory-cache" variable (:default-value (quote nil)) nil [153681 154257])
            ("dir-locals-get-class-variables" function (:arguments ("class")) nil [154259 154392])
            ("dir-locals-collect-mode-variables" function (:arguments ("mode-variables" "variables")) nil [154394 155039])
            ("dir-locals-collect-variables" function (:arguments ("class-variables" "root" "variables")) nil [155041 157133])
            ("dir-locals-set-directory-class" function (:arguments ("directory" "class" "mtime")) nil [157135 157899])
            ("dir-locals-set-class-variables" function (:arguments ("class" "variables")) nil [157901 159276])
            ("dir-locals-file" variable
               (:constant-flag t
                :default-value ".dir-locals.el")
                nil [159278 159460])
            ("dir-locals-find-file" function (:arguments ("file")) nil [159462 162478])
            ("dir-locals-read-from-file" function (:arguments ("file")) nil [162480 163323])
            ("enable-remote-dir-locals" variable nil nil [163325 163491])
            ("hack-dir-local-variables--warned-coding" variable nil nil [163493 163545])
            ("hack-dir-local-variables" function nil nil [163547 165203])
            ("hack-dir-local-variables-non-file-buffer" function nil nil [165205 165511])
            ("change-major-mode-with-file-name" variable (:default-value t) nil [165515 165950])
            ("set-visited-file-name" function
               (:user-visible-flag t
                :arguments ("filename" "no-query" "along-with-file"))
                nil [165952 171041])
            ("write-file" function
               (:user-visible-flag t
                :arguments ("filename" "confirm"))
                nil [171043 173108])
            ("file-extended-attributes" function (:arguments ("filename")) nil [173111 173425])
            ("set-file-extended-attributes" function (:arguments ("filename" "attributes")) nil [173427 174029])
            ("backup-buffer" function nil nil [174032 177655])
            ("backup-buffer-copy" function (:arguments ("from-name" "to-name" "modes" "extended-attributes")) nil [177657 178758])
            ("file-name-version-regexp" variable (:default-value "\\(?:~\\|\\.~[-[:alnum:]:#@^._]+\\(?:~[[:digit:]]+\\)?~\\)") nil [178760 179053])
            ("file-name-sans-versions" function (:arguments ("name" "keep-backup-version")) nil [179055 179754])
            ("file-ownership-preserved-p" function (:arguments ("file" "group")) nil [179756 181623])
            ("file-name-sans-extension" function (:arguments ("filename")) nil [181625 182350])
            ("file-name-extension" function (:arguments ("filename" "period")) nil [182352 183281])
            ("file-name-base" function (:arguments ("filename")) nil [183283 183527])
            ("make-backup-file-name-function" variable (:default-value (function make-backup-file-name--default-function)) nil [183529 184277])
            ("backup-directory-alist" variable nil nil [184279 185316])
            ("normal-backup-enable-predicate" function (:arguments ("name")) nil [185318 186610])
            ("make-backup-file-name" function (:arguments ("file")) nil [186612 186925])
            ("make-backup-file-name--default-function" function (:arguments ("file")) nil [186927 187677])
            ("make-backup-file-name-1" function (:arguments ("file")) nil [187679 189786])
            ("backup-file-name-p" function (:arguments ("file")) nil [189788 190049])
            ("backup-extract-version-start" variable nil nil [190051 190088])
            ("backup-extract-version" function (:arguments ("fn")) nil [190263 190715])
            ("find-backup-file-name" function (:arguments ("fn")) nil [190717 192856])
            ("file-nlinks" function (:arguments ("filename")) nil [192858 192975])
            ("file-relative-name" function (:arguments ("filename" "directory")) nil [194951 197713])
            ("save-buffer" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [197716 200534])
            ("delete-auto-save-file-if-necessary" function (:arguments ("force")) nil [200536 201107])
            ("auto-save-hook" variable nil nil [201109 201181])
            ("before-save-hook" variable nil nil [201183 201381])
            ("after-save-hook" variable nil nil [201383 201602])
            ("save-buffer-coding-system" variable nil nil [201604 201976])
            ("make-variable-buffer-local" code nil nil [201978 202033])
            ("put" code nil nil [202034 202085])
            ("basic-save-buffer" function
               (:user-visible-flag t
                :arguments ("called-interactively"))
                nil [202087 206458])
            ("basic-save-buffer-1" function nil nil [206740 207043])
            ("basic-save-buffer-2" function nil nil [207132 211981])
            ("declare-function" code nil nil [211983 212069])
            ("save-some-buffers-action-alist" variable (:default-value (\` ((18 (\, (lambda (buf) (if (not enable-recursive-minibuffers) (progn (display-buffer buf) (setq other-window-scroll-buffer buf)) (view-buffer buf (lambda (_) (exit-recursive-edit))) (recursive-edit)) nil)) (\, (purecopy "view this buffer"))) (100 (\, (lambda (buf) (if (null (buffer-file-name buf)) (message "Not applicable: no file") (require (quote diff)) (let ((diffbuf (diff-no-select (buffer-file-name buf) buf nil (quote noasync)))) (if (not enable-recursive-minibuffers) (progn (display-buffer diffbuf) (setq other-window-scroll-buffer diffbuf)) (view-buffer diffbuf (lambda (_) (exit-recursive-edit))) (recursive-edit)))) nil)) (\, (purecopy "view changes in this buffer")))))) nil [212071 213237])
            ("put" code nil nil [213238 213299])
            ("buffer-save-without-query" variable nil nil [213301 213417])
            ("make-variable-buffer-local" code nil nil [213418 213473])
            ("save-some-buffers" function
               (:user-visible-flag t
                :arguments ("arg" "pred"))
                nil [213475 217054])
            ("clear-visited-file-modtime" function nil nil [217057 217238])
            ("not-modified" function (:arguments ("arg")) nil [217240 217763])
            ("toggle-read-only" function (:arguments ("arg" "interactive")) nil [217765 218051])
            ("insert-file" function (:arguments ("filename")) nil [218053 218501])
            ("append-to-file" function
               (:user-visible-flag t
                :arguments ("start" "end" "filename"))
                nil [218503 219161])
            ("file-newest-backup" function (:arguments ("filename")) nil [219163 220086])
            ("rename-uniquely" function (:user-visible-flag t) nil [220088 221104])
            ("make-directory" function
               (:user-visible-flag t
                :arguments ("dir" "parents"))
                nil [221106 222678])
            ("directory-files-no-dot-files-regexp" variable
               (:constant-flag t
                :default-value "^\\([^.]\\|\\.\\([^.]\\|\\..\\)\\).*")
                nil [222680 222826])
            ("delete-directory" function
               (:user-visible-flag t
                :arguments ("directory" "recursive" "trash"))
                nil [222828 225326])
            ("file-equal-p" function (:arguments ("file1" "file2")) nil [225328 225888])
            ("file-in-directory-p" function (:arguments ("file" "dir")) nil [225890 227008])
            ("copy-directory" function
               (:user-visible-flag t
                :arguments ("directory" "newname" "keep-time" "parents" "copy-contents"))
                nil [227010 230197])
            ("prune-directory-list" function (:arguments ("dirs" "keep" "reject")) nil [230245 230807])
            ("put" code nil nil [230811 230859])
            ("revert-buffer-function" variable (:default-value (function revert-buffer--default)) nil [230860 231312])
            ("put" code nil nil [231314 231383])
            ("revert-buffer-insert-file-contents-function" variable (:default-value (function revert-buffer-insert-file-contents--default-function)) nil [231384 231856])
            ("buffer-stale--default-function" function (:arguments ("_noconfirm")) nil [231858 232420])
            ("buffer-stale-function" variable (:default-value (function buffer-stale--default-function)) nil [232422 233337])
            ("before-revert-hook" variable nil nil [233339 233542])
            ("after-revert-hook" variable nil nil [233544 233899])
            ("revert-buffer-in-progress-p" variable nil nil [233901 234015])
            ("revert-buffer-internal-hook" variable nil nil [234017 234053])
            ("revert-buffer-preserve-modes" variable nil nil [234243 234280])
            ("revert-buffer" function
               (:user-visible-flag t
                :arguments ("ignore-auto" "noconfirm" "preserve-modes"))
                nil [234282 236494])
            ("revert-buffer--default" function (:arguments ("ignore-auto" "noconfirm")) nil [236496 239851])
            ("revert-buffer-insert-file-contents--default-function" function (:arguments ("file-name" "auto-save-p")) nil [239853 242053])
            ("recover-this-file" function (:user-visible-flag t) nil [242055 242206])
            ("recover-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [242208 244291])
            ("recover-session" function (:user-visible-flag t) nil [244293 246025])
            ("recover-session-finish" function (:user-visible-flag t) nil [246027 248430])
            ("kill-buffer-ask" function (:arguments ("buffer")) nil [248432 248683])
            ("kill-some-buffers" function
               (:user-visible-flag t
                :arguments ("list"))
                nil [248685 249288])
            ("kill-matching-buffers" function
               (:user-visible-flag t
                :arguments ("regexp" "internal-too"))
                nil [249290 249818])
            ("rename-auto-save-file" function nil nil [249822 250386])
            ("make-auto-save-file-name" function nil nil [250388 254617])
            ("auto-save-file-name-p" function (:arguments ("filename")) nil [254619 254847])
            ("wildcard-to-regexp" function (:arguments ("wildcard")) nil [254850 257033])
            ("list-directory-brief-switches" variable (:default-value (purecopy "-CF")) nil [257036 257197])
            ("list-directory-verbose-switches" variable (:default-value (purecopy "-l")) nil [257199 257365])
            ("file-expand-wildcards" function (:arguments ("pattern" "full")) nil [257367 259009])
            ("files" package nil nil [259083 259119])
            ("list-directory" function
               (:user-visible-flag t
                :arguments ("dirname" "verbose"))
                nil [259121 260467])
            ("shell-quote-wildcard-pattern" function (:arguments ("pattern")) nil [260469 262307])
            ("insert-directory-program" variable (:default-value (purecopy "ls")) nil [262310 262437])
            ("directory-free-space-program" variable (:default-value (purecopy "df")) nil [262439 262976])
            ("directory-free-space-args" variable (:default-value (purecopy (if (eq system-type (quote darwin)) "-k" "-Pk"))) nil [262978 263165])
            ("get-free-disk-space" function (:arguments ("dir")) nil [263167 264937])
            ("directory-listing-before-filename-regexp" variable (:default-value (let* ((l "\\([A-Za-z]\\|[^ -]\\)") (l-or-quote "\\([A-Za-z']\\|[^ -]\\)") (month (concat l-or-quote l-or-quote "+\\.?")) (s " ") (yyyy "[0-9][0-9][0-9][0-9]") (dd "[ 0-3][0-9]") (HH:MM "[ 0-2][0-9][:.][0-5][0-9]") (seconds "[0-6][0-9]\\([.,][0-9]+\\)?") (zone "[-+][0-2][0-9][0-5][0-9]") (iso-mm-dd "[01][0-9]-[0-3][0-9]") (iso-time (concat HH:MM "\\(:" seconds "\\( ?" zone "\\)?\\)?")) (iso (concat "\\(\\(" yyyy "-\\)?" iso-mm-dd "[ T]" iso-time "\\|" yyyy "-" iso-mm-dd "\\)")) (western (concat "\\(" month s "+" dd "\\|" dd "\\.?" s month "\\)" s "+" "\\(" HH:MM "\\|" yyyy "\\)")) (western-comma (concat month s "+" dd "," s "+" yyyy)) (mm "[ 0-1]?[0-9]") (east-asian (concat "\\(" mm l "?" s dd l "?" s "+" "\\|" dd s mm s "+" "\\)" "\\(" HH:MM "\\|" yyyy l "?" "\\)"))) (purecopy (concat "\\([0-9][BkKMGTPEZY]? " iso "\\|.*[0-9][BkKMGTPEZY]? " "\\(" western "\\|" western-comma "\\|" east-asian "\\)" "\\) +")))) nil [265009 267398])
            ("insert-directory-ls-version" variable (:default-value (quote unknown)) nil [267400 267445])
            ("insert-directory" function (:arguments ("file" "switches" "wildcard" "full-directory-p")) nil [268519 278659])
            ("insert-directory-adj-pos" function (:arguments ("pos" "error-lines")) nil [278661 279227])
            ("insert-directory-safely" function (:arguments ("file" "switches" "wildcard" "full-directory-p")) nil [279229 279713])
            ("kill-emacs-query-functions" variable nil nil [279715 280021])
            ("confirm-kill-emacs" variable nil nil [280023 280463])
            ("save-buffers-kill-emacs" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [280465 282554])
            ("save-buffers-kill-terminal" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [282556 283044])
            ("setq" code nil nil [283154 283275])
            ("file-name-non-special" function (:arguments ("operation" "arguments")) nil [283476 286109])
            ("file-modes-char-to-who" function (:arguments ("char")) nil [286152 286619])
            ("file-modes-char-to-right" function (:arguments ("char" "from")) nil [286621 287470])
            ("file-modes-rights-to-number" function (:arguments ("rights" "who-mask" "from")) nil [287472 288626])
            ("file-modes-symbolic-to-number" function (:arguments ("modes" "from")) nil [288628 289711])
            ("read-file-modes" function (:arguments ("prompt" "orig-file")) nil [289713 290780])
            ("define-obsolete-variable-alias" code nil nil [290782 290864])
            ("trash-directory" variable nil nil [290888 291291])
            ("trash--hexify-table" variable nil nil [291293 291321])
            ("declare-function" code nil nil [291323 291389])
            ("move-file-to-trash" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [291391 296655])
            ("define-key" code nil nil [296659 296699])
            ("define-key" code nil nil [296700 296750])
            ("define-key" code nil nil [296751 296801])
            ("define-key" code nil nil [296802 296844])
            ("define-key" code nil nil [296845 296890])
            ("define-key" code nil nil [296891 296932])
            ("define-key" code nil nil [296933 296972])
            ("define-key" code nil nil [296973 297011])
            ("define-key" code nil nil [297012 297057])
            ("define-key" code nil nil [297058 297115])
            ("define-key" code nil nil [297116 297161])
            ("define-key" code nil nil [297163 297215])
            ("define-key" code nil nil [297216 297278])
            ("define-key" code nil nil [297279 297334])
            ("define-key" code nil nil [297335 297394])
            ("define-key" code nil nil [297395 297442])
            ("define-key" code nil nil [297444 297502])
            ("define-key" code nil nil [297503 297554])
            ("define-key" code nil nil [297555 297609])
            ("define-key" code nil nil [297610 297671])
            ("define-key" code nil nil [297672 297731]))          
      :file "files.el.gz"
      :pointmax 297756
      :fsize 85908
      :lastmodtime '(22768 58519 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1158 1175])
            ("rectangle" customgroup (:user-visible-flag t) nil [1178 1268])
            ("operate-on-rectangle" function (:arguments ("function" "start" "end" "coerce-tabs")) nil [1337 2616])
            ("defvar-local" code nil nil [2734 2837])
            ("rectangle--pos-cols" function (:arguments ("start" "end" "window")) nil [2839 4472])
            ("rectangle--col-pos" function (:arguments ("col" "kind")) nil [4474 5270])
            ("rectangle--point-col" function (:arguments ("pos")) nil [5272 5452])
            ("rectangle--crutches" function nil nil [5454 5576])
            ("rectangle--reset-crutches" function nil nil [5577 5787])
            ("apply-on-rectangle" function (:arguments ("function" "start" "end" "args")) nil [5816 6945])
            ("delete-rectangle-line" function (:arguments ("startcol" "endcol" "fill")) nil [6947 7153])
            ("delete-extract-rectangle-line" function (:arguments ("startcol" "endcol" "lines" "fill")) nil [7155 7551])
            ("extract-rectangle-line" function (:arguments ("startcol" "endcol" "lines")) nil [7720 8684])
            ("spaces-strings" variable
               (:constant-flag t
                :default-value (quote ["" " " "  " "   " "    " "     " "      " "       " "        "]))
                nil [8686 8779])
            ("spaces-string" function (:arguments ("n")) nil [8781 8905])
            ("delete-rectangle" function
               (:user-visible-flag t
                :arguments ("start" "end" "fill"))
                nil [8922 9413])
            ("delete-extract-rectangle" function (:arguments ("start" "end" "fill")) nil [9430 9914])
            ("extract-rectangle" function (:arguments ("start" "end")) nil [9931 10229])
            ("extract-rectangle-bounds" function (:arguments ("start" "end")) nil [10231 10655])
            ("killed-rectangle" variable nil nil [10657 10732])
            ("kill-rectangle" function
               (:user-visible-flag t
                :arguments ("start" "end" "fill"))
                nil [10749 11817])
            ("copy-rectangle-as-kill" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [11834 12153])
            ("yank-rectangle" function (:user-visible-flag t) nil [12170 12321])
            ("insert-rectangle" function (:arguments ("rectangle")) nil [12338 12995])
            ("open-rectangle" function
               (:user-visible-flag t
                :arguments ("start" "end" "fill"))
                nil [13012 13527])
            ("open-rectangle-line" function (:arguments ("startcol" "endcol" "fill")) nil [13529 13732])
            ("delete-whitespace-rectangle-line" function (:arguments ("startcol" "_endcol" "fill")) nil [13734 14001])
            ("defalias" code nil nil [14018 14074])
            ("delete-whitespace-rectangle" function
               (:user-visible-flag t
                :arguments ("start" "end" "fill"))
                nil [14103 14668])
            ("string-rectangle-history" variable nil nil [14670 14707])
            ("string-rectangle-line" function (:arguments ("startcol" "endcol" "string" "delete")) nil [14708 14881])
            ("defvar-local" code nil nil [14883 14933])
            ("defvar-local" code nil nil [14934 14985])
            ("rectangle--string-flush-preview" function nil nil [14987 15154])
            ("rectangle--string-erase-preview" function nil nil [15156 15294])
            ("rectangle--space-to" function (:arguments ("col")) nil [15296 15381])
            ("rectangle-preview" variable
               (:default-value (quote ((t :inherit region)))
                :type "face")
                nil [15383 15507])
            ("rectangle-preview" variable (:default-value t) nil [15509 15643])
            ("rectangle--string-preview" function nil nil [15645 17365])
            ("rectangle--inhibit-region-highlight" variable nil nil [17486 17534])
            ("string-rectangle" function
               (:user-visible-flag t
                :arguments ("start" "end" "string"))
                nil [17551 19160])
            ("defalias" code nil nil [19177 19224])
            ("string-insert-rectangle" function
               (:user-visible-flag t
                :arguments ("start" "end" "string"))
                nil [19241 19913])
            ("clear-rectangle" function
               (:user-visible-flag t
                :arguments ("start" "end" "fill"))
                nil [19930 20336])
            ("clear-rectangle-line" function (:arguments ("startcol" "endcol" "fill")) nil [20338 20751])
            ("rectangle-number-line-counter" variable nil nil [20807 20845])
            ("rectangle-number-line-callback" function (:arguments ("start" "_end" "format-string")) nil [20847 21078])
            ("rectangle--default-line-number-format" function (:arguments ("start" "end" "start-at")) nil [21080 21259])
            ("rectangle-number-lines" function
               (:user-visible-flag t
                :arguments ("start" "end" "start-at" "format"))
                nil [21276 22234])
            ("add-function" code nil nil [22437 22546])
            ("add-function" code nil nil [22547 22660])
            ("add-function" code nil nil [22661 22749])
            ("add-function" code nil nil [22750 22836])
            ("rectangle-mark-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [15] (quote open-rectangle)) (define-key map [20] (quote string-rectangle)) (define-key map [remap exchange-point-and-mark] (quote rectangle-exchange-point-and-mark)) (dolist (cmd (quote (right-char left-char forward-char backward-char next-line previous-line))) (define-key map (vector (quote remap) cmd) (intern (format "rectangle-%s" cmd)))) map)) nil [22838 23354])
            ("define-minor-mode" code nil nil [23371 23791])
            ("rectangle-exchange-point-and-mark" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [23793 24619])
            ("rectangle--*-char" function (:arguments ("cmd" "n" "other-cmd")) nil [24621 26415])
            ("rectangle-right-char" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [26417 26594])
            ("rectangle-left-char" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [26595 26770])
            ("rectangle-forward-char" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [26772 26959])
            ("rectangle-backward-char" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [26960 27149])
            ("rectangle-next-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [27151 27411])
            ("rectangle-previous-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [27412 27684])
            ("rectangle--extract-region" function (:arguments ("orig" "delete")) nil [27687 28534])
            ("rectangle--insert-region" function (:arguments ("orig" "strings")) nil [28536 28698])
            ("rectangle--insert-for-yank" function (:arguments ("strs")) nil [28700 29097])
            ("rectangle--place-cursor" function (:arguments ("leftcol" "left" "str")) nil [29099 29316])
            ("rectangle--highlight-for-redisplay" function (:arguments ("orig" "start" "end" "window" "rol")) nil [29318 34602])
            ("rectangle--unhighlight-for-redisplay" function (:arguments ("orig" "rol")) nil [34604 34798])
            ("rect" package nil nil [34800 34815]))          
      :file "rect.el.gz"
      :pointmax 34839
      :fsize 8610
      :lastmodtime '(22768 58519 0 0)
      :unmatched-syntax '((close-paren 1175 . 1176) (symbol 1140 . 1157) (open-paren 1139 . 1140)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("rot13-display-table" variable (:default-value (let ((table (make-display-table)) (i 0)) (while (< i 26) (aset table (+ i 97) (vector (+ (% (+ i 13) 26) 97))) (aset table (+ i 65) (vector (+ (% (+ i 13) 26) 65))) (setq i (1+ i))) table)) nil [1437 1718])
            ("rot13-translate-table" variable (:default-value (let ((str (make-string 127 0)) (i 0)) (while (< i 127) (aset str i i) (setq i (1+ i))) (setq i 0) (while (< i 26) (aset str (+ i 97) (+ (% (+ i 13) 26) 97)) (aset str (+ i 65) (+ (% (+ i 13) 26) 65)) (setq i (1+ i))) str)) nil [1720 2062])
            ("rot13" function (:arguments ("object" "start" "end")) nil [2079 2291])
            ("rot13-string" function (:arguments ("string")) nil [2308 2480])
            ("rot13-region" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [2497 2672])
            ("rot13-other-window" function (:user-visible-flag t) nil [2689 3158])
            ("toggle-rot13-mode" function (:user-visible-flag t) nil [3175 3495])
            ("rot13" package nil nil [3497 3513]))          
      :file "rot13.el.gz"
      :pointmax 3538
      :fsize 1466
      :lastmodtime '(22768 58519 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [2224 2241])
            ("isearch" customgroup (:user-visible-flag t) nil [2288 2501])
            ("search-exit-option" variable (:default-value t) nil [2504 2627])
            ("search-slow-window-lines" variable (:default-value 1) nil [2629 2937])
            ("search-slow-speed" variable (:default-value 1200) nil [2939 3167])
            ("search-upper-case" variable (:default-value (quote not-yanks)) nil [3169 3632])
            ("search-nonincremental-instead" variable (:default-value t) nil [3634 4167])
            ("search-whitespace-regexp" variable (:default-value (purecopy "\\s-+")) nil [4169 5133])
            ("search-invisible" variable (:default-value (quote open)) nil [5135 5974])
            ("isearch-hide-immediately" variable (:default-value t) nil [5976 6494])
            ("isearch-resume-in-command-history" variable nil nil [6496 6718])
            ("isearch-mode-hook" variable nil nil [6720 6815])
            ("isearch-update-post-hook" variable nil nil [6817 6925])
            ("isearch-mode-end-hook" variable nil nil [6927 7129])
            ("isearch-mode-end-hook-quit" variable nil nil [7131 7250])
            ("isearch-message-function" variable nil nil [7252 7380])
            ("isearch-wrap-function" variable nil nil [7382 7602])
            ("isearch-push-state-function" variable nil nil [7604 7746])
            ("isearch-filter-predicate" variable (:default-value (function isearch-filter-visible)) nil [7748 8285])
            ("search-ring" variable nil nil [8304 8365])
            ("regexp-search-ring" variable nil nil [8366 8453])
            ("search-ring-max" variable (:default-value 16) nil [8455 8576])
            ("regexp-search-ring-max" variable (:default-value 16) nil [8577 8712])
            ("search-ring-yank-pointer" variable nil nil [8714 8824])
            ("regexp-search-ring-yank-pointer" variable nil nil [8825 8949])
            ("search-ring-update" variable nil nil [8951 9132])
            ("char-fold-to-regexp" function (:prototype-flag t) nil [9134 9177])
            ("search-default-mode" variable nil nil [9179 10042])
            ("search-highlight" variable (:default-value t) nil [10082 10196])
            ("isearch" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) (:background "magenta3" :foreground "lightskyblue1")) (((class color) (min-colors 88) (background dark)) (:background "palevioletred2" :foreground "brown4")) (((class color) (min-colors 16)) (:background "magenta4" :foreground "cyan1")) (((class color) (min-colors 8)) (:background "magenta4" :foreground "cyan1")) (t (:inverse-video t))))
                :type "face")
                nil [10198 10852])
            ("isearch-face" variable (:default-value (quote isearch)) nil [10853 10883])
            ("isearch-fail" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) (:background "RosyBrown1")) (((class color) (min-colors 88) (background dark)) (:background "red4")) (((class color) (min-colors 16)) (:background "red")) (((class color) (min-colors 8)) (:background "red")) (((class color grayscale)) :foreground "grey") (t (:inverse-video t))))
                :type "face")
                nil [10885 11373])
            ("isearch-lazy-highlight" variable (:default-value t) nil [11375 11695])
            ("lazy-highlight" customgroup (:user-visible-flag t) nil [11732 11896])
            ("define-obsolete-variable-alias" code nil nil [11898 12057])
            ("lazy-highlight-cleanup" variable (:default-value t) nil [12059 12299])
            ("define-obsolete-variable-alias" code nil nil [12301 12472])
            ("lazy-highlight-initial-delay" variable (:default-value 0.25) nil [12474 12630])
            ("define-obsolete-variable-alias" code nil nil [12632 12793])
            ("lazy-highlight-interval" variable nil nil [12795 12942])
            ("define-obsolete-variable-alias" code nil nil [12944 13115])
            ("lazy-highlight-max-at-a-time" variable (:default-value 20) nil [13117 13473])
            ("lazy-highlight" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) (:background "paleturquoise")) (((class color) (min-colors 88) (background dark)) (:background "paleturquoise4")) (((class color) (min-colors 16)) (:background "turquoise3")) (((class color) (min-colors 8)) (:background "turquoise3")) (t (:underline t))))
                :type "face")
                nil [13475 13963])
            ("define-obsolete-face-alias" code nil nil [13964 14044])
            ("define-obsolete-variable-alias" code nil nil [14045 14198])
            ("lazy-highlight-face" variable (:default-value (quote lazy-highlight)) nil [14199 14243])
            ("isearch-help-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map (char-to-string help-char) (quote isearch-help-for-help)) (define-key map [help] (quote isearch-help-for-help)) (define-key map [f1] (quote isearch-help-for-help)) (define-key map "?" (quote isearch-help-for-help)) (define-key map "b" (quote isearch-describe-bindings)) (define-key map "k" (quote isearch-describe-key)) (define-key map "m" (quote isearch-describe-mode)) (define-key map "q" (quote help-quit)) map)) nil [14275 14814])
            ("help-macro" include nil nil [14835 14856])
            ("make-help-screen" code nil nil [14859 15460])
            ("isearch--display-help-action" variable (:default-value (quote (nil (inhibit-same-window . t)))) nil [15462 15532])
            ("isearch-help-for-help" function (:user-visible-flag t) nil [15534 15743])
            ("isearch-describe-bindings" function (:user-visible-flag t) nil [15745 16183])
            ("isearch-describe-key" function (:user-visible-flag t) nil [16185 16430])
            ("isearch-describe-mode" function (:user-visible-flag t) nil [16432 16657])
            ("defalias" code nil nil [16659 16711])
            ("isearch-mode-map" variable (:default-value (let ((i 0) (map (make-keymap))) (or (char-table-p (nth 1 map)) (error "The initialization of isearch-mode-map must be updated")) (set-char-table-range (nth 1 map) (cons 256 (max-char)) (quote isearch-printing-char)) (setq i 32) (while (< i 256) (define-key map (vector i) (quote isearch-printing-char)) (setq i (1+ i))) (let ((meta-map (make-sparse-keymap))) (define-key map (char-to-string meta-prefix-char) meta-map)) (define-key map "" (quote isearch-repeat-forward)) (define-key map "" (quote isearch-repeat-backward)) (define-key map "\223" (quote isearch-repeat-forward)) (define-key map "\222" (quote isearch-repeat-backward)) (define-key map "" (quote isearch-delete-char)) (define-key map [backspace] (quote undefined)) (define-key map "" (quote isearch-abort)) (or (= 27 meta-prefix-char) (error "Inconsistency in isearch.el")) (define-key map "" (quote isearch-cancel)) (define-key map "" (quote isearch-quote-char)) (define-key map "" (quote isearch-exit)) (define-key map [return] (quote isearch-exit)) (define-key map "
" (quote isearch-printing-char)) (define-key map "	" (quote isearch-printing-char)) (define-key map [33554464] (quote isearch-printing-char)) (define-key map "" (quote isearch-yank-word-or-char)) (define-key map "\227" (quote isearch-del-char)) (define-key map "\231" (quote isearch-yank-char)) (define-key map "" (quote isearch-yank-kill)) (define-key map "\363" (quote isearch-yank-line)) (define-key map (char-to-string help-char) isearch-help-map) (define-key map [help] isearch-help-map) (define-key map [f1] isearch-help-map) (define-key map "\356" (quote isearch-ring-advance)) (define-key map "\360" (quote isearch-ring-retreat)) (define-key map "\371" (quote isearch-yank-pop)) (define-key map "\211" (quote isearch-complete)) (define-key map [switch-frame] nil) (define-key map [delete-frame] nil) (define-key map [iconify-frame] nil) (define-key map [make-frame-visible] nil) (define-key map [mouse-movement] nil) (define-key map [language-change] nil) (define-key map "" (quote isearch-toggle-input-method)) (define-key map "" (quote isearch-toggle-specified-input-method)) (define-key map [mouse-2] (function isearch-mouse-2)) (define-key map [down-mouse-2] nil) (define-key map [xterm-paste] (function isearch-xterm-paste)) (define-key map "\343" (quote isearch-toggle-case-fold)) (define-key map "\362" (quote isearch-toggle-regexp)) (define-key map "\345" (quote isearch-edit-string)) (put (quote isearch-edit-string) :advertised-binding "\363e") (define-key map "\363e" (quote isearch-edit-string)) (define-key map [134217765] (quote isearch-query-replace)) (define-key map [201326629] (quote isearch-query-replace-regexp)) (define-key map "\363o" (quote isearch-occur)) (define-key map "\363hr" (quote isearch-highlight-regexp)) (define-key map "8" (quote isearch-char-by-name)) map)) nil [16747 21079])
            ("minibuffer-local-isearch-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-map) (define-key map "" (quote exit-minibuffer)) (define-key map "\211" (quote isearch-complete-edit)) (define-key map "" (quote isearch-forward-exit-minibuffer)) (define-key map "" (quote isearch-reverse-exit-minibuffer)) (define-key map "" (quote isearch-yank-char-in-minibuffer)) (define-key map [right] (quote isearch-yank-char-in-minibuffer)) map)) nil [21081 21616])
            ("isearch-forward" variable nil nil [21780 21808])
            ("isearch-regexp" variable nil nil [21847 21874])
            ("isearch-regexp-function" variable nil nil [21901 22398])
            ("define-obsolete-variable-alias" code nil nil [22466 22546])
            ("isearch-lax-whitespace" variable (:default-value t) nil [22548 22985])
            ("isearch-regexp-lax-whitespace" variable nil nil [22987 23431])
            ("isearch-cmds" variable nil nil [23433 23654])
            ("isearch-string" variable nil nil [23656 23682])
            ("isearch-message" variable nil nil [23713 23740])
            ("isearch-message-prefix-add" variable nil nil [23792 23831])
            ("isearch-message-suffix-add" variable nil nil [23873 23912])
            ("isearch-success" variable (:default-value t) nil [23955 23981])
            ("isearch-error" variable nil nil [24019 24045])
            ("isearch-other-end" variable nil nil [24081 24111])
            ("isearch-wrapped" variable nil nil [24158 24186])
            ("isearch-barrier" variable nil nil [24232 24317])
            ("isearch-just-started" variable nil nil [24318 24351])
            ("isearch-start-hscroll" variable nil nil [24352 24384])
            ("isearch-case-fold-search" variable nil nil [24575 24612])
            ("isearch-invisible" variable (:default-value search-invisible) nil [24748 24791])
            ("isearch-last-case-fold-search" variable nil nil [24793 24835])
            ("isearch-original-minibuffer-message-timeout" variable nil nil [24891 24947])
            ("isearch-adjusted" variable nil nil [24949 24978])
            ("isearch-slow-terminal-mode" variable nil nil [24979 25018])
            ("isearch-small-window" variable nil nil [25050 25083])
            ("isearch-opoint" variable nil nil [25084 25109])
            ("isearch-window-configuration" variable nil nil [25177 25218])
            ("isearch-yank-flag" variable nil nil [25283 25313])
            ("isearch-op-fun" variable nil nil [25507 25534])
            ("isearch-recursive-edit" variable nil nil [25597 25632])
            ("isearch-nonincremental" variable nil nil [25690 25725])
            ("isearch-new-forward" variable nil nil [25786 25818])
            ("isearch-opened-overlays" variable nil nil [25877 25913])
            ("isearch-hidden" variable nil nil [25965 25992])
            ("isearch-input-method-function" variable nil nil [26057 26099])
            ("isearch-input-method-local-p" variable nil nil [26189 26230])
            ("isearch--saved-overriding-local-map" variable nil nil [26232 26280])
            ("or" code nil nil [26411 26522])
            ("defvar-local" code nil nil [26524 26555])
            ("define-key" code nil nil [26596 26643])
            ("define-key" code nil nil [26644 26695])
            ("define-key" code nil nil [26696 26744])
            ("define-key" code nil nil [26745 26797])
            ("define-key" code nil nil [26798 26847])
            ("define-key" code nil nil [26848 26899])
            ("define-key" code nil nil [26900 26960])
            ("isearch-forward" function
               (:user-visible-flag t
                :arguments ("regexp-p" "no-recursive-edit"))
                nil [26996 31290])
            ("isearch-forward-regexp" function
               (:user-visible-flag t
                :arguments ("not-regexp" "no-recursive-edit"))
                nil [31292 32014])
            ("isearch-forward-word" function
               (:user-visible-flag t
                :arguments ("not-word" "no-recursive-edit"))
                nil [32016 32578])
            ("isearch-forward-symbol" function
               (:user-visible-flag t
                :arguments ("_not-symbol" "no-recursive-edit"))
                nil [32580 33122])
            ("isearch-backward" function
               (:user-visible-flag t
                :arguments ("regexp-p" "no-recursive-edit"))
                nil [33124 33437])
            ("isearch-backward-regexp" function
               (:user-visible-flag t
                :arguments ("not-regexp" "no-recursive-edit"))
                nil [33439 33864])
            ("isearch-forward-symbol-at-point" function (:user-visible-flag t) nil [33866 34599])
            ("isearch-mode" function (:arguments ("forward" "regexp" "op-fun" "recursive-edit" "regexp-function")) nil [34936 39133])
            ("isearch--current-buffer" variable nil nil [39181 39217])
            ("isearch-update" function nil nil [39219 42427])
            ("isearch-done" function (:arguments ("nopush" "edit")) nil [42429 45764])
            ("isearch-update-ring" function (:arguments ("string" "regexp")) nil [45766 46053])
            ("cl-defstruct" code nil nil [46444 47525])
            ("isearch--set-state" function (:arguments ("cmd")) nil [47527 48186])
            ("isearch-pop-state" function nil nil [48188 48299])
            ("isearch-push-state" function nil nil [48301 48373])
            ("isearch-exit" function (:user-visible-flag t) nil [48437 48906])
            ("isearch-fail-pos" function (:arguments ("msg")) nil [48908 49680])
            ("isearch-new-regexp-function" variable nil nil [49682 49961])
            ("define-obsolete-variable-alias" code nil nil [49962 50050])
            ("with-isearch-suspended" function (:arguments ("body")) nil [50052 55686])
            ("minibuffer-history-symbol" variable nil nil [55688 55722])
            ("isearch-edit-string" function (:user-visible-flag t) nil [55759 57172])
            ("isearch-nonincremental-exit-minibuffer" function nil nil [57174 57293])
            ("make-obsolete" code nil nil [57444 57523])
            ("isearch-forward-exit-minibuffer" function (:user-visible-flag t) nil [57525 57714])
            ("isearch-reverse-exit-minibuffer" function (:user-visible-flag t) nil [57716 57908])
            ("isearch-cancel" function (:user-visible-flag t) nil [57910 58426])
            ("isearch-abort" function (:user-visible-flag t) nil [58475 59226])
            ("isearch-repeat" function (:arguments ("direction")) nil [59228 61020])
            ("isearch-repeat-forward" function (:user-visible-flag t) nil [61022 61139])
            ("isearch-repeat-backward" function (:user-visible-flag t) nil [61141 61261])
            ("isearch-define-mode-toggle" function (:arguments ("mode" "key" "function" "docstring" "body")) nil [61334 62997])
            ("isearch-define-mode-toggle" code nil nil [62999 63105])
            ("isearch-define-mode-toggle" code nil nil [63106 63219])
            ("isearch-define-mode-toggle" code nil nil [63220 63338])
            ("put" code nil nil [63339 63402])
            ("isearch-define-mode-toggle" code nil nil [63404 63553])
            ("isearch--momentary-message" function (:arguments ("string")) nil [63555 63847])
            ("isearch-define-mode-toggle" code nil nil [63849 64341])
            ("isearch-define-mode-toggle" code nil nil [64343 64626])
            ("isearch-define-mode-toggle" code nil nil [64628 65128])
            ("word-search-regexp" function (:arguments ("string" "lax")) nil [65148 66048])
            ("word-search-backward" function
               (:user-visible-flag t
                :arguments ("string" "bound" "noerror" "count"))
                nil [66050 67416])
            ("word-search-forward" function
               (:user-visible-flag t
                :arguments ("string" "bound" "noerror" "count"))
                nil [67418 68745])
            ("word-search-backward-lax" function
               (:user-visible-flag t
                :arguments ("string" "bound" "noerror" "count"))
                nil [68747 70232])
            ("word-search-forward-lax" function
               (:user-visible-flag t
                :arguments ("string" "bound" "noerror" "count"))
                nil [70234 71679])
            ("isearch-symbol-regexp" function (:arguments ("string" "lax")) nil [71699 72977])
            ("put" code nil nil [72979 73041])
            ("search-forward-lax-whitespace" function (:arguments ("string" "bound" "noerror" "count")) nil [73074 73346])
            ("search-backward-lax-whitespace" function (:arguments ("string" "bound" "noerror" "count")) nil [73348 73623])
            ("re-search-forward-lax-whitespace" function (:arguments ("regexp" "bound" "noerror" "count")) nil [73625 73885])
            ("re-search-backward-lax-whitespace" function (:arguments ("regexp" "bound" "noerror" "count")) nil [73887 74150])
            ("dolist" code nil nil [74152 74481])
            ("isearch-query-replace" function
               (:user-visible-flag t
                :arguments ("arg" "regexp-flag"))
                nil [74485 76933])
            ("isearch-query-replace-regexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [76935 77195])
            ("isearch-occur" function
               (:user-visible-flag t
                :arguments ("regexp" "nlines"))
                nil [77197 79363])
            ("declare-function" code nil nil [79365 79419])
            ("isearch-highlight-regexp" function (:user-visible-flag t) nil [79421 80944])
            ("isearch-delete-char" function (:user-visible-flag t) nil [80948 81354])
            ("isearch-del-char" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [81356 82497])
            ("isearch-yank-string" function (:arguments ("string")) nil [82499 82981])
            ("isearch-yank-kill" function (:user-visible-flag t) nil [82983 83119])
            ("isearch-yank-pop" function (:user-visible-flag t) nil [83121 83665])
            ("isearch-yank-x-selection" function (:user-visible-flag t) nil [83667 83993])
            ("isearch-mouse-2" function
               (:user-visible-flag t
                :arguments ("click"))
                nil [83996 84573])
            ("declare-function" code nil nil [84575 84628])
            ("isearch-xterm-paste" function (:user-visible-flag t) nil [84630 84765])
            ("isearch-yank-internal" function (:arguments ("jumpform")) nil [84767 85321])
            ("isearch-yank-char-in-minibuffer" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [85323 85672])
            ("isearch-yank-char" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [85674 85917])
            ("declare-function" code nil nil [85919 85979])
            ("isearch-yank-word-or-char" function (:user-visible-flag t) nil [85980 86507])
            ("isearch-yank-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [86509 86742])
            ("isearch-yank-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [86744 87038])
            ("isearch-char-by-name" function
               (:user-visible-flag t
                :arguments ("count"))
                nil [87040 87746])
            ("isearch-search-and-update" function nil nil [87748 89855])
            ("isearch-backslash" function (:arguments ("str")) nil [90179 90331])
            ("isearch-fallback" function (:arguments ("want-backslash" "allow-invalid" "to-barrier")) nil [90333 93000])
            ("if" code nil nil [94399 94495])
            ("if" code nil nil [94496 94596])
            ("put" code nil nil [94712 94745])
            ("put" code nil nil [94746 94790])
            ("put" code nil nil [94791 94833])
            ("put" code nil nil [94877 94914])
            ("put" code nil nil [94915 94959])
            ("put" code nil nil [94960 95009])
            ("put" code nil nil [95010 95067])
            ("put" code nil nil [95068 95119])
            ("put" code nil nil [95164 95209])
            ("put" code nil nil [95210 95250])
            ("put" code nil nil [95251 95294])
            ("put" code nil nil [95295 95338])
            ("put" code nil nil [95339 95378])
            ("put" code nil nil [95410 95458])
            ("put" code nil nil [95459 95509])
            ("put" code nil nil [95542 95585])
            ("put" code nil nil [95586 95628])
            ("put" code nil nil [95629 95668])
            ("isearch-allow-scroll" variable nil nil [95670 95976])
            ("isearch-allow-prefix" variable (:default-value t) nil [95978 96277])
            ("isearch-string-out-of-window" function (:arguments ("isearch-point")) nil [96279 97579])
            ("isearch-back-into-window" function (:arguments ("above" "isearch-point")) nil [97581 98482])
            ("isearch-pre-scroll-point" variable nil nil [98484 98521])
            ("isearch-pre-command-hook" function nil nil [98523 100578])
            ("isearch-post-command-hook" function nil nil [100580 100918])
            ("isearch-quote-char" function
               (:user-visible-flag t
                :arguments ("count"))
                nil [100920 102129])
            ("isearch-printing-char" function
               (:user-visible-flag t
                :arguments ("char" "count"))
                nil [102131 102616])
            ("isearch-process-search-char" function (:arguments ("char" "count")) nil [102618 103455])
            ("isearch-process-search-string" function (:arguments ("string" "message")) nil [103457 103646])
            ("isearch-ring-adjust1" function (:arguments ("advance")) nil [103666 104303])
            ("isearch-ring-adjust" function (:arguments ("advance")) nil [104305 104832])
            ("isearch-ring-advance" function (:user-visible-flag t) nil [104834 105043])
            ("isearch-ring-retreat" function (:user-visible-flag t) nil [105045 105175])
            ("isearch-complete1" function nil nil [105177 106082])
            ("isearch-complete" function (:user-visible-flag t) nil [106084 106535])
            ("isearch-complete-edit" function (:user-visible-flag t) nil [106537 106763])
            ("isearch-message" function (:arguments ("c-q-hack" "ellipsis")) nil [106786 107889])
            ("isearch--describe-regexp-mode" function (:arguments ("regexp-function" "space-before")) nil [107891 109557])
            ("define-obsolete-function-alias" code nil nil [109558 109659])
            ("isearch-message-prefix" function (:arguments ("ellipsis" "nonincremental")) nil [109661 111548])
            ("isearch-message-suffix" function (:arguments ("c-q-hack")) nil [111550 111741])
            ("isearch-search-fun-function" variable (:default-value (quote isearch-search-fun-default)) nil [111759 112295])
            ("isearch-search-fun" function nil nil [112297 112514])
            ("isearch--lax-regexp-function-p" function nil nil [112516 112817])
            ("isearch-search-fun-default" function nil nil [112819 114243])
            ("isearch-search-string" function (:arguments ("string" "bound" "noerror")) nil [114245 116329])
            ("isearch-search" function nil nil [116331 118481])
            ("isearch-open-overlay-temporary" function (:arguments ("ov")) nil [118548 119237])
            ("isearch-open-necessary-overlays" function (:arguments ("ov")) nil [119506 120190])
            ("isearch-clean-overlays" function nil nil [120323 120496])
            ("isearch-intersects-p" function (:arguments ("start0" "end0" "start1" "end1")) nil [120499 120807])
            ("isearch-close-unnecessary-overlays" function (:arguments ("begin" "end")) nil [120928 121589])
            ("isearch-range-invisible" function (:arguments ("beg" "end")) nil [121592 123607])
            ("isearch-filter-visible" function (:arguments ("beg" "end")) nil [123609 123977])
            ("isearch-no-upper-case-p" function (:arguments ("string" "regexp-flag")) nil [124003 125208])
            ("isearch-text-char-description" function (:arguments ("c")) nil [125271 125575])
            ("isearch-unread" function (:arguments ("char-or-events")) nil [125684 125854])
            ("isearch-overlay" variable nil nil [125875 125903])
            ("isearch-highlight" function (:arguments ("beg" "end")) nil [125905 126328])
            ("isearch-dehighlight" function nil nil [126330 126422])
            ("isearch-lazy-highlight-overlays" variable nil nil [127643 127687])
            ("isearch-lazy-highlight-wrapped" variable nil nil [127688 127731])
            ("isearch-lazy-highlight-start-limit" variable nil nil [127732 127779])
            ("isearch-lazy-highlight-end-limit" variable nil nil [127780 127825])
            ("isearch-lazy-highlight-start" variable nil nil [127826 127867])
            ("isearch-lazy-highlight-end" variable nil nil [127868 127907])
            ("isearch-lazy-highlight-timer" variable nil nil [127908 127949])
            ("isearch-lazy-highlight-last-string" variable nil nil [127950 127997])
            ("isearch-lazy-highlight-window" variable nil nil [127998 128040])
            ("isearch-lazy-highlight-window-group" variable nil nil [128041 128089])
            ("isearch-lazy-highlight-window-start" variable nil nil [128090 128138])
            ("isearch-lazy-highlight-window-end" variable nil nil [128139 128185])
            ("isearch-lazy-highlight-case-fold-search" variable nil nil [128186 128238])
            ("isearch-lazy-highlight-regexp" variable nil nil [128239 128281])
            ("isearch-lazy-highlight-lax-whitespace" variable nil nil [128282 128332])
            ("isearch-lazy-highlight-regexp-lax-whitespace" variable nil nil [128333 128390])
            ("isearch-lazy-highlight-regexp-function" variable nil nil [128391 128442])
            ("define-obsolete-variable-alias" code nil nil [128443 128553])
            ("isearch-lazy-highlight-forward" variable nil nil [128554 128597])
            ("isearch-lazy-highlight-error" variable nil nil [128598 128639])
            ("lazy-highlight-cleanup" function
               (:user-visible-flag t
                :arguments ("force"))
                nil [128641 129341])
            ("define-obsolete-function-alias" code nil nil [129343 129502])
            ("isearch-lazy-highlight-new-loop" function (:arguments ("beg" "end")) nil [129504 132996])
            ("isearch-lazy-highlight-search" function nil nil [132998 134803])
            ("isearch-lazy-highlight-update" function nil nil [134805 137410])
            ("isearch-resume" function (:arguments ("string" "regexp" "word" "forward" "message" "case-fold")) nil [137412 138007]))          
      :file "isearch.el.gz"
      :pointmax 138034
      :fsize 35233
      :lastmodtime '(22768 58519 0 0)
      :unmatched-syntax '((close-paren 14856 . 14857) (symbol 14817 . 14834) (open-paren 14816 . 14817) (close-paren 2241 . 2242) (symbol 2206 . 2223) (open-paren 2205 . 2206)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("scheme" include nil nil [4115 4132])
            ("comint" include nil nil [4133 4150])
            ("cmuscheme" customgroup (:user-visible-flag t) nil [4153 4232])
            ("inferior-scheme-mode-hook" variable nil nil [4346 4468])
            ("inferior-scheme-mode-map" variable (:default-value (let ((m (make-sparse-keymap))) (define-key m "\230" (quote scheme-send-definition)) (define-key m "" (quote scheme-send-last-sexp)) (define-key m "" (quote scheme-load-file)) (define-key m "" (quote scheme-compile-file)) (scheme-mode-commands m) m)) nil [4470 4794])
            ("define-key" code nil nil [4869 4931])
            ("define-key" code nil nil [4947 5009])
            ("define-key" code nil nil [5025 5088])
            ("define-key" code nil nil [5089 5159])
            ("define-key" code nil nil [5160 5219])
            ("define-key" code nil nil [5220 5286])
            ("define-key" code nil nil [5287 5353])
            ("define-key" code nil nil [5354 5427])
            ("define-key" code nil nil [5428 5491])
            ("define-key" code nil nil [5492 5559])
            ("define-key" code nil nil [5560 5617])
            ("define-key" code nil nil [5618 5675])
            ("define-key" code nil nil [5676 5736])
            ("let" code nil nil [5755 6908])
            ("scheme-buffer" variable nil nil [6910 6932])
            ("define-derived-mode" code nil nil [6934 9019])
            ("inferior-scheme-filter-regexp" variable (:default-value "\\`\\s *\\S ?\\S ?\\s *\\'") nil [9021 9257])
            ("scheme-input-filter" function (:arguments ("str")) nil [9259 9417])
            ("scheme-get-old-input" function nil nil [9419 9590])
            ("run-scheme" function
               (:user-visible-flag t
                :arguments ("cmd"))
                nil [9607 10712])
            ("scheme-start-file" function (:arguments ("prog")) nil [10714 11201])
            ("scheme-send-region" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [11203 11410])
            ("scheme-send-definition" function (:user-visible-flag t) nil [11412 11651])
            ("scheme-send-last-sexp" function (:user-visible-flag t) nil [11653 11832])
            ("scheme-compile-exp-command" variable (:default-value "(compile '%s)") nil [11834 11999])
            ("scheme-compile-region" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [12001 12368])
            ("scheme-compile-definition" function (:user-visible-flag t) nil [12370 12618])
            ("scheme-trace-command" variable (:default-value "(trace %s)") nil [12620 13004])
            ("scheme-untrace-command" variable (:default-value "(untrace %s)") nil [13006 13224])
            ("scheme-trace-procedure" function
               (:user-visible-flag t
                :arguments ("proc" "untrace"))
                nil [13226 14028])
            ("scheme-macro-expand-command" variable (:default-value "(expand %s)") nil [14030 14210])
            ("scheme-expand-current-form" function (:user-visible-flag t) nil [14212 14685])
            ("scheme-form-at-point" function nil nil [14687 14932])
            ("switch-to-scheme" function
               (:user-visible-flag t
                :arguments ("eob-p"))
                nil [14934 15360])
            ("scheme-send-region-and-go" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [15362 15578])
            ("scheme-send-definition-and-go" function (:user-visible-flag t) nil [15580 15777])
            ("scheme-compile-definition-and-go" function (:user-visible-flag t) nil [15779 15985])
            ("scheme-compile-region-and-go" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [15987 16204])
            ("scheme-source-modes" variable (:default-value (quote (scheme-mode))) nil [16206 16560])
            ("scheme-prev-l/c-dir/file" variable nil nil [16562 16786])
            ("scheme-load-file" function
               (:user-visible-flag t
                :arguments ("file-name"))
                nil [16788 17387])
            ("scheme-compile-file" function
               (:user-visible-flag t
                :arguments ("file-name"))
                nil [17389 18010])
            ("scheme-buffer" variable nil nil [18014 20056])
            ("scheme-proc" function nil nil [20058 20433])
            ("scheme-get-process" function nil nil [20435 20676])
            ("scheme-interactively-start-process" function (:arguments ("_cmd")) nil [20678 20978])
            ("cmuscheme-load-hook" variable nil nil [21016 21176])
            ("run-hooks" code nil nil [21178 21210])
            ("cmuscheme" package nil nil [21212 21232]))          
      :file "cmuscheme.el.gz"
      :pointmax 21261
      :fsize 6593
      :lastmodtime '(22768 58519 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1227 1244])
            ("cl-defstruct" code nil nil [1295 1627])
            ("cl-defun" code nil nil [1629 2250])
            ("register-alist" variable nil nil [2252 2965])
            ("register" customgroup (:user-visible-flag t) nil [2967 3053])
            ("register-separator" variable nil nil [3055 3451])
            ("register-preview-delay" variable (:default-value 1) nil [3453 3779])
            ("get-register" function (:arguments ("register")) nil [3781 3920])
            ("set-register" function (:arguments ("register" "value")) nil [3922 4162])
            ("register-describe-oneline" function (:arguments ("c")) nil [4164 4483])
            ("register-preview-default" function (:arguments ("r")) nil [4485 4685])
            ("register-preview-function" variable (:default-value (function register-preview-default)) nil [4687 4891])
            ("register-preview" function (:arguments ("buffer" "show-empty")) nil [4893 5535])
            ("register-read-with-preview" function (:arguments ("prompt")) nil [5537 6795])
            ("point-to-register" function
               (:user-visible-flag t
                :arguments ("register" "arg"))
                nil [6797 7484])
            ("window-configuration-to-register" function
               (:user-visible-flag t
                :arguments ("register" "_arg"))
                nil [7486 8130])
            ("set-advertised-calling-convention" code nil nil [8192 8287])
            ("frame-configuration-to-register" function
               (:user-visible-flag t
                :arguments ("register" "_arg"))
                nil [8289 8921])
            ("set-advertised-calling-convention" code nil nil [8983 9077])
            ("make-obsolete" code nil nil [9079 9156])
            ("defalias" code nil nil [9158 9205])
            ("jump-to-register" function
               (:user-visible-flag t
                :arguments ("register" "delete"))
                nil [9206 11249])
            ("register-swap-out" function nil nil [11251 11604])
            ("number-to-register" function
               (:user-visible-flag t
                :arguments ("number" "register"))
                nil [11606 12307])
            ("increment-register" function
               (:user-visible-flag t
                :arguments ("prefix" "register"))
                nil [12309 13167])
            ("view-register" function
               (:user-visible-flag t
                :arguments ("register"))
                nil [13169 13648])
            ("list-registers" function (:user-visible-flag t) nil [13650 14027])
            ("describe-register-1" function (:arguments ("register" "verbose")) nil [14029 16230])
            ("insert-register" function
               (:user-visible-flag t
                :arguments ("register" "arg"))
                nil [16232 17439])
            ("copy-to-register" function
               (:user-visible-flag t
                :arguments ("register" "start" "end" "delete-flag" "region"))
                nil [17441 18412])
            ("append-to-register" function
               (:user-visible-flag t
                :arguments ("register" "start" "end" "delete-flag"))
                nil [18414 19420])
            ("prepend-to-register" function
               (:user-visible-flag t
                :arguments ("register" "start" "end" "delete-flag"))
                nil [19422 20432])
            ("copy-rectangle-to-register" function
               (:user-visible-flag t
                :arguments ("register" "start" "end" "delete-flag"))
                nil [20434 21370])
            ("register" package nil nil [21372 21391]))          
      :file "register.el.gz"
      :pointmax 21418
      :fsize 5933
      :lastmodtime '(22768 58519 0 0)
      :unmatched-syntax '((close-paren 1244 . 1245) (symbol 1209 . 1226) (open-paren 1208 . 1209)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [2379 2396])
            ("kmacro" include nil nil [2397 2414])
            ("edmacro-eight-bits" variable nil nil [2465 2672])
            ("edmacro-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "" (quote edmacro-finish-edit)) (define-key map "" (quote edmacro-insert-key)) map)) nil [2674 2849])
            ("edmacro-store-hook" variable nil nil [2851 2878])
            ("edmacro-finish-hook" variable nil nil [2879 2907])
            ("edmacro-original-buffer" variable nil nil [2908 2940])
            ("edit-kbd-macro" function
               (:user-visible-flag t
                :arguments ("keys" "prefix" "finish-hook" "store-hook"))
                nil [2957 6321])
            ("edit-last-kbd-macro" function
               (:user-visible-flag t
                :arguments ("prefix"))
                nil [6426 6590])
            ("edit-named-kbd-macro" function
               (:user-visible-flag t
                :arguments ("prefix"))
                nil [6607 6806])
            ("read-kbd-macro" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [6823 7629])
            ("format-kbd-macro" function (:arguments ("macro" "verbose")) nil [7646 8125])
            ("edmacro-finish-edit" function nil nil [8167 12353])
            ("edmacro-insert-key" function
               (:user-visible-flag t
                :arguments ("key"))
                nil [12355 12579])
            ("edmacro-mode" function (:user-visible-flag t) nil [12581 15806])
            ("put" code nil nil [15807 15847])
            ("edmacro-format-keys" function (:arguments ("macro" "verbose")) nil [15907 22649])
            ("edmacro-sanitize-for-string" function (:arguments ("seq")) nil [22651 23059])
            ("edmacro-fix-menu-commands" function (:arguments ("macro" "noerror")) nil [23061 23842])
            ("edmacro-parse-keys" function (:arguments ("string" "need-vector")) nil [23891 27777])
            ("edmacro" package nil nil [27779 27797]))          
      :file "edmacro.el.gz"
      :pointmax 27824
      :fsize 8801
      :lastmodtime '(22768 58519 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("file-name-shadow-properties-custom-type" variable
               (:constant-flag t
                :default-value (quote (list (checklist :inline t (const :tag "Invisible" :doc "Make shadowed part of filename invisible" :format "%t%n%h" :inline t (invisible t intangible t)) (list :inline t :format "%v" :tag "Face" :doc "Display shadowed part of filename using a different face" (const :format "" face) (face :value file-name-shadow)) (list :inline t :format "%t: %v%h" :tag "Brackets" :doc "    Surround shadowed part of filename with brackets" (const :format "" before-string) (string :format "%v" :size 4 :value "{") (const :format "" after-string) (string :format " and: %v" :value "} ")) (list :inline t :format "%t: %v%n%h" :tag "String" :doc "Display a string instead of the shadowed part of filename" (const :format "" display) (string :format "%v" :size 15 :value "<...ignored...>")) (const :tag "Avoid" :doc "Try to keep cursor out of shadowed part of filename" :format "%t%n%h" :inline t (field shadow))) (repeat :inline t :tag "Other Properties" (list :inline t :format "%v" (symbol :tag "Property") (sexp :tag "Value"))))))
                nil [1459 3318])
            ("file-name-shadow-properties" variable (:default-value (quote (face file-name-shadow field shadow))) nil [3320 3746])
            ("file-name-shadow-tty-properties" variable (:default-value (purecopy (quote (before-string "{" after-string "} " field shadow)))) nil [3748 4207])
            ("file-name-shadow" variable
               (:default-value (quote ((t :inherit shadow)))
                :type "face")
                nil [4209 4356])
            ("rfn-eshadow-setup-minibuffer-hook" variable nil nil [4358 4456])
            ("rfn-eshadow-update-overlay-hook" variable nil nil [4458 4553])
            ("rfn-eshadow-frobbed-minibufs" variable nil nil [4648 4689])
            ("rfn-eshadow-overlay" variable nil nil [4778 4806])
            ("make-variable-buffer-local" code nil nil [4807 4856])
            ("rfn-eshadow-setup-minibuffer" function nil nil [4927 5957])
            ("rfn-eshadow-sifn-equal" function (:arguments ("goal" "pos")) nil [5959 6195])
            ("rfn-eshadow-update-overlay" function nil nil [6236 7971])
            ("define-minor-mode" code nil nil [7974 9445])
            ("rfn-eshadow" package nil nil [9448 9470]))          
      :file "rfn-eshadow.el.gz"
      :pointmax 9501
      :fsize 3223
      :lastmodtime '(22768 58519 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("term-file-prefix" variable (:default-value (purecopy "term/")) nil [874 1326])
            ("term-file-aliases" variable (:default-value (quote (("apollo" . "vt100") ("vt102" . "vt100") ("vt125" . "vt100") ("vt201" . "vt200") ("vt220" . "vt200") ("vt240" . "vt200") ("vt300" . "vt200") ("vt320" . "vt200") ("vt400" . "vt200") ("vt420" . "vt200")))) nil [1328 1912])
            ("declare-function" code nil nil [1914 1986])
            ("help-xref-stack-item" variable nil nil [1988 2017])
            ("face-name-history" variable nil nil [2019 2200])
            ("font-selection" customgroup (:user-visible-flag t) nil [2371 2453])
            ("face-font-selection-order" variable (:default-value (quote (:width :height :weight :slant))) nil [2456 3238])
            ("face-font-family-alternatives" variable (:default-value (mapcar (lambda (arg) (mapcar (quote purecopy) arg)) (quote (("Monospace" "courier" "fixed") ("Monospace Serif" "Courier 10 Pitch" "Consolas" "Courier Std" "FreeMono" "Nimbus Mono L" "courier" "fixed") ("courier" "CMU Typewriter Text" "fixed") ("Sans Serif" "helv" "helvetica" "arial" "fixed") ("helv" "helvetica" "arial" "fixed"))))) nil [3412 4998])
            ("face-font-registry-alternatives" variable (:default-value (mapcar (lambda (arg) (mapcar (quote purecopy) arg)) (if (featurep (quote w32)) (quote (("iso8859-1" "ms-oemlatin") ("gb2312.1980" "gb2312" "gbk" "gb18030") ("jisx0208.1990" "jisx0208.1983" "jisx0208.1978") ("ksc5601.1989" "ksx1001.1992" "ksc5601.1987") ("muletibetan-2" "muletibetan-0"))) (quote (("gb2312.1980" "gb2312.80&gb8565.88" "gbk" "gb18030") ("jisx0208.1990" "jisx0208.1983" "jisx0208.1978") ("ksc5601.1989" "ksx1001.1992" "ksc5601.1987") ("muletibetan-2" "muletibetan-0")))))) nil [5044 6108])
            ("face-list" function nil nil [6283 6384])
            ("make-face" function
               (:user-visible-flag t
                :arguments ("face"))
                nil [6386 7087])
            ("make-empty-face" function
               (:user-visible-flag t
                :arguments ("face"))
                nil [7089 7351])
            ("copy-face" function (:arguments ("old-face" "new-face" "frame" "new-frame")) nil [7353 8604])
            ("facep" function (:arguments ("face")) nil [8784 8933])
            ("check-face" function (:arguments ("face")) nil [8936 9090])
            ("face-id" function (:arguments ("face" "_frame")) nil [9271 9613])
            ("face-equal" function (:arguments ("face1" "face2" "frame")) nil [9615 10032])
            ("face-differs-from-default-p" function (:arguments ("face" "frame")) nil [10035 10748])
            ("face-nontrivial-p" function (:arguments ("face" "frame")) nil [10751 11095])
            ("face-list-p" function (:arguments ("face-or-list")) nil [11098 11527])
            ("face-x-resources" variable (:default-value (mapcar (lambda (arg) (cons (car arg) (cons (purecopy (car (cdr arg))) (purecopy (cdr (cdr arg)))))) (quote ((:family (".attributeFamily" . "Face.AttributeFamily")) (:foundry (".attributeFoundry" . "Face.AttributeFoundry")) (:width (".attributeWidth" . "Face.AttributeWidth")) (:height (".attributeHeight" . "Face.AttributeHeight")) (:weight (".attributeWeight" . "Face.AttributeWeight")) (:slant (".attributeSlant" . "Face.AttributeSlant")) (:foreground (".attributeForeground" . "Face.AttributeForeground")) (:distant-foreground (".attributeDistantForeground" . "Face.AttributeDistantForeground")) (:background (".attributeBackground" . "Face.AttributeBackground")) (:overline (".attributeOverline" . "Face.AttributeOverline")) (:strike-through (".attributeStrikeThrough" . "Face.AttributeStrikeThrough")) (:box (".attributeBox" . "Face.AttributeBox")) (:underline (".attributeUnderline" . "Face.AttributeUnderline")) (:inverse-video (".attributeInverse" . "Face.AttributeInverse")) (:stipple (".attributeStipple" . "Face.AttributeStipple") (".attributeBackgroundPixmap" . "Face.AttributeBackgroundPixmap")) (:bold (".attributeBold" . "Face.AttributeBold")) (:italic (".attributeItalic" . "Face.AttributeItalic")) (:font (".attributeFont" . "Face.AttributeFont")) (:inherit (".attributeInherit" . "Face.AttributeInherit")))))) nil [11725 13617])
            ("declare-function" code nil nil [13620 13715])
            ("declare-function" code nil nil [13717 13831])
            ("set-face-attribute-from-resource" function (:arguments ("face" "attribute" "resource" "class" "frame")) nil [13833 14542])
            ("set-face-attributes-from-resources" function (:arguments ("face" "frame")) nil [14545 14908])
            ("make-face-x-resource-internal" function (:arguments ("face" "frame")) nil [14911 15507])
            ("face-name" function (:arguments ("face")) nil [15691 15783])
            ("face-all-attributes" function (:arguments ("face" "frame")) nil [15786 16252])
            ("face-attribute" function (:arguments ("face" "attribute" "frame" "inherit")) nil [16254 18068])
            ("face-attribute-merged-with" function (:arguments ("attribute" "value" "faces" "frame")) nil [18070 18658])
            ("face-attribute-specified-or" function (:arguments ("value" "body")) nil [18661 18942])
            ("face-foreground" function (:arguments ("face" "frame" "inherit")) nil [18944 20000])
            ("face-background" function (:arguments ("face" "frame" "inherit")) nil [20002 21058])
            ("face-stipple" function (:arguments ("face" "frame" "inherit")) nil [21060 22080])
            ("defalias" code nil nil [22083 22131])
            ("face-underline-p" function (:arguments ("face" "frame" "inherit")) nil [22134 22587])
            ("face-inverse-video-p" function (:arguments ("face" "frame" "inherit")) nil [22590 23024])
            ("face-bold-p" function (:arguments ("face" "frame" "inherit")) nil [23027 23546])
            ("face-italic-p" function (:arguments ("face" "frame" "inherit")) nil [23549 24053])
            ("face-documentation" function (:arguments ("face")) nil [24229 24651])
            ("set-face-documentation" function (:arguments ("face" "string")) nil [24654 24842])
            ("defalias" code nil nil [24845 24892])
            ("defalias" code nil nil [24893 24948])
            ("set-face-attribute" function (:arguments ("face" "frame" "args")) nil [25129 32824])
            ("make-face-bold" function
               (:user-visible-flag t
                :arguments ("face" "frame" "_noerror"))
                nil [32826 33277])
            ("make-face-unbold" function
               (:user-visible-flag t
                :arguments ("face" "frame" "_noerror"))
                nil [33280 33680])
            ("make-face-italic" function
               (:user-visible-flag t
                :arguments ("face" "frame" "_noerror"))
                nil [33683 34140])
            ("make-face-unitalic" function
               (:user-visible-flag t
                :arguments ("face" "frame" "_noerror"))
                nil [34143 34548])
            ("make-face-bold-italic" function
               (:user-visible-flag t
                :arguments ("face" "frame" "_noerror"))
                nil [34551 35048])
            ("set-face-font" function
               (:user-visible-flag t
                :arguments ("face" "font" "frame"))
                nil [35051 35477])
            ("set-face-background" function
               (:user-visible-flag t
                :arguments ("face" "color" "frame"))
                nil [35683 36152])
            ("set-face-foreground" function
               (:user-visible-flag t
                :arguments ("face" "color" "frame"))
                nil [36155 36624])
            ("set-face-stipple" function
               (:user-visible-flag t
                :arguments ("face" "stipple" "frame"))
                nil [36627 37232])
            ("set-face-underline" function
               (:user-visible-flag t
                :arguments ("face" "underline" "frame"))
                nil [37235 38004])
            ("define-obsolete-function-alias" code nil nil [38006 38119])
            ("set-face-inverse-video" function
               (:user-visible-flag t
                :arguments ("face" "inverse-video-p" "frame"))
                nil [38122 38695])
            ("define-obsolete-function-alias" code nil nil [38697 38818])
            ("set-face-bold" function (:arguments ("face" "bold-p" "frame")) nil [38820 39236])
            ("define-obsolete-function-alias" code nil nil [39238 39309])
            ("set-face-italic" function (:arguments ("face" "italic-p" "frame")) nil [39312 39748])
            ("define-obsolete-function-alias" code nil nil [39750 39825])
            ("defalias" code nil nil [39828 39884])
            ("invert-face" function
               (:user-visible-flag t
                :arguments ("face" "frame"))
                nil [39887 40687])
            ("crm-separator" variable nil nil [40873 40895])
            ("read-face-name" function (:arguments ("prompt" "default" "multiple")) nil [40911 43420])
            ("x-bitmap-file-path" variable nil nil [43479 43506])
            ("face-valid-attribute-values" function (:arguments ("attribute" "frame")) nil [43508 46197])
            ("face-attribute-name-alist" variable
               (:constant-flag t
                :default-value (quote ((:family . "font family") (:foundry . "font foundry") (:width . "character set width") (:height . "height in 1/10 pt") (:weight . "weight") (:slant . "slant") (:underline . "underline") (:overline . "overline") (:strike-through . "strike-through") (:box . "box") (:inverse-video . "inverse-video display") (:foreground . "foreground color") (:background . "background color") (:stipple . "background stipple") (:inherit . "inheritance"))))
                nil [46200 46970])
            ("face-descriptive-attribute-name" function (:arguments ("attribute")) nil [46973 47120])
            ("face-read-string" function (:arguments ("face" "default" "name" "completion-alist")) nil [47123 48138])
            ("face-read-integer" function (:arguments ("face" "default" "name")) nil [48141 48758])
            ("read-face-attribute" function (:arguments ("face" "attribute" "frame")) nil [48919 51260])
            ("declare-function" code nil nil [51262 51308])
            ("declare-function" code nil nil [51309 51400])
            ("read-face-font" function (:arguments ("face" "frame")) nil [51402 51774])
            ("read-all-face-attributes" function (:arguments ("face" "frame")) nil [51777 52205])
            ("modify-face" function
               (:user-visible-flag t
                :arguments ("face" "foreground" "background" "stipple" "bold-p" "italic-p" "underline" "inverse-p" "frame"))
                nil [52207 53152])
            ("read-face-and-attribute" function (:arguments ("attribute" "frame")) nil [53154 53943])
            ("list-faces-sample-text" variable
               (:constant-flag t
                :default-value "abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ")
                nil [54114 54277])
            ("help-xref-stack" variable nil nil [54406 54430])
            ("list-faces-display" function
               (:user-visible-flag t
                :arguments ("regexp"))
                nil [54431 57466])
            ("describe-face" function
               (:user-visible-flag t
                :arguments ("face" "frame"))
                nil [57469 61586])
            ("face-attr-construct" function (:arguments ("face" "_frame")) nil [61864 62454])
            ("face-spec-set-match-display" function (:arguments ("display" "frame")) nil [62457 64259])
            ("face-spec-choose" function (:arguments ("spec" "frame" "no-match-retval")) nil [64262 65683])
            ("face--attributes-unspecified" variable
               (:constant-flag t
                :default-value (apply (quote append) (mapcar (lambda (x) (list (car x) (quote unspecified))) face-attribute-name-alist)))
                nil [65863 66022])
            ("face-spec-reset-face" function (:arguments ("face" "frame")) nil [66024 67097])
            ("face-spec-set" function (:arguments ("face" "spec" "spec-type")) nil [67099 69053])
            ("face-spec-recalc" function (:arguments ("face" "frame")) nil [69055 70720])
            ("face-spec-set-2" function (:arguments ("face" "frame" "spec")) nil [70722 71049])
            ("face-attr-match-p" function (:arguments ("face" "attrs" "frame")) nil [71051 72125])
            ("face-spec-match-p" function (:arguments ("face" "spec" "frame")) nil [72127 72322])
            ("face-default-spec" function (:arguments ("face")) nil [72324 72512])
            ("face-user-default-spec" function (:arguments ("face")) nil [72514 72797])
            ("defined-colors" function (:arguments ("frame")) nil [73055 73513])
            ("defalias" code nil nil [73514 73558])
            ("declare-function" code nil nil [73560 73630])
            ("color-defined-p" function (:arguments ("color" "frame")) nil [73632 74299])
            ("defalias" code nil nil [74300 74346])
            ("declare-function" code nil nil [74348 74415])
            ("color-values" function (:arguments ("color" "frame")) nil [74417 75336])
            ("defalias" code nil nil [75338 75378])
            ("declare-function" code nil nil [75380 75447])
            ("display-color-p" function (:arguments ("display")) nil [75449 75851])
            ("defalias" code nil nil [75852 75898])
            ("declare-function" code nil nil [75900 75970])
            ("display-grayscale-p" function (:arguments ("display")) nil [75972 76405])
            ("read-color" function
               (:user-visible-flag t
                :arguments ("prompt" "convert-to-RGB" "allow-empty-name" "msg"))
                nil [76407 79111])
            ("face-at-point" function (:arguments ("thing" "multiple")) nil [79113 80119])
            ("faces--attribute-at-point" function (:arguments ("attribute" "attribute-unnamed")) nil [80121 81654])
            ("foreground-color-at-point" function nil nil [81656 81814])
            ("background-color-at-point" function nil nil [81816 81974])
            ("declare-function" code nil nil [82145 82190])
            ("declare-function" code nil nil [82191 82284])
            ("declare-function" code nil nil [82285 82379])
            ("declare-function" code nil nil [82380 82434])
            ("x-display-name" variable nil nil [82435 82458])
            ("x-handle-named-frame-geometry" function (:arguments ("parameters")) nil [82460 83355])
            ("x-handle-reverse-video" function (:arguments ("frame" "parameters")) nil [83358 84364])
            ("declare-function" code nil nil [84366 84416])
            ("declare-function" code nil nil [84417 84483])
            ("x-create-frame-with-faces" function (:arguments ("parameters")) nil [84485 85686])
            ("face-set-after-frame-default" function (:arguments ("frame" "parameters")) nil [85688 87085])
            ("tty-handle-reverse-video" function (:arguments ("frame" "parameters")) nil [87087 87763])
            ("tty-create-frame-with-faces" function (:arguments ("parameters")) nil [87766 88525])
            ("tty-find-type" function (:arguments ("pred" "type")) nil [88527 89092])
            ("tty-setup-hook" variable nil nil [89094 89326])
            ("tty-run-terminal-initialization" function (:arguments ("frame" "type" "run-hook")) nil [89328 90901])
            ("tty-set-up-initial-frame-faces" function nil nil [91007 91164])
            ("basic-faces" customgroup (:user-visible-flag t) nil [91335 91410])
            ("default" variable
               (:default-value (quote ((t nil)))
                :type "face")
                nil [91412 91544])
            ("bold" variable
               (:default-value (quote ((t :weight bold)))
                :type "face")
                nil [91546 91625])
            ("italic" variable
               (:default-value (quote ((((supports :slant italic)) :slant italic) (((supports :underline t)) :underline t) (t :slant italic)))
                :type "face")
                nil [91627 91992])
            ("bold-italic" variable
               (:default-value (quote ((t :weight bold :slant italic)))
                :type "face")
                nil [91994 92101])
            ("underline" variable
               (:default-value (quote ((((supports :underline t)) :underline t) (((supports :weight bold)) :weight bold) (t :underline t)))
                :type "face")
                nil [92103 92293])
            ("fixed-pitch" variable
               (:default-value (quote ((t :family "Monospace")))
                :type "face")
                nil [92295 92399])
            ("fixed-pitch-serif" variable
               (:default-value (quote ((t :family "Monospace Serif")))
                :type "face")
                nil [92401 92529])
            ("variable-pitch" variable
               (:default-value (quote ((((type w32)) :family "Arial" :foundry "outline") (t :family "Sans Serif")))
                :type "face")
                nil [92531 93021])
            ("shadow" variable
               (:default-value (quote ((((class color grayscale) (min-colors 88) (background light)) :foreground "grey50") (((class color grayscale) (min-colors 88) (background dark)) :foreground "grey70") (((class color) (min-colors 8) (background light)) :foreground "green") (((class color) (min-colors 8) (background dark)) :foreground "yellow")))
                :type "face")
                nil [93023 93461])
            ("link" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) :foreground "RoyalBlue3" :underline t) (((class color) (background light)) :foreground "blue" :underline t) (((class color) (min-colors 88) (background dark)) :foreground "cyan1" :underline t) (((class color) (background dark)) :foreground "cyan" :underline t) (t :inherit underline)))
                :type "face")
                nil [93463 93930])
            ("link-visited" variable
               (:default-value (quote ((default :inherit link) (((class color) (background light)) :foreground "magenta4") (((class color) (background dark)) :foreground "violet")))
                :type "face")
                nil [93932 94182])
            ("highlight" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) :background "darkseagreen2") (((class color) (min-colors 88) (background dark)) :background "darkolivegreen") (((class color) (min-colors 16) (background light)) :background "darkseagreen2") (((class color) (min-colors 16) (background dark)) :background "darkolivegreen") (((class color) (min-colors 8)) :background "green" :foreground "black") (t :inverse-video t)))
                :type "face")
                nil [94184 94726])
            ("region" variable
               (:default-value (quote ((((class color) (min-colors 88) (background dark)) :background "blue3") (((class color) (min-colors 88) (background light) (type gtk)) :distant-foreground "gtk_selection_fg_color" :background "gtk_selection_bg_color") (((class color) (min-colors 88) (background light) (type ns)) :distant-foreground "ns_selection_fg_color" :background "ns_selection_bg_color") (((class color) (min-colors 88) (background light)) :background "lightgoldenrod2") (((class color) (min-colors 16) (background dark)) :background "blue3") (((class color) (min-colors 16) (background light)) :background "lightgoldenrod2") (((class color) (min-colors 8)) :background "blue" :foreground "white") (((type tty) (class mono)) :inverse-video t) (t :background "gray")))
                :type "face")
                nil [94888 95814])
            ("secondary-selection" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) :background "yellow1") (((class color) (min-colors 88) (background dark)) :background "SkyBlue4") (((class color) (min-colors 16) (background light)) :background "yellow") (((class color) (min-colors 16) (background dark)) :background "SkyBlue4") (((class color) (min-colors 8)) :background "cyan" :foreground "black") (t :inverse-video t)))
                :type "face")
                nil [95816 96364])
            ("trailing-whitespace" variable
               (:default-value (quote ((((class color) (background light)) :background "red1") (((class color) (background dark)) :background "red1") (t :inverse-video t)))
                :type "face")
                nil [96366 96643])
            ("escape-glyph" variable
               (:default-value (quote ((((background dark)) :foreground "cyan") (((type pc)) :foreground "magenta") (t :foreground "brown")))
                :type "face")
                nil [96645 97075])
            ("nobreak-space" variable
               (:default-value (quote ((((class color) (min-colors 88)) :inherit escape-glyph :underline t) (((class color) (min-colors 8)) :background "magenta") (t :inverse-video t)))
                :type "face")
                nil [97077 97337])
            ("mode-line-faces" customgroup (:user-visible-flag t) nil [97339 97456])
            ("mode-line" variable
               (:default-value (quote ((((class color) (min-colors 88)) :box (:line-width -1 :style released-button) :background "grey75" :foreground "black") (t :inverse-video t)))
                :type "face")
                nil [97458 97754])
            ("mode-line-inactive" variable
               (:default-value (quote ((default :inherit mode-line) (((class color) (min-colors 88) (background light)) :weight light :box (:line-width -1 :color "grey75" :style nil) :foreground "grey20" :background "grey90") (((class color) (min-colors 88) (background dark)) :weight light :box (:line-width -1 :color "grey40" :style nil) :foreground "grey80" :background "grey30")))
                :type "face")
                nil [97756 98294])
            ("define-obsolete-face-alias" code nil nil [98295 98369])
            ("mode-line-highlight" variable
               (:default-value (quote ((((class color) (min-colors 88)) :box (:line-width 2 :color "grey40" :style released-button)) (t :inherit highlight)))
                :type "face")
                nil [98371 98645])
            ("define-obsolete-face-alias" code nil nil [98646 98722])
            ("mode-line-emphasis" variable
               (:default-value (quote ((t (:weight bold))))
                :type "face")
                nil [98724 98967])
            ("mode-line-buffer-id" variable
               (:default-value (quote ((t (:weight bold))))
                :type "face")
                nil [98969 99152])
            ("define-obsolete-face-alias" code nil nil [99153 99229])
            ("header-line" variable
               (:default-value (quote ((default :inherit mode-line) (((type tty)) :inverse-video nil :underline t) (((class color grayscale) (background light)) :background "grey90" :foreground "grey20" :box nil) (((class color grayscale) (background dark)) :background "grey20" :foreground "grey90" :box nil) (((class mono) (background light)) :background "white" :foreground "black" :inverse-video nil :box nil :underline t) (((class mono) (background dark)) :background "black" :foreground "white" :inverse-video nil :box nil :underline t)))
                :type "face")
                nil [99231 100567])
            ("vertical-border" variable
               (:default-value (quote ((((type tty)) :inherit mode-line-inactive)))
                :type "face")
                nil [100569 100734])
            ("window-divider" variable
               (:default-value (quote ((t :foreground "gray60")))
                :type "face")
                nil [100736 101204])
            ("window-divider-first-pixel" variable
               (:default-value (quote ((t :foreground "gray80")))
                :type "face")
                nil [101206 101623])
            ("window-divider-last-pixel" variable
               (:default-value (quote ((t :foreground "gray40")))
                :type "face")
                nil [101625 102038])
            ("minibuffer-prompt" variable
               (:default-value (quote ((((background dark)) :foreground "cyan") (((type pc)) :foreground "magenta") (t :foreground "medium blue")))
                :type "face")
                nil [102040 102535])
            ("setq" code nil nil [102537 102648])
            ("fringe" variable
               (:default-value (quote ((((class color) (background light)) :background "grey95") (((class color) (background dark)) :background "grey10") (t :background "gray")))
                :type "face")
                nil [102650 102962])
            ("scroll-bar" variable
               (:default-value (quote ((t nil)))
                :type "face")
                nil [102964 103102])
            ("border" variable
               (:default-value (quote ((t nil)))
                :type "face")
                nil [103104 103233])
            ("cursor" variable
               (:default-value (quote ((((background light)) :background "black") (((background dark)) :background "white")))
                :type "face")
                nil [103235 103685])
            ("put" code nil nil [103687 103719])
            ("mouse" variable
               (:default-value (quote ((t nil)))
                :type "face")
                nil [103721 103847])
            ("tool-bar" variable
               (:default-value (quote ((default :box (:line-width 1 :style released-button) :foreground "black") (((type x w32 ns) (class color)) :background "grey75") (((type x) (class mono)) :background "grey")))
                :type "face")
                nil [103849 104139])
            ("menu" variable
               (:default-value (quote ((((type tty)) :inverse-video t) (((type x-toolkit))) (t :inverse-video t)))
                :type "face")
                nil [104141 104385])
            ("help-argument-name" variable
               (:default-value (quote ((t :inherit italic)))
                :type "face")
                nil [104387 104509])
            ("glyphless-char" variable
               (:default-value (quote ((((type tty)) :inherit underline) (((type pc)) :inherit escape-glyph) (t :height 0.6)))
                :type "face")
                nil [104511 104785])
            ("error" variable
               (:default-value (quote ((default :weight bold) (((class color) (min-colors 88) (background light)) :foreground "Red1") (((class color) (min-colors 88) (background dark)) :foreground "Pink") (((class color) (min-colors 16) (background light)) :foreground "Red1") (((class color) (min-colors 16) (background dark)) :foreground "Pink") (((class color) (min-colors 8)) :foreground "red") (t :inverse-video t)))
                :type "face")
                nil [104787 105317])
            ("warning" variable
               (:default-value (quote ((default :weight bold) (((class color) (min-colors 16)) :foreground "DarkOrange") (((class color)) :foreground "yellow")))
                :type "face")
                nil [105319 105553])
            ("success" variable
               (:default-value (quote ((default :weight bold) (((class color) (min-colors 16) (background light)) :foreground "ForestGreen") (((class color) (min-colors 88) (background dark)) :foreground "Green1") (((class color) (min-colors 16) (background dark)) :foreground "Green") (((class color)) :foreground "green")))
                :type "face")
                nil [105555 105974])
            ("tty-menu-enabled-face" variable
               (:default-value (quote ((t :foreground "yellow" :background "blue" :weight bold)))
                :type "face")
                nil [106000 106172])
            ("tty-menu-disabled-face" variable
               (:default-value (quote ((((class color) (min-colors 16)) :foreground "lightgray" :background "blue") (t :foreground "white" :background "blue")))
                :type "face")
                nil [106174 106420])
            ("tty-menu-selected-face" variable
               (:default-value (quote ((t :background "red")))
                :type "face")
                nil [106422 106569])
            ("paren-showing-faces" customgroup (:user-visible-flag t) nil [106571 106706])
            ("show-paren-match" variable
               (:default-value (quote ((((class color) (background light)) :background "turquoise") (((class color) (background dark)) :background "steelblue3") (((background dark) (min-colors 4)) :background "grey50") (((background light) (min-colors 4)) :background "gray") (t :inherit underline)))
                :type "face")
                nil [106708 107174])
            ("show-paren-mismatch" variable
               (:default-value (quote ((((class color)) (:foreground "white" :background "purple")) (t (:inverse-video t))))
                :type "face")
                nil [107176 107367])
            ("x-font-regexp" variable nil nil [107743 107769])
            ("x-font-regexp-head" variable nil nil [107770 107801])
            ("x-font-regexp-weight" variable nil nil [107802 107835])
            ("x-font-regexp-slant" variable nil nil [107836 107868])
            ("x-font-regexp-weight-subnum" variable
               (:constant-flag t
                :default-value 1)
                nil [107870 107910])
            ("x-font-regexp-slant-subnum" variable
               (:constant-flag t
                :default-value 2)
                nil [107911 107950])
            ("x-font-regexp-swidth-subnum" variable
               (:constant-flag t
                :default-value 3)
                nil [107951 107991])
            ("x-font-regexp-adstyle-subnum" variable
               (:constant-flag t
                :default-value 4)
                nil [107992 108033])
            ("let" code nil nil [108116 109334])
            ("x-resolve-font-name" function (:arguments ("pattern" "face" "frame")) nil [109337 110451])
            ("font-list-limit" variable (:default-value 100) nil [110453 110568])
            ("make-obsolete-variable" code nil nil [110569 110621])
            ("faces" package nil nil [110623 110639]))          
      :file "faces.el.gz"
      :pointmax 110664
      :fsize 28077
      :lastmodtime '(22768 58519 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("read-envvar-name-history" variable nil nil [1441 1478])
            ("read-envvar-name" function (:arguments ("prompt" "mustmatch")) nil [1480 2282])
            ("setenv-history" variable nil nil [2330 2357])
            ("env--substitute-vars-regexp" variable
               (:constant-flag t
                :default-value "\\$\\(?:\\(?1:[[:alnum:]_]+\\)\\|{\\(?1:[^{}]+\\)}\\|\\$\\)")
                nil [2359 2461])
            ("substitute-env-vars" function (:arguments ("string" "when-undefined")) nil [2463 4017])
            ("substitute-env-in-file-name" function (:arguments ("filename")) nil [4019 4401])
            ("setenv-internal" function (:arguments ("env" "variable" "value" "keep-empty")) nil [4403 5395])
            ("setenv" function
               (:user-visible-flag t
                :arguments ("variable" "value" "substitute-env-vars"))
                nil [5465 7868])
            ("getenv" function
               (:user-visible-flag t
                :arguments ("variable" "frame"))
                nil [7870 8920])
            ("env" package nil nil [8922 8936]))          
      :file "env.el.gz"
      :pointmax 8959
      :fsize 3296
      :lastmodtime '(22768 58519 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("reference-point-alist" variable
               (:constant-flag t
                :default-value (quote ((tl . 0) (tc . 1) (tr . 2) (Bl . 3) (Bc . 4) (Br . 5) (bl . 6) (bc . 7) (br . 8) (cl . 9) (cc . 10) (cr . 11) (top-left . 0) (top-center . 1) (top-right . 2) (base-left . 3) (base-center . 4) (base-right . 5) (bottom-left . 6) (bottom-center . 7) (bottom-right . 8) (center-left . 9) (center-center . 10) (center-right . 11) (ml . 3) (mc . 10) (mr . 5) (mid-left . 3) (mid-center . 10) (mid-right . 5))))
                nil [1166 3374])
            ("encode-composition-rule" function (:arguments ("rule")) nil [3392 4587])
            ("decode-composition-rule" function (:arguments ("rule-code")) nil [4794 5460])
            ("encode-composition-components" function (:arguments ("components" "nocopy")) nil [5795 6267])
            ("decode-composition-components" function (:arguments ("components" "nocopy")) nil [6724 7034])
            ("compose-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "components" "modification-func"))
                nil [7036 9255])
            ("decompose-region" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [9257 9629])
            ("compose-string" function (:arguments ("string" "start" "end" "components" "modification-func")) nil [9631 10595])
            ("decompose-string" function (:arguments ("string")) nil [10597 10769])
            ("compose-chars" function (:arguments ("args")) nil [10771 11647])
            ("find-composition" function (:arguments ("pos" "limit" "string" "detail-p")) nil [11649 13597])
            ("compose-chars-after" function (:arguments ("pos" "limit" "object")) nil [13601 15045])
            ("compose-last-chars" function
               (:user-visible-flag t
                :arguments ("args"))
                nil [15047 15958])
            ("global-set-key" code nil nil [15960 16017])
            ("lgstring-header" function (:arguments ("gstring")) nil [16138 16191])
            ("lgstring-set-header" function (:arguments ("gstring" "header")) nil [16192 16263])
            ("lgstring-font" function (:arguments ("gstring")) nil [16264 16333])
            ("lgstring-char" function (:arguments ("gstring" "i")) nil [16334 16410])
            ("lgstring-char-len" function (:arguments ("gstring")) nil [16411 16489])
            ("lgstring-shaped-p" function (:arguments ("gstring")) nil [16490 16545])
            ("lgstring-set-id" function (:arguments ("gstring" "id")) nil [16546 16605])
            ("lgstring-glyph" function (:arguments ("gstring" "i")) nil [16606 16666])
            ("lgstring-glyph-len" function (:arguments ("gstring")) nil [16667 16729])
            ("lgstring-set-glyph" function (:arguments ("gstring" "i" "glyph")) nil [16730 16806])
            ("lglyph-from" function (:arguments ("glyph")) nil [16808 16853])
            ("lglyph-to" function (:arguments ("glyph")) nil [16854 16897])
            ("lglyph-char" function (:arguments ("glyph")) nil [16898 16943])
            ("lglyph-code" function (:arguments ("glyph")) nil [16944 16989])
            ("lglyph-width" function (:arguments ("glyph")) nil [16990 17036])
            ("lglyph-lbearing" function (:arguments ("glyph")) nil [17037 17086])
            ("lglyph-rbearing" function (:arguments ("glyph")) nil [17087 17136])
            ("lglyph-ascent" function (:arguments ("glyph")) nil [17137 17184])
            ("lglyph-descent" function (:arguments ("glyph")) nil [17185 17233])
            ("lglyph-adjustment" function (:arguments ("glyph")) nil [17234 17285])
            ("lglyph-set-from-to" function (:arguments ("glyph" "from" "to")) nil [17287 17380])
            ("lglyph-set-char" function (:arguments ("glyph" "char")) nil [17381 17440])
            ("lglyph-set-code" function (:arguments ("glyph" "code")) nil [17441 17500])
            ("lglyph-set-width" function (:arguments ("glyph" "width")) nil [17501 17563])
            ("lglyph-set-adjustment" function (:arguments ("glyph" "xoff" "yoff" "wadjust")) nil [17564 17697])
            ("lglyph-copy" function (:arguments ("glyph")) nil [17699 17751])
            ("lgstring-insert-glyph" function (:arguments ("gstring" "idx" "glyph")) nil [17753 18252])
            ("compose-glyph-string" function (:arguments ("gstring" "from" "to")) nil [18254 18827])
            ("compose-glyph-string-relative" function (:arguments ("gstring" "from" "to" "gap")) nil [18829 20043])
            ("compose-gstring-for-graphic" function (:arguments ("gstring")) nil [20045 25966])
            ("compose-gstring-for-dotted-circle" function (:arguments ("gstring")) nil [25968 27759])
            ("when" code nil nil [27806 28251])
            ("compose-gstring-for-terminal" function (:arguments ("gstring")) nil [28253 30196])
            ("auto-compose-chars" function (:arguments ("func" "from" "to" "font-object" "string")) nil [30199 31138])
            ("put" code nil nil [31140 31187])
            ("make-variable-buffer-local" code nil nil [31189 31244])
            ("setq-default" code nil nil [31245 31305])
            ("define-minor-mode" code nil nil [31322 31923])
            ("make-variable-buffer-local" code nil nil [31975 32026])
            ("define-minor-mode" code nil nil [32043 32423])
            ("defalias" code nil nil [32425 32483]))          
      :file "composite.el.gz"
      :pointmax 32515
      :fsize 9066
      :lastmodtime '(22768 58519 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("thingatpt" package nil nil [2019 2039])
            ("forward-thing" function (:arguments ("thing" "n")) nil [2075 2590])
            ("bounds-of-thing-at-point" function (:arguments ("thing")) nil [2628 4662])
            ("thing-at-point" function (:arguments ("thing" "no-properties")) nil [4679 5540])
            ("beginning-of-thing" function (:arguments ("thing")) nil [5566 5832])
            ("end-of-thing" function (:arguments ("thing")) nil [5834 6088])
            ("put" code nil nil [6221 6313])
            ("in-string-p" function nil nil [6326 6580])
            ("thing-at-point--end-of-sexp" function nil nil [6582 6844])
            ("define-obsolete-function-alias" code nil nil [6846 6996])
            ("put" code nil nil [6998 7046])
            ("thing-at-point--beginning-of-sexp" function nil nil [7048 7329])
            ("define-obsolete-function-alias" code nil nil [7331 7493])
            ("put" code nil nil [7495 7555])
            ("put" code nil nil [7568 7645])
            ("thing-at-point-bounds-of-list-at-point" function nil nil [7647 8149])
            ("put" code nil nil [8162 8208])
            ("put" code nil nil [8209 8249])
            ("put" code nil nil [8250 8290])
            ("thing-at-point-file-name-chars" variable (:default-value "-~/[:alnum:]_.${}#%,:") nil [8307 8409])
            ("put" code nil nil [8411 8541])
            ("put" code nil nil [8542 8731])
            ("thing-at-point-beginning-of-url-regexp" variable nil nil [8743 8914])
            ("thing-at-point-url-path-regexp" variable (:default-value "[^]	
 \"'<>[^`{}]*[^]	
 \"'<>[^`{}.,;]+") nil [8916 9070])
            ("thing-at-point-short-url-regexp" variable (:default-value (concat "[-A-Za-z0-9]+\\.[-A-Za-z0-9.]+" thing-at-point-url-path-regexp)) nil [9072 9241])
            ("thing-at-point-uri-schemes" variable (:default-value (quote ("aaa://" "about:" "acap://" "apt:" "bzr://" "bzr+ssh://" "attachment:/" "chrome://" "cid:" "content://" "crid://" "cvs://" "data:" "dav:" "dict://" "doi:" "dns:" "dtn:" "feed:" "file:/" "finger://" "fish://" "ftp://" "geo:" "git://" "go:" "gopher://" "h323:" "http://" "https://" "im:" "imap://" "info:" "ipp:" "irc://" "irc6://" "ircs://" "iris.beep:" "jar:" "ldap://" "ldaps://" "magnet:" "mailto:" "mid:" "mtqp://" "mupdate://" "news:" "nfs://" "nntp://" "opaquelocktoken:" "pop://" "pres:" "resource://" "rmi://" "rsync://" "rtsp://" "rtspu://" "service:" "sftp://" "sip:" "sips:" "smb://" "sms:" "snmp://" "soap.beep://" "soap.beeps://" "ssh://" "svn://" "svn+ssh://" "tag:" "tel:" "telnet://" "tftp://" "tip://" "tn3270://" "udp://" "urn:" "uuid:" "vemmi://" "webcal://" "xri://" "xmlrpc.beep://" "xmlrpc.beeps://" "z39.50r://" "z39.50s://" "xmpp:" "fax:" "man:" "mms://" "mmsh://" "modem:" "prospero:" "snews:" "wais://"))) nil [9243 10597])
            ("thing-at-point-markedup-url-regexp" variable (:default-value "<URL:\\([^<>
]+\\)>") nil [10599 10884])
            ("thing-at-point-newsgroup-regexp" variable (:default-value "\\`[[:lower:]]+\\.[-+[:lower:]_0-9.]+\\'") nil [10886 11009])
            ("thing-at-point-newsgroup-heads" variable (:default-value (quote ("alt" "comp" "gnu" "misc" "news" "sci" "soc" "talk"))) nil [11011 11172])
            ("thing-at-point-default-mail-uri-scheme" variable (:default-value "mailto") nil [11174 11343])
            ("put" code nil nil [11345 11420])
            ("thing-at-point-bounds-of-url-at-point" function (:arguments ("lax")) nil [11422 12623])
            ("thing-at-point--bounds-of-markedup-url" function nil nil [12625 13134])
            ("thing-at-point--bounds-of-well-formed-url" function (:arguments ("beg" "end" "pt")) nil [13136 14413])
            ("put" code nil nil [14415 14470])
            ("thing-at-point-url-at-point" function (:arguments ("lax" "bounds")) nil [14472 16906])
            ("thing-at-point-newsgroup-p" function (:arguments ("string")) nil [16908 17801])
            ("put" code nil nil [17803 17853])
            ("put" code nil nil [17855 17911])
            ("thing-at-point-looking-at" function (:arguments ("regexp" "distance")) nil [18316 19837])
            ("thing-at-point-email-regexp" variable (:default-value "<?[-+_.~a-zA-Z][-+_.~:a-zA-Z0-9]*@[-.a-zA-Z0-9]+>?") nil [19860 20105])
            ("put" code nil nil [20348 20641])
            ("put" code nil nil [20643 20881])
            ("put" code nil nil [20895 20952])
            ("put" code nil nil [20953 21016])
            ("word-at-point" function nil nil [21031 21133])
            ("sentence-at-point" function nil nil [21135 21249])
            ("thing-at-point--read-from-whole-string" function (:arguments ("str")) nil [21251 21720])
            ("define-obsolete-function-alias" code nil nil [21722 21894])
            ("form-at-point" function (:arguments ("thing" "pred")) nil [21896 22103])
            ("sexp-at-point" function nil nil [22120 22223])
            ("symbol-at-point" function nil nil [22239 22395])
            ("number-at-point" function nil nil [22411 22527])
            ("put" code nil nil [22528 22574])
            ("list-at-point" function nil nil [22590 22705]))          
      :file "thingatpt.el.gz"
      :pointmax 22734
      :fsize 7359
      :lastmodtime '(22768 58519 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("internal--before-save-selected-window" function nil nil [962 1995])
            ("internal--after-save-selected-window" function (:arguments ("state")) nil [1997 2294])
            ("save-selected-window" function (:arguments ("body")) nil [2296 3334])
            ("temp-buffer-window-setup-hook" variable nil nil [3336 3537])
            ("temp-buffer-window-show-hook" variable nil nil [3539 3760])
            ("temp-buffer-window-setup" function (:arguments ("buffer-or-name")) nil [3762 4376])
            ("temp-buffer-window-show" function (:arguments ("buffer" "action")) nil [4378 5622])
            ("with-temp-buffer-window" function (:arguments ("buffer-or-name" "action" "quit-function" "body")) nil [5624 8206])
            ("with-current-buffer-window" function (:arguments ("buffer-or-name" "action" "quit-function" "body")) nil [8208 9097])
            ("with-displayed-buffer-window" function (:arguments ("buffer-or-name" "action" "quit-function" "body")) nil [9099 10679])
            ("window-right" function (:arguments ("window")) nil [10986 11198])
            ("window-left" function (:arguments ("window")) nil [11200 11410])
            ("window-child" function (:arguments ("window")) nil [11412 11567])
            ("window-child-count" function (:arguments ("window")) nil [11569 11865])
            ("window-last-child" function (:arguments ("window")) nil [11867 12134])
            ("window-normalize-buffer" function (:arguments ("buffer-or-name")) nil [12136 12630])
            ("window-normalize-frame" function (:arguments ("frame")) nil [12632 12885])
            ("window-normalize-window" function (:arguments ("window" "live-only")) nil [12887 13442])
            ("frame-char-size" function (:arguments ("window-or-frame" "horizontal")) nil [13481 14253])
            ("ignore-window-parameters" variable nil nil [14255 14599])
            ("window-safe-min-height" variable
               (:constant-flag t
                :default-value 1)
                nil [14649 14773])
            ("window-safe-min-pixel-height" function (:arguments ("window")) nil [14775 14971])
            ("window-min-height" variable (:default-value 4) nil [14973 15676])
            ("window-min-pixel-height" function (:arguments ("window")) nil [15678 15865])
            ("window-safe-min-width" variable
               (:constant-flag t
                :default-value 2)
                nil [15915 16038])
            ("window-safe-min-pixel-width" function (:arguments ("window")) nil [16040 16235])
            ("window-min-width" variable (:default-value 10) nil [16237 16936])
            ("window-min-pixel-width" function (:arguments ("window")) nil [16938 17123])
            ("window-safe-min-pixel-size" function (:arguments ("window" "horizontal")) nil [17125 17442])
            ("window-min-pixel-size" function (:arguments ("window" "horizontal")) nil [17444 17728])
            ("window-combined-p" function (:arguments ("window" "horizontal")) nil [17730 18362])
            ("window-combination-p" function (:arguments ("window" "horizontal")) nil [18364 18790])
            ("window-combinations" function (:arguments ("window" "horizontal")) nil [18792 19899])
            ("walk-window-tree-1" function (:arguments ("fun" "walk-window-tree-window" "any" "sub-only")) nil [19901 20613])
            ("walk-window-tree" function (:arguments ("fun" "frame" "any" "minibuf")) nil [20615 21838])
            ("walk-window-subtree" function (:arguments ("fun" "window" "any")) nil [21840 22491])
            ("window-with-parameter" function (:arguments ("parameter" "value" "frame" "any" "minibuf")) nil [22493 23451])
            ("window-atom-root" function (:arguments ("window")) nil [23473 23893])
            ("window-make-atom" function (:arguments ("window")) nil [23895 24283])
            ("display-buffer-in-atom-window" function (:arguments ("buffer" "alist")) nil [24285 26730])
            ("window--atom-check-1" function (:arguments ("window")) nil [26732 27620])
            ("window--atom-check" function (:arguments ("frame")) nil [27622 28010])
            ("window-sides" variable (:default-value (quote (left top right bottom))) nil [28029 28093])
            ("window-sides-vertical" variable nil nil [28095 28301])
            ("window-sides-slots" variable (:default-value (quote (nil nil nil nil))) nil [28303 29724])
            ("window--side-window-p" function (:arguments ("window")) nil [29726 30046])
            ("window--major-non-side-window" function (:arguments ("frame")) nil [30048 31104])
            ("window--major-side-window" function (:arguments ("side")) nil [31106 32776])
            ("display-buffer-in-major-side-window" function (:arguments ("buffer" "side" "slot" "alist")) nil [32778 34830])
            ("delete-side-window" function (:arguments ("window")) nil [34832 35050])
            ("display-buffer-in-side-window" function (:arguments ("buffer" "alist")) nil [35052 40055])
            ("window--side-check" function (:arguments ("frame")) nil [40057 42561])
            ("window--check" function (:arguments ("frame")) nil [42563 42742])
            ("window--dump-window" function (:arguments ("window" "erase")) nil [42778 44622])
            ("window--dump-frame" function (:arguments ("window-or-frame")) nil [44624 46245])
            ("window-total-size" function (:arguments ("window" "horizontal" "round")) nil [46265 47213])
            ("window-size" function (:arguments ("window" "horizontal" "pixelwise" "round")) nil [47215 48019])
            ("window-size-fixed" variable nil nil [48021 48458])
            ("make-variable-buffer-local" code nil nil [48459 48506])
            ("window--preservable-size" function (:arguments ("window" "horizontal")) nil [48508 48934])
            ("window-preserve-size" function (:arguments ("window" "horizontal" "preserve")) nil [48936 50340])
            ("window-preserved-size" function (:arguments ("window" "horizontal")) nil [50342 50880])
            ("window--preserve-size" function (:arguments ("window" "horizontal")) nil [50882 51242])
            ("window-safe-min-size" function (:arguments ("window" "horizontal" "pixelwise")) nil [51244 51949])
            ("window-min-size" function (:arguments ("window" "horizontal" "ignore" "pixelwise")) nil [51951 52519])
            ("window--min-size-ignore-p" function (:arguments ("window" "horizontal" "ignore")) nil [52521 52853])
            ("window--min-size-1" function (:arguments ("window" "horizontal" "ignore" "pixelwise")) nil [52855 56690])
            ("window-sizable" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [56692 58062])
            ("window-sizable-p" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [58064 58569])
            ("window--size-fixed-1" function (:arguments ("window" "horizontal" "ignore")) nil [58571 59896])
            ("window-size-fixed-p" function (:arguments ("window" "horizontal" "ignore")) nil [59898 60546])
            ("window--min-delta-1" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "noup" "pixelwise")) nil [60548 61890])
            ("window-min-delta" function (:arguments ("window" "horizontal" "ignore" "trail" "noup" "nodown" "pixelwise")) nil [61892 63675])
            ("frame-windows-min-size" function (:arguments ("frame" "horizontal" "ignore" "pixelwise")) nil [63677 64286])
            ("window--max-delta-1" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "noup" "pixelwise")) nil [64288 65588])
            ("window-max-delta" function (:arguments ("window" "horizontal" "ignore" "trail" "noup" "nodown" "pixelwise")) nil [65590 67036])
            ("window--resizable" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "noup" "nodown" "pixelwise")) nil [67084 68893])
            ("window--resizable-p" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "noup" "nodown" "pixelwise")) nil [68895 69553])
            ("window-resizable" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [69555 71067])
            ("window-resizable-p" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [71069 71625])
            ("defalias" code nil nil [71672 71718])
            ("defalias" code nil nil [71719 71762])
            ("window-full-height-p" function (:arguments ("window")) nil [71764 72302])
            ("window-full-width-p" function (:arguments ("window")) nil [72304 72736])
            ("window-body-size" function (:arguments ("window" "horizontal" "pixelwise")) nil [72738 73269])
            ("declare-function" code nil nil [73271 73331])
            ("window-font-width" function (:arguments ("window" "face")) nil [73333 73963])
            ("window-font-height" function (:arguments ("window" "face")) nil [73965 74528])
            ("overflow-newline-into-fringe" variable nil nil [74530 74567])
            ("window-max-chars-per-line" function (:arguments ("window" "face")) nil [74569 76083])
            ("window-current-scroll-bars" function (:arguments ("window")) nil [76085 77056])
            ("walk-windows" function (:arguments ("fun" "minibuf" "all-frames")) nil [77058 78940])
            ("window-at-side-p" function (:arguments ("window" "side")) nil [78942 79519])
            ("window-at-side-list" function (:arguments ("frame" "side")) nil [79521 80039])
            ("window--in-direction-2" function (:arguments ("window" "posn" "horizontal")) nil [80041 80431])
            ("window-in-direction" function (:arguments ("direction" "window" "ignore" "sign" "wrap" "mini")) nil [80726 86224])
            ("get-window-with-predicate" function (:arguments ("predicate" "minibuf" "all-frames" "default")) nil [86226 87847])
            ("defalias" code nil nil [87849 87899])
            ("get-lru-window" function (:arguments ("all-frames" "dedicated" "not-selected")) nil [87901 89552])
            ("get-mru-window" function (:arguments ("all-frames" "dedicated" "not-selected")) nil [89554 90824])
            ("get-largest-window" function (:arguments ("all-frames" "dedicated" "not-selected")) nil [90826 92119])
            ("get-buffer-window-list" function (:arguments ("buffer-or-name" "minibuf" "all-frames")) nil [92121 93689])
            ("minibuffer-window-active-p" function (:arguments ("window")) nil [93691 93841])
            ("count-windows" function (:arguments ("minibuf")) nil [93843 94136])
            ("window--size-to-pixel" function (:arguments ("window" "size" "horizontal" "pixelwise" "round-maybe")) nil [94161 95111])
            ("window--pixel-to-total-1" function (:arguments ("window" "horizontal" "char-size")) nil [95113 96737])
            ("window--pixel-to-total" function (:arguments ("frame" "horizontal")) nil [96739 98654])
            ("window--resize-reset" function (:arguments ("frame" "horizontal")) nil [98656 99092])
            ("window--resize-reset-1" function (:arguments ("window" "horizontal")) nil [99094 99616])
            ("window--resize-mini-window" function (:arguments ("window" "delta")) nil [99618 100842])
            ("window--resize-apply-p" function (:arguments ("frame" "horizontal")) nil [100844 101250])
            ("window-resize" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [101252 105153])
            ("window-resize-no-error" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [105155 105702])
            ("window--resize-child-windows-skip-p" function (:arguments ("window")) nil [105704 105881])
            ("window--resize-child-windows-normal" function (:arguments ("parent" "horizontal" "window" "this-delta" "trail" "other-delta")) nil [105883 109401])
            ("window--resize-child-windows" function (:arguments ("parent" "delta" "horizontal" "window" "ignore" "trail" "edge" "char-size")) nil [109403 116015])
            ("window--resize-siblings" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "edge" "char-size")) nil [116017 119813])
            ("window--resize-this-window" function (:arguments ("window" "delta" "horizontal" "ignore" "add" "trail" "edge" "char-size")) nil [119815 121718])
            ("window--resize-root-window" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [121720 122553])
            ("window--resize-root-window-vertically" function (:arguments ("window" "delta" "pixelwise")) nil [122555 124476])
            ("window--sanitize-window-sizes" function (:arguments ("frame" "horizontal")) nil [124478 125440])
            ("adjust-window-trailing-edge" function (:arguments ("window" "delta" "horizontal" "pixelwise")) nil [125442 132448])
            ("enlarge-window" function
               (:user-visible-flag t
                :arguments ("delta" "horizontal"))
                nil [132450 134284])
            ("shrink-window" function
               (:user-visible-flag t
                :arguments ("delta" "horizontal"))
                nil [134286 136137])
            ("maximize-window" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [136139 136735])
            ("minimize-window" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [136737 137347])
            ("window-edges" function (:arguments ("window" "body" "absolute" "pixelwise")) nil [137367 140431])
            ("window-body-edges" function (:arguments ("window")) nil [140433 140641])
            ("defalias" code nil nil [140642 140692])
            ("window-pixel-edges" function (:arguments ("window")) nil [140694 140915])
            ("window-body-pixel-edges" function (:arguments ("window")) nil [140917 141158])
            ("defalias" code nil nil [141159 141221])
            ("window-absolute-pixel-edges" function (:arguments ("window")) nil [141223 141450])
            ("window-absolute-body-pixel-edges" function (:arguments ("window")) nil [141452 141704])
            ("defalias" code nil nil [141705 141785])
            ("window-absolute-pixel-position" function (:arguments ("position" "window")) nil [141787 142687])
            ("frame-root-window-p" function (:arguments ("window")) nil [142690 142829])
            ("window--subtree" function (:arguments ("window" "next")) nil [142831 143554])
            ("window-tree" function (:arguments ("frame")) nil [143556 144451])
            ("other-window" function
               (:user-visible-flag t
                :arguments ("count" "all-frames"))
                nil [144454 147085])
            ("one-window-p" function (:arguments ("nomini" "all-frames")) nil [147221 148494])
            ("window-deletable-p" function (:arguments ("window")) nil [148519 149909])
            ("window--in-subtree-p" function (:arguments ("window" "root")) nil [149911 150214])
            ("delete-window" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [150216 153612])
            ("delete-other-windows" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [153614 156065])
            ("delete-other-windows-vertically" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [156067 156693])
            ("record-window-buffer" function (:arguments ("window")) nil [158429 159848])
            ("unrecord-window-buffer" function (:arguments ("window" "buffer")) nil [159850 160349])
            ("set-window-buffer-start-and-point" function (:arguments ("window" "buffer" "start" "point")) nil [160351 161278])
            ("switch-to-visible-buffer" variable (:default-value t) nil [161280 161735])
            ("switch-to-prev-buffer" function
               (:user-visible-flag t
                :arguments ("window" "bury-or-kill"))
                nil [161737 167088])
            ("switch-to-next-buffer" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [167090 170489])
            ("get-next-valid-buffer" function (:arguments ("list" "buffer" "visible-ok" "frame")) nil [170491 171487])
            ("last-buffer" function (:arguments ("buffer" "visible-ok" "frame")) nil [171489 172216])
            ("frame-auto-hide-function" variable (:default-value (function iconify-frame)) nil [172218 172736])
            ("window--delete" function (:arguments ("window" "dedicated-only" "kill")) nil [172738 173578])
            ("bury-buffer" function
               (:user-visible-flag t
                :arguments ("buffer-or-name"))
                nil [173580 174713])
            ("unbury-buffer" function (:user-visible-flag t) nil [174715 174840])
            ("next-buffer" function (:user-visible-flag t) nil [174842 175144])
            ("previous-buffer" function (:user-visible-flag t) nil [175146 175456])
            ("delete-windows-on" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "frame"))
                nil [175458 177212])
            ("replace-buffer-in-windows" function
               (:user-visible-flag t
                :arguments ("buffer-or-name"))
                nil [177214 178246])
            ("quit-restore-window" function (:arguments ("window" "bury-or-kill")) nil [178248 183091])
            ("quit-window" function
               (:user-visible-flag t
                :arguments ("kill" "window"))
                nil [183093 183693])
            ("quit-windows-on" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "kill" "frame"))
                nil [183695 184659])
            ("split-window" function (:arguments ("window" "size" "side" "pixelwise")) nil [184662 196451])
            ("split-window-keep-point" variable (:default-value t) nil [196528 196902])
            ("split-window-below" function
               (:user-visible-flag t
                :arguments ("size"))
                nil [196904 199158])
            ("defalias" code nil nil [199160 199215])
            ("split-window-right" function
               (:user-visible-flag t
                :arguments ("size"))
                nil [199217 200425])
            ("defalias" code nil nil [200427 200484])
            ("balance-windows-2" function (:arguments ("window" "horizontal")) nil [200987 203755])
            ("balance-windows-1" function (:arguments ("window" "horizontal")) nil [203757 204183])
            ("balance-windows" function
               (:user-visible-flag t
                :arguments ("window-or-frame"))
                nil [204185 205442])
            ("window-fixed-size-p" function (:arguments ("window" "direction")) nil [205444 205874])
            ("window-area-factor" variable (:default-value 1) nil [205921 206090])
            ("make-variable-buffer-local" code nil nil [206091 206139])
            ("balance-windows-area-adjust" function (:arguments ("window" "delta" "horizontal" "pixelwise")) nil [206141 206795])
            ("balance-windows-area" function (:user-visible-flag t) nil [206797 211153])
            ("window--state-get-1" function (:arguments ("window" "writable")) nil [211223 214018])
            ("window-state-get" function (:arguments ("window" "writable")) nil [214020 216109])
            ("window-state-put-list" variable nil nil [216111 216189])
            ("window-state-put-stale-windows" variable nil nil [216191 216278])
            ("window--state-put-1" function (:arguments ("state" "window" "ignore" "totals" "pixelwise")) nil [216280 218982])
            ("window--state-put-2" function (:arguments ("ignore" "pixelwise")) nil [218984 222760])
            ("window-state-put" function (:arguments ("state" "window" "ignore")) nil [222762 226878])
            ("display-buffer-record-window" function (:arguments ("type" "window" "buffer")) nil [226881 229398])
            ("display-buffer-function" variable nil nil [229400 229956])
            ("make-obsolete-variable" code nil nil [229958 230039])
            ("pop-up-frame-alist" variable nil nil [230220 230836])
            ("pop-up-frame-function" variable (:default-value (lambda nil (make-frame pop-up-frame-alist))) nil [230838 231167])
            ("special-display-buffer-names" variable nil nil [231169 233759])
            ("make-obsolete-variable" code nil nil [233760 233843])
            ("put" code nil nil [233844 233903])
            ("special-display-regexps" variable nil nil [233905 236547])
            ("make-obsolete-variable" code nil nil [236548 236626])
            ("put" code nil nil [236627 236681])
            ("special-display-p" function (:arguments ("buffer-name")) nil [236683 237578])
            ("special-display-frame-alist" variable (:default-value (quote ((height . 14) (width . 80) (unsplittable . t)))) nil [237580 238198])
            ("make-obsolete-variable" code nil nil [238199 238281])
            ("special-display-popup-frame" function (:arguments ("buffer" "args")) nil [238283 240303])
            ("special-display-function" variable (:default-value (quote special-display-popup-frame)) nil [240305 241103])
            ("make-obsolete-variable" code nil nil [241104 241183])
            ("same-window-buffer-names" variable nil nil [241185 241757])
            ("same-window-regexps" variable nil nil [241759 242347])
            ("same-window-p" function (:arguments ("buffer-name")) nil [242349 243320])
            ("pop-up-frames" variable nil nil [243322 243734])
            ("display-buffer-reuse-frames" variable nil nil [243736 243965])
            ("make-obsolete-variable" code nil nil [243967 244095])
            ("pop-up-windows" variable (:default-value t) nil [244097 244221])
            ("split-window-preferred-function" variable (:default-value (quote split-window-sensibly)) nil [244223 245606])
            ("split-height-threshold" variable (:default-value 80) nil [245608 246134])
            ("split-width-threshold" variable (:default-value 160) nil [246136 246524])
            ("window-splittable-p" function (:arguments ("window" "horizontal")) nil [246526 248846])
            ("split-window-sensibly" function (:arguments ("window")) nil [248848 251233])
            ("window--try-to-split-window" function (:arguments ("window" "alist")) nil [251235 252345])
            ("window--frame-usable-p" function (:arguments ("frame")) nil [252347 253289])
            ("even-window-sizes" variable (:default-value t) nil [253291 253814])
            ("defvaralias" code nil nil [253815 253868])
            ("window--even-window-sizes" function (:arguments ("window")) nil [253870 254875])
            ("window--display-buffer" function (:arguments ("buffer" "window" "type" "alist" "dedicated")) nil [254877 257786])
            ("window--maybe-raise-frame" function (:arguments ("frame")) nil [257788 258212])
            ("display-buffer-mark-dedicated" variable nil nil [258551 258760])
            ("display-buffer--action-function-custom-type" variable
               (:constant-flag t
                :default-value (quote (choice :tag "Function" (const :tag "--" ignore) (const display-buffer-reuse-window) (const display-buffer-pop-up-window) (const display-buffer-same-window) (const display-buffer-pop-up-frame) (const display-buffer-below-selected) (const display-buffer-at-bottom) (const display-buffer-in-previous-window) (const display-buffer-use-some-window) (const display-buffer-use-some-frame) (function :tag "Other function"))))
                nil [258762 259359])
            ("display-buffer--action-custom-type" variable
               (:constant-flag t
                :default-value (\` (cons :tag "Action" (choice :tag "Action functions" (\, display-buffer--action-function-custom-type) (repeat :tag "List of functions" (\, display-buffer--action-function-custom-type))) (alist :tag "Action arguments" :key-type symbol :value-type (sexp :tag "Value")))))
                nil [259361 259736])
            ("display-buffer-overriding-action" variable (:default-value (quote (nil))) nil [259738 260073])
            ("put" code nil nil [260074 260137])
            ("display-buffer-alist" variable nil nil [260139 261150])
            ("display-buffer-base-action" variable (:default-value (quote (nil))) nil [261152 261576])
            ("display-buffer-fallback-action" variable
               (:constant-flag t
                :default-value (quote ((display-buffer--maybe-same-window display-buffer-reuse-window display-buffer--maybe-pop-up-frame-or-window display-buffer-in-previous-window display-buffer-use-some-window display-buffer-pop-up-frame))))
                nil [261578 262162])
            ("put" code nil nil [262163 262224])
            ("display-buffer-assq-regexp" function (:arguments ("buffer-name" "alist" "action")) nil [262226 262649])
            ("display-buffer--same-window-action" variable (:default-value (quote (display-buffer-same-window (inhibit-same-window)))) nil [262651 262823])
            ("put" code nil nil [262824 262889])
            ("display-buffer--other-frame-action" variable (:default-value (quote ((display-buffer-reuse-window display-buffer-pop-up-frame) (reusable-frames . 0) (inhibit-same-window . t)))) nil [262891 263121])
            ("put" code nil nil [263122 263187])
            ("display-buffer" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "action" "frame"))
                nil [263189 269137])
            ("display-buffer-other-frame" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [269139 269472])
            ("display-buffer-use-some-frame" function (:arguments ("buffer" "alist")) nil [269514 271014])
            ("display-buffer-same-window" function (:arguments ("buffer" "alist")) nil [271016 271501])
            ("display-buffer--maybe-same-window" function (:arguments ("buffer" "alist")) nil [271503 271844])
            ("display-buffer-reuse-window" function (:arguments ("buffer" "alist")) nil [271846 273492])
            ("display-buffer--special-action" function (:arguments ("buffer")) nil [273494 274245])
            ("display-buffer-pop-up-frame" function (:arguments ("buffer" "alist")) nil [274247 275267])
            ("display-buffer-pop-up-window" function (:arguments ("buffer" "alist")) nil [275269 276583])
            ("display-buffer--maybe-pop-up-frame-or-window" function (:arguments ("buffer" "alist")) nil [276585 277171])
            ("display-buffer-below-selected" function (:arguments ("buffer" "alist")) nil [277173 278022])
            ("display-buffer-at-bottom" function (:arguments ("buffer" "alist")) nil [278024 279561])
            ("display-buffer-in-previous-window" function (:arguments ("buffer" "alist")) nil [279563 281850])
            ("display-buffer-use-some-window" function (:arguments ("buffer" "alist")) nil [281852 283593])
            ("display-buffer-no-window" function (:arguments ("_buffer" "alist")) nil [283595 284050])
            ("pop-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer" "action" "norecord"))
                nil [284086 285618])
            ("pop-to-buffer-same-window" function (:arguments ("buffer" "norecord")) nil [285620 286254])
            ("read-buffer-to-switch" function (:arguments ("prompt")) nil [286256 287400])
            ("window-normalize-buffer-to-switch-to" function (:arguments ("buffer-or-name")) nil [287402 287958])
            ("switch-to-buffer-preserve-window-point" variable nil nil [287960 288849])
            ("switch-to-buffer-in-dedicated-window" variable nil nil [288851 289641])
            ("switch-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "norecord" "force-same-window"))
                nil [289643 293386])
            ("switch-to-buffer-other-window" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "norecord"))
                nil [293388 294420])
            ("switch-to-buffer-other-frame" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "norecord"))
                nil [294422 295434])
            ("set-window-text-height" function (:arguments ("window" "height")) nil [295437 296410])
            ("enlarge-window-horizontally" function
               (:user-visible-flag t
                :arguments ("delta"))
                nil [296412 296627])
            ("shrink-window-horizontally" function
               (:user-visible-flag t
                :arguments ("delta"))
                nil [296629 296848])
            ("count-screen-lines" function (:arguments ("beg" "end" "count-final-newline" "window")) nil [296850 298251])
            ("window-buffer-height" function (:arguments ("window")) nil [298253 298731])
            ("fit-window-to-buffer-horizontally" variable nil nil [298796 299190])
            ("fit-frame-to-buffer" variable nil nil [299304 299753])
            ("fit-frame-to-buffer-margins" variable (:default-value (quote (nil nil nil nil))) nil [299755 300969])
            ("fit-frame-to-buffer-sizes" variable (:default-value (quote (nil nil nil nil))) nil [300971 302260])
            ("declare-function" code nil nil [302262 302333])
            ("window--sanitize-margin" function (:arguments ("margin" "left" "right")) nil [302335 302539])
            ("declare-function" code nil nil [302541 302613])
            ("fit-frame-to-buffer" function
               (:user-visible-flag t
                :arguments ("frame" "max-height" "min-height" "max-width" "min-width" "only"))
                nil [302615 311275])
            ("fit-window-to-buffer" function
               (:user-visible-flag t
                :arguments ("window" "max-height" "min-height" "max-width" "min-width" "preserve-size"))
                nil [311277 317764])
            ("window-safely-shrinkable-p" function (:arguments ("window")) nil [317766 318147])
            ("shrink-window-if-larger-than-buffer" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [318149 319257])
            ("kill-buffer-and-window" function (:user-visible-flag t) nil [319260 320082])
            ("window-group-start-function" variable nil nil [320502 320542])
            ("make-variable-buffer-local" code nil nil [320543 320600])
            ("put" code nil nil [320601 320654])
            ("window-group-start" function (:arguments ("window")) nil [320655 321154])
            ("window-group-end-function" variable nil nil [321156 321194])
            ("make-variable-buffer-local" code nil nil [321195 321250])
            ("put" code nil nil [321251 321302])
            ("window-group-end" function (:arguments ("window" "update")) nil [321303 322109])
            ("set-window-group-start-function" variable nil nil [322111 322155])
            ("make-variable-buffer-local" code nil nil [322156 322217])
            ("put" code nil nil [322218 322275])
            ("set-window-group-start" function (:arguments ("window" "pos" "noforce")) nil [322276 322917])
            ("recenter-window-group-function" variable nil nil [322919 322962])
            ("make-variable-buffer-local" code nil nil [322963 323023])
            ("put" code nil nil [323024 323080])
            ("recenter-window-group" function (:arguments ("arg")) nil [323081 324251])
            ("pos-visible-in-window-group-p-function" variable nil nil [324253 324304])
            ("make-variable-buffer-local" code nil nil [324305 324373])
            ("put" code nil nil [324374 324438])
            ("pos-visible-in-window-group-p" function (:arguments ("pos" "window" "partially")) nil [324439 325915])
            ("selected-window-group-function" variable nil nil [325917 325960])
            ("make-variable-buffer-local" code nil nil [325961 326021])
            ("put" code nil nil [326022 326078])
            ("selected-window-group" function nil nil [326079 326429])
            ("move-to-window-group-line-function" variable nil nil [326431 326478])
            ("make-variable-buffer-local" code nil nil [326479 326543])
            ("put" code nil nil [326544 326604])
            ("move-to-window-group-line" function (:arguments ("arg")) nil [326605 327203])
            ("recenter-last-op" variable nil nil [327207 327432])
            ("recenter-positions" variable (:default-value (quote (middle top bottom))) nil [327434 328294])
            ("recenter-top-bottom" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [328296 329443])
            ("define-key" code nil nil [329445 329497])
            ("move-to-window-line-top-bottom" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [329499 330633])
            ("define-key" code nil nil [330635 330698])
            ("scroll-error-top-bottom" variable nil nil [330868 331312])
            ("scroll-up-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [331314 332377])
            ("put" code nil nil [332379 332421])
            ("scroll-down-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [332423 333490])
            ("put" code nil nil [333492 333536])
            ("scroll-up-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [333606 333889])
            ("put" code nil nil [333891 333930])
            ("scroll-down-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [333932 334217])
            ("put" code nil nil [334219 334260])
            ("scroll-other-window-down" function
               (:user-visible-flag t
                :arguments ("lines"))
                nil [334264 334659])
            ("beginning-of-buffer-other-window" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [334661 335345])
            ("end-of-buffer-other-window" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [335347 335850])
            ("mouse-autoselect-window-timer" variable nil nil [335853 335943])
            ("mouse-autoselect-window-position-1" variable nil nil [335945 336059])
            ("mouse-autoselect-window-position" variable nil nil [336061 336172])
            ("mouse-autoselect-window-window" variable nil nil [336174 336275])
            ("mouse-autoselect-window-state" variable nil nil [336277 336574])
            ("mouse-autoselect-window-cancel" function (:arguments ("force")) nil [336576 337347])
            ("mouse-autoselect-window-start" function (:arguments ("mouse-position" "window" "suspend")) nil [337349 338177])
            ("mouse-autoselect-window-select" function nil nil [338179 341964])
            ("handle-select-window" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [341966 343505])
            ("truncated-partial-width-window-p" function (:arguments ("window")) nil [343507 344192])
            ("window-adjust-process-window-size-function" variable (:default-value (quote window-adjust-process-window-size-smallest)) nil [344261 345703])
            ("window-adjust-process-window-size" function (:arguments ("reducer" "process" "windows")) nil [345705 346322])
            ("window-adjust-process-window-size-smallest" function (:arguments ("process" "windows")) nil [346324 346622])
            ("window-adjust-process-window-size-largest" function (:arguments ("process" "windows")) nil [346624 346920])
            ("window--process-window-list" function nil nil [346922 348135])
            ("window--adjust-process-windows" function nil nil [348137 348833])
            ("add-hook" code nil nil [348835 348911])
            ("define-key" code nil nil [349002 349043])
            ("define-key" code nil nil [349044 349092])
            ("define-key" code nil nil [349093 349139])
            ("define-key" code nil nil [349140 349186])
            ("define-key" code nil nil [349187 349227])
            ("define-key" code nil nil [349228 349270])
            ("define-key" code nil nil [349271 349326])
            ("define-key" code nil nil [349327 349381])
            ("define-key" code nil nil [349382 349445])
            ("define-key" code nil nil [349446 349489])
            ("define-key" code nil nil [349490 349542]))          
      :file "window.el.gz"
      :pointmax 349568
      :fsize 77566
      :lastmodtime '(22768 58519 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("chistory" customgroup (:user-visible-flag t) nil [1143 1211])
            ("repeat-matching-complex-command" function
               (:user-visible-flag t
                :arguments ("pattern"))
                nil [1228 2398])
            ("default-command-history-filter-garbage" variable (:default-value (quote (command-history-mode list-command-history electric-command-history))) nil [2400 2876])
            ("list-command-history-filter" variable (:default-value (quote default-command-history-filter)) nil [2878 3354])
            ("default-command-history-filter" function (:arguments ("frob")) nil [3356 3591])
            ("list-command-history-max" variable (:default-value 32) nil [3593 3771])
            ("list-command-history" function (:user-visible-flag t) nil [3788 4724])
            ("define-obsolete-variable-alias" code nil nil [4726 4814])
            ("command-history-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map lisp-mode-shared-map) (suppress-keymap map) (define-key map "x" (quote command-history-repeat)) (define-key map "
" (quote next-line)) (define-key map "" (quote next-line)) (define-key map "" (quote previous-line)) map)) nil [4815 5173])
            ("define-derived-mode" code nil nil [5175 5459])
            ("command-history-hook" variable nil nil [5461 5602])
            ("command-history-repeat" function (:user-visible-flag t) nil [5604 5923])
            ("command-history" function (:user-visible-flag t) nil [5940 6655])
            ("chistory" package nil nil [6657 6676]))          
      :file "chistory.el.gz"
      :pointmax 6704
      :fsize 2558
      :lastmodtime '(22768 58519 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("sort" customgroup (:user-visible-flag t) nil [1008 1088])
            ("sort-fold-case" variable nil nil [1090 1213])
            ("sort-subr" function (:arguments ("reverse" "nextrecfun" "endrecfun" "startkeyfun" "endkeyfun" "predicate")) nil [1297 4591])
            ("sort-build-lists" function (:arguments ("nextrecfun" "endrecfun" "startkeyfun" "endkeyfun")) nil [4915 6165])
            ("sort-reorder-buffer" function (:arguments ("sort-lists" "old")) nil [6167 7489])
            ("sort-lines" function
               (:user-visible-flag t
                :arguments ("reverse" "beg" "end"))
                nil [7506 8099])
            ("sort-paragraphs" function
               (:user-visible-flag t
                :arguments ("reverse" "beg" "end"))
                nil [8116 8740])
            ("sort-pages" function
               (:user-visible-flag t
                :arguments ("reverse" "beg" "end"))
                nil [8757 9298])
            ("sort-fields-syntax-table" variable nil nil [9301 9338])
            ("if" code nil nil [9339 9736])
            ("sort-numeric-base" variable (:default-value 10) nil [9738 9854])
            ("sort-numeric-fields" function
               (:user-visible-flag t
                :arguments ("field" "beg" "end"))
                nil [9941 11148])
            ("sort-fields" function
               (:user-visible-flag t
                :arguments ("field" "beg" "end"))
                nil [11964 12690])
            ("sort-fields-1" function (:arguments ("field" "beg" "end" "startkeyfun" "endkeyfun")) nil [12692 13108])
            ("sort-skip-fields" function (:arguments ("n")) nil [13232 14061])
            ("sort-regexp-fields-regexp" variable nil nil [14064 14098])
            ("sort-regexp-record-end" variable nil nil [14099 14130])
            ("sort-regexp-fields-next-record" function nil nil [14349 14765])
            ("sort-regexp-fields" function
               (:user-visible-flag t
                :arguments ("reverse" "record-regexp" "key-regexp" "beg" "end"))
                nil [14782 17208])
            ("sort-columns-subprocess" variable (:default-value t) nil [17212 17246])
            ("sort-columns" function
               (:user-visible-flag t
                :arguments ("reverse" "beg" "end"))
                nil [17263 19999])
            ("reverse-region" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [20016 21185])
            ("delete-duplicate-lines" function
               (:user-visible-flag t
                :arguments ("beg" "end" "reverse" "adjacent" "keep-blanks" "interactive"))
                nil [21202 23592])
            ("sort" package nil nil [23594 23609]))          
      :file "sort.el.gz"
      :pointmax 23633
      :fsize 7199
      :lastmodtime '(22768 58519 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("reveal" customgroup (:user-visible-flag t) nil [1864 1942])
            ("reveal-around-mark" variable (:default-value t) nil [1944 2054])
            ("reveal-open-spots" variable nil nil [2056 2180])
            ("make-variable-buffer-local" code nil nil [2181 2228])
            ("reveal-last-tick" variable nil nil [2230 2259])
            ("make-variable-buffer-local" code nil nil [2260 2306])
            ("reveal-post-command" function nil nil [2324 3721])
            ("reveal-open-new-overlays" function (:arguments ("old-ols")) nil [3723 5912])
            ("reveal-close-old-overlays" function (:arguments ("old-ols")) nil [5914 8233])
            ("reveal-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [remap move-beginning-of-line] (quote beginning-of-line)) (define-key map [remap move-end-of-line] (quote end-of-line)) map)) nil [8235 8550])
            ("define-minor-mode" code nil nil [8567 9255])
            ("define-minor-mode" code nil nil [9272 9891])
            ("reveal" package nil nil [9893 9910]))          
      :file "reveal.el.gz"
      :pointmax 9936
      :fsize 3230
      :lastmodtime '(22768 58519 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [4229 4246])
            ("completion-boundaries" function (:arguments ("string" "collection" "pred" "suffix")) nil [4319 5365])
            ("completion-metadata" function (:arguments ("string" "table" "pred")) nil [5367 6377])
            ("completion--field-metadata" function (:arguments ("field-start")) nil [6379 6610])
            ("completion-metadata-get" function (:arguments ("metadata" "prop")) nil [6612 6688])
            ("completion--some" function (:arguments ("fun" "xs")) nil [6690 7123])
            ("complete-with-action" function (:arguments ("action" "table" "string" "pred")) nil [7125 7651])
            ("completion-table-dynamic" function (:arguments ("fun" "switch-buffer")) nil [7653 9033])
            ("completion-table-with-cache" function (:arguments ("fun" "ignore-case")) nil [9035 9921])
            ("lazy-completion-table" function (:arguments ("var" "fun")) nil [9923 10762])
            ("completion-table-case-fold" function (:arguments ("table" "dont-fold")) nil [10764 11106])
            ("completion-table-subvert" function (:arguments ("table" "s1" "s2")) nil [11108 12674])
            ("completion-table-with-context" function (:arguments ("prefix" "table" "string" "pred" "action")) nil [12676 13960])
            ("completion-table-with-terminator" function (:arguments ("terminator" "table" "string" "pred" "action")) nil [13962 17214])
            ("completion-table-with-predicate" function (:arguments ("table" "pred1" "strict" "string" "pred2" "action")) nil [17216 18698])
            ("completion-table-in-turn" function (:arguments ("tables")) nil [18700 19199])
            ("completion-table-merge" function (:arguments ("tables")) nil [19201 20218])
            ("completion-table-with-quoting" function (:arguments ("table" "unquote" "requote")) nil [20220 27749])
            ("completion--twq-try" function (:arguments ("string" "ustring" "completion" "point" "unquote" "requote")) nil [27751 28997])
            ("completion--string-equal-p" function (:arguments ("s1" "s2")) nil [28999 29103])
            ("completion--twq-all" function (:arguments ("string" "ustring" "completions" "boundary" "_unquote" "requote")) nil [29105 32733])
            ("define-obsolete-function-alias" code nil nil [32884 32969])
            ("define-obsolete-function-alias" code nil nil [32970 33063])
            ("minibuffer" customgroup (:user-visible-flag t) nil [33092 33232])
            ("minibuffer-message" function (:arguments ("message" "args")) nil [33234 35295])
            ("minibuffer-completion-contents" function nil nil [35297 35553])
            ("delete-minibuffer-contents" function (:user-visible-flag t) nil [35555 35912])
            ("completion-show-inline-help" variable (:default-value t) nil [35914 36017])
            ("completion-auto-help" variable (:default-value t) nil [36019 36401])
            ("completion-styles-alist" variable
               (:constant-flag t
                :default-value (quote ((emacs21 completion-emacs21-try-completion completion-emacs21-all-completions "Simple prefix-based completion.
I.e. when completing \"foo_bar\" (where _ is the position of point),
it will consider all completions candidates matching the glob
pattern \"foobar*\".") (emacs22 completion-emacs22-try-completion completion-emacs22-all-completions "Prefix completion that only operates on the text before point.
I.e. when completing \"foo_bar\" (where _ is the position of point),
it will consider all completions candidates matching the glob
pattern \"foo*\" and will add back \"bar\" to the end of it.") (basic completion-basic-try-completion completion-basic-all-completions "Completion of the prefix before point and the suffix after point.
I.e. when completing \"foo_bar\" (where _ is the position of point),
it will consider all completions candidates matching the glob
pattern \"foo*bar*\".") (partial-completion completion-pcm-try-completion completion-pcm-all-completions "Completion of multiple words, each one taken as a prefix.
I.e. when completing \"l-co_h\" (where _ is the position of point),
it will consider all completions candidates matching the glob
pattern \"l*-co*h*\".
Furthermore, for completions that are done step by step in subfields,
the method is applied to all the preceding fields that do not yet match.
E.g. C-x C-f /u/mo/s TAB could complete to /usr/monnier/src.
Additionally the user can use the char \"*\" as a glob pattern.") (substring completion-substring-try-completion completion-substring-all-completions "Completion of the string taken as a substring.
I.e. when completing \"foo_bar\" (where _ is the position of point),
it will consider all completions candidates matching the glob
pattern \"*foo*bar*\".") (initials completion-initials-try-completion completion-initials-all-completions "Completion of acronyms and initialisms.
E.g. can complete M-x lch to list-command-history
and C-x C-f ~/sew to ~/src/emacs/work."))))
                nil [36403 38984])
            ("completion--styles-type" variable
               (:constant-flag t
                :default-value (\` (repeat :tag "insert a new menu to add more styles" (choice (\,@ (mapcar (lambda (x) (list (quote const) (car x))) completion-styles-alist))))))
                nil [38986 39195])
            ("completion--cycling-threshold-type" variable
               (:constant-flag t
                :default-value (quote (choice (const :tag "No cycling" nil) (const :tag "Always cycle" t) (integer :tag "Threshold"))))
                nil [39196 39362])
            ("completion-styles" variable (:default-value (quote (basic partial-completion emacs22))) nil [39364 40268])
            ("completion-category-defaults" variable (:default-value (quote ((buffer (styles basic substring)) (unicode-name (styles basic substring)) (project-file (styles basic substring))))) nil [40270 40869])
            ("completion-category-overrides" variable nil nil [40871 42023])
            ("completion--category-override" function (:arguments ("category" "tag")) nil [42025 42215])
            ("completion--styles" function (:arguments ("metadata")) nil [42217 42491])
            ("completion--nth-completion" function (:arguments ("n" "string" "table" "pred" "point" "metadata")) nil [42493 44215])
            ("completion-try-completion" function (:arguments ("string" "table" "pred" "point" "metadata")) nil [44217 44774])
            ("completion-all-completions" function (:arguments ("string" "table" "pred" "point" "metadata")) nil [44776 45313])
            ("minibuffer--bitset" function (:arguments ("modified" "completions" "exact")) nil [45315 45464])
            ("completion--replace" function (:arguments ("beg" "end" "newtext")) nil [45466 47169])
            ("completion-cycle-threshold" variable nil nil [47171 47601])
            ("completion--cycle-threshold" function (:arguments ("metadata")) nil [47603 47822])
            ("defvar-local" code nil nil [47824 47876])
            ("defvar-local" code nil nil [47877 47939])
            ("completion-cycling" variable nil nil [47940 47971])
            ("completion-fail-discreetly" variable nil nil [47973 48064])
            ("completion--message" function (:arguments ("msg")) nil [48066 48165])
            ("completion--do-completion" function (:arguments ("beg" "end" "try-completion-function" "expect-exact")) nil [48167 54728])
            ("minibuffer-complete" function (:user-visible-flag t) nil [54730 55283])
            ("completion--in-region-1" function (:arguments ("beg" "end")) nil [55285 56468])
            ("completion--cache-all-sorted-completions" function (:arguments ("beg" "end" "comps")) nil [56470 56784])
            ("completion--flush-all-sorted-completions" function (:arguments ("start" "end" "_len")) nil [56786 57231])
            ("completion--metadata" function (:arguments ("string" "base" "md-at-point" "table" "pred")) nil [57233 57679])
            ("completion-all-sorted-completions" function (:arguments ("start" "end")) nil [57681 59834])
            ("minibuffer-force-complete-and-exit" function (:user-visible-flag t) nil [59836 60272])
            ("minibuffer-force-complete" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [60274 63026])
            ("minibuffer-confirm-exit-commands" variable (:default-value (quote (completion-at-point minibuffer-complete minibuffer-complete-word PC-complete PC-complete-word))) nil [63028 63294])
            ("minibuffer-complete-and-exit" function (:user-visible-flag t) nil [63296 64047])
            ("completion-complete-and-exit" function (:arguments ("beg" "end" "exit-function")) nil [64049 64584])
            ("completion--complete-and-exit" function (:arguments ("beg" "end" "exit-function" "completion-function")) nil [64586 67190])
            ("completion--try-word-completion" function (:arguments ("string" "table" "predicate" "point" "md")) nil [67192 72197])
            ("minibuffer-complete-word" function (:user-visible-flag t) nil [72200 72628])
            ("completion-in-region--single-word" function (:arguments ("beg" "end" "collection" "predicate")) nil [72630 73013])
            ("completions-annotations" variable
               (:default-value (quote ((t :inherit italic)))
                :type "face")
                nil [73015 73132])
            ("completions-format" variable (:default-value (quote horizontal)) nil [73134 73530])
            ("completion--insert-strings" function (:arguments ("strings")) nil [73532 77103])
            ("completion-common-substring" variable nil nil [77105 77145])
            ("make-obsolete-variable" code nil nil [77146 77210])
            ("completion-setup-hook" variable nil nil [77212 77549])
            ("completions-first-difference" variable
               (:default-value (quote ((t (:inherit bold))))
                :type "face")
                nil [77551 77717])
            ("completions-common-part" variable
               (:default-value (quote ((t nil)))
                :type "face")
                nil [77719 78022])
            ("completion-hilit-commonality" function (:arguments ("completions" "prefix-len" "base-size")) nil [78024 79902])
            ("display-completion-list" function (:arguments ("completions" "common-substring")) nil [79904 81670])
            ("completion-extra-properties" variable nil nil [81672 82642])
            ("completion-annotate-function" variable nil nil [82644 83527])
            ("make-obsolete-variable" code nil nil [83528 83642])
            ("completion--done" function (:arguments ("string" "finished" "message")) nil [83644 84460])
            ("minibuffer-completion-help" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [84462 90794])
            ("minibuffer-hide-completions" function nil nil [90796 91139])
            ("exit-minibuffer" function (:user-visible-flag t) nil [91141 91622])
            ("self-insert-and-exit" function (:user-visible-flag t) nil [91624 91821])
            ("completion-in-region-functions" variable nil nil [91823 91975])
            ("make-obsolete-variable" code nil nil [91976 92094])
            ("completion-in-region-function" variable (:default-value (function completion--in-region)) nil [92096 92375])
            ("completion-in-region--data" variable nil nil [92377 92416])
            ("completion-in-region-mode-predicate" variable nil nil [92418 92674])
            ("completion-in-region-mode--predicate" variable nil nil [92676 92897])
            ("completion-in-region" function (:arguments ("start" "end" "collection" "predicate")) nil [92899 93516])
            ("read-file-name-completion-ignore-case" variable (:default-value (if (memq system-type (quote (ms-dos windows-nt darwin cygwin))) t nil)) nil [93518 93743])
            ("completion--in-region" function (:arguments ("start" "end" "collection" "predicate")) nil [93745 94829])
            ("completion-in-region-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "\277" (quote completion-help-at-point)) (define-key map "	" (quote completion-at-point)) map)) nil [94831 95183])
            ("completion-in-region--postch" function nil nil [95531 96188])
            ("completion-in-region-mode" variable nil nil [96264 96302])
            ("define-minor-mode" code nil nil [96340 97516])
            ("setq" code nil nil [97643 97771])
            ("completion-at-point-functions" variable (:default-value (quote (tags-completion-at-point-function))) nil [97773 98880])
            ("completion--capf-misbehave-funs" variable nil nil [98882 99130])
            ("completion--capf-safe-funs" variable nil nil [99131 99361])
            ("completion--capf-wrapper" function (:arguments ("fun" "which")) nil [99363 101286])
            ("completion-at-point" function (:user-visible-flag t) nil [101288 102424])
            ("completion-help-at-point" function (:user-visible-flag t) nil [102426 104192])
            ("let" code nil nil [104213 104377])
            ("minibuffer-local-completion-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-map) (define-key map "	" (quote minibuffer-complete)) (define-key map " " (quote minibuffer-complete-word)) (define-key map "?" (quote minibuffer-completion-help)) map)) nil [104379 104882])
            ("minibuffer-local-must-match-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-completion-map) (define-key map "" (quote minibuffer-complete-and-exit)) (define-key map "
" (quote minibuffer-complete-and-exit)) map)) nil [104884 105213])
            ("minibuffer-local-filename-completion-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map " " nil) map)) nil [105215 105510])
            ("define-obsolete-variable-alias" code nil nil [105512 105637])
            ("minibuffer-local-filename-must-match-map" variable (:default-value (make-sparse-keymap)) nil [105638 105708])
            ("make-obsolete-variable" code nil nil [105709 105786])
            ("let" code nil nil [105788 105951])
            ("minibuffer-inactive-mode-map" variable (:default-value (let ((map (make-keymap))) (suppress-keymap map) (define-key map "e" (quote find-file-other-frame)) (define-key map "f" (quote find-file-other-frame)) (define-key map "b" (quote switch-to-buffer-other-frame)) (define-key map "i" (quote info)) (define-key map "m" (quote mail)) (define-key map "n" (quote make-frame)) (define-key map [mouse-1] (quote view-echo-area-messages)) (define-key map [down-mouse-1] (function ignore)) map)) nil [105953 106729])
            ("define-derived-mode" code nil nil [106731 107058])
            ("minibuffer--double-dollars" function (:arguments ("str")) nil [107084 107340])
            ("completion--make-envvar-table" function nil nil [107342 107508])
            ("completion--embedded-envvar-re" variable
               (:constant-flag t
                :default-value (concat "\\(?:^\\|[^$]\\(?:\\$\\$\\)*\\)" "$\\([[:alnum:]_]*\\|{\\([^}]*\\)\\)\\'"))
                nil [107510 107779])
            ("completion--embedded-envvar-table" function (:arguments ("string" "_pred" "action")) nil [107781 110228])
            ("completion-file-name-table" function (:arguments ("string" "pred" "action")) nil [110230 112958])
            ("read-file-name-predicate" variable nil nil [113017 113111])
            ("make-obsolete-variable" code nil nil [113112 113225])
            ("completion--sifn-requote" function (:arguments ("upos" "qstr")) nil [113227 115610])
            ("defalias" code nil nil [115612 116046])
            ("defalias" code nil nil [116048 116271])
            ("read-file-name-function" variable (:default-value (quote read-file-name-default)) nil [116273 116446])
            ("insert-default-directory" variable (:default-value t) nil [116448 117487])
            ("declare-function" code nil nil [117569 117689])
            ("read-file-name--defaults" function (:arguments ("dir" "initial")) nil [117691 118881])
            ("read-file-name" function (:arguments ("prompt" "dir" "default-filename" "mustmatch" "initial" "predicate")) nil [118883 121967])
            ("minibuffer-local-filename-syntax" variable (:default-value (let ((table (make-syntax-table)) (punctuation (car (string-to-syntax ".")))) (map-char-table (lambda (c syntax) (when (eq (car syntax) punctuation) (modify-syntax-entry c "_" table))) table) (mapc (lambda (c) (modify-syntax-entry c "." table)) (quote (47 58 92))) table)) nil [121969 122441])
            ("read-file-name-default" function (:arguments ("prompt" "dir" "default-filename" "mustmatch" "initial" "predicate")) nil [123031 130258])
            ("internal-complete-buffer-except" function (:arguments ("buffer")) nil [130260 130759])
            ("completion-emacs21-try-completion" function (:arguments ("string" "table" "pred" "_point")) nil [130819 131038])
            ("completion-emacs21-all-completions" function (:arguments ("string" "table" "pred" "_point")) nil [131040 131254])
            ("completion-emacs22-try-completion" function (:arguments ("string" "table" "pred" "point")) nil [131256 132293])
            ("completion-emacs22-all-completions" function (:arguments ("string" "table" "pred" "point")) nil [132295 132567])
            ("completion--merge-suffix" function (:arguments ("completion" "point" "suffix")) nil [132592 133273])
            ("completion-basic--pattern" function (:arguments ("beforepoint" "afterpoint" "bounds")) nil [133275 133470])
            ("completion-basic-try-completion" function (:arguments ("string" "table" "pred" "point")) nil [133472 134752])
            ("completion-basic-all-completions" function (:arguments ("string" "table" "pred" "point")) nil [134754 135437])
            ("completion-pcm--delim-wild-regex" variable nil nil [135486 135938])
            ("completion-pcm--prepare-delim-re" function (:arguments ("delims")) nil [135940 136056])
            ("completion-pcm-word-delimiters" variable (:default-value "-_./:| ") nil [136058 136699])
            ("completion-pcm-complete-word-inserts-delimiters" variable nil nil [136701 137138])
            ("completion-pcm--pattern-trivial-p" function (:arguments ("pattern")) nil [137140 137425])
            ("completion-pcm--string->pattern" function (:arguments ("string" "point")) nil [137427 139884])
            ("completion-pcm--optimize-pattern" function (:arguments ("p")) nil [139886 140821])
            ("completion-pcm--pattern->regex" function (:arguments ("pattern" "group")) nil [140823 141633])
            ("completion-pcm--all-completions" function (:arguments ("prefix" "pattern" "table" "pred")) nil [141635 142888])
            ("completion-pcm--hilit-commonality" function (:arguments ("pattern" "completions")) nil [142890 143690])
            ("completion-pcm--find-all-completions" function (:arguments ("string" "table" "pred" "point" "filter")) nil [143692 148926])
            ("completion-pcm-all-completions" function (:arguments ("string" "table" "pred" "point")) nil [148928 149228])
            ("completion--common-suffix" function (:arguments ("strs")) nil [149230 149377])
            ("completion-pcm--merge-completions" function (:arguments ("strs" "pattern")) nil [149379 154410])
            ("completion-pcm--pattern->string" function (:arguments ("pattern")) nil [154412 154683])
            ("completion-pcm--filename-try-filter" function (:arguments ("all")) nil [155307 155695])
            ("completion-pcm--merge-try" function (:arguments ("pattern" "all" "prefix" "suffix")) nil [155698 157550])
            ("completion-pcm-try-completion" function (:arguments ("string" "table" "pred" "point")) nil [157552 157928])
            ("completion-substring--all-completions" function (:arguments ("string" "table" "pred" "point")) nil [158011 158746])
            ("completion-substring-try-completion" function (:arguments ("string" "table" "pred" "point")) nil [158748 159135])
            ("completion-substring-all-completions" function (:arguments ("string" "table" "pred" "point")) nil [159137 159472])
            ("completion-initials-expand" function (:arguments ("str" "table" "pred")) nil [159567 161268])
            ("completion-initials-all-completions" function (:arguments ("string" "table" "pred" "_point")) nil [161270 161497])
            ("completion-initials-try-completion" function (:arguments ("string" "table" "pred" "_point")) nil [161499 161724])
            ("completing-read-function" variable (:default-value (quote completing-read-default)) nil [161727 161904])
            ("completing-read-default" function (:arguments ("prompt" "collection" "predicate" "require-match" "initial-input" "hist" "def" "inherit-input-method")) nil [161906 163689])
            ("minibuffer-insert-file-name-at-point" function (:user-visible-flag t) nil [163710 164083])
            ("minibuffer" package nil nil [164085 164106]))          
      :file "minibuffer.el.gz"
      :pointmax 164136
      :fsize 43193
      :lastmodtime '(22768 58519 0 0)
      :unmatched-syntax '((close-paren 4246 . 4247) (symbol 4211 . 4228) (open-paren 4210 . 4211)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("wid-edit" include nil nil [4255 4274])
            ("scroll-bar" include nil nil [4276 4297])
            ("fringe" include nil nil [4298 4315])
            ("ruler-mode" customgroup (:user-visible-flag t) nil [4317 4422])
            ("ruler-mode-show-tab-stops" variable nil nil [4424 4819])
            ("ruler-mode-character-validate" function (:arguments ("widget")) nil [4946 5254])
            ("ruler-mode-fill-column-char" variable (:default-value (if (char-displayable-p 182) 182 124)) nil [5256 5649])
            ("ruler-mode-comment-column-char" variable (:default-value 35) nil [5651 5933])
            ("ruler-mode-goal-column-char" variable (:default-value 71) nil [5935 6210])
            ("ruler-mode-current-column-char" variable (:default-value (if (char-displayable-p 166) 166 64)) nil [6212 6617])
            ("ruler-mode-tab-stop-char" variable (:default-value 84) nil [6619 6891])
            ("ruler-mode-basic-graduation-char" variable (:default-value 46) nil [6893 7166])
            ("ruler-mode-inter-graduation-char" variable (:default-value 33) nil [7168 7448])
            ("ruler-mode-set-goal-column-ding-flag" variable (:default-value t) nil [7450 7593])
            ("ruler-mode-default" variable
               (:default-value (quote ((((type tty)) (:inherit default :background "grey64" :foreground "grey50")) (t (:inherit default :background "grey76" :foreground "grey64" :box (:color "grey76" :line-width 1 :style released-button)))))
                :type "face")
                nil [7596 8064])
            ("ruler-mode-pad" variable
               (:default-value (quote ((((type tty)) (:inherit ruler-mode-default :background "grey50")) (t (:inherit ruler-mode-default :background "grey64"))))
                :type "face")
                nil [8066 8356])
            ("ruler-mode-margins" variable
               (:default-value (quote ((t (:inherit ruler-mode-default :foreground "white"))))
                :type "face")
                nil [8358 8543])
            ("ruler-mode-fringes" variable
               (:default-value (quote ((t (:inherit ruler-mode-default :foreground "green"))))
                :type "face")
                nil [8545 8731])
            ("ruler-mode-column-number" variable
               (:default-value (quote ((t (:inherit ruler-mode-default :foreground "black"))))
                :type "face")
                nil [8733 8930])
            ("ruler-mode-fill-column" variable
               (:default-value (quote ((t (:inherit ruler-mode-default :foreground "red"))))
                :type "face")
                nil [8932 9132])
            ("ruler-mode-comment-column" variable
               (:default-value (quote ((t (:inherit ruler-mode-default :foreground "red"))))
                :type "face")
                nil [9134 9340])
            ("ruler-mode-goal-column" variable
               (:default-value (quote ((t (:inherit ruler-mode-default :foreground "red"))))
                :type "face")
                nil [9342 9542])
            ("ruler-mode-tab-stop" variable
               (:default-value (quote ((t (:inherit ruler-mode-default :foreground "steelblue"))))
                :type "face")
                nil [9544 9741])
            ("ruler-mode-current-column" variable
               (:default-value (quote ((t (:inherit ruler-mode-default :weight bold :foreground "yellow"))))
                :type "face")
                nil [9743 9982])
            ("ruler-mode-full-window-width" function nil nil [9986 10147])
            ("ruler-mode-window-col" function (:arguments ("n")) nil [10149 10397])
            ("ruler-mode-mouse-set-left-margin" function
               (:user-visible-flag t
                :arguments ("start-event"))
                nil [10400 11307])
            ("ruler-mode-mouse-set-right-margin" function
               (:user-visible-flag t
                :arguments ("start-event"))
                nil [11309 12260])
            ("ruler-mode-dragged-symbol" variable nil nil [12262 12428])
            ("ruler-mode-mouse-grab-any-column" function
               (:user-visible-flag t
                :arguments ("start-event"))
                nil [12430 15294])
            ("ruler-mode-mouse-drag-any-column-iteration" function (:arguments ("window")) nil [15296 16054])
            ("ruler-mode-mouse-drag-any-column" function (:arguments ("start-event")) nil [16056 16596])
            ("ruler-mode-mouse-add-tab-stop" function
               (:user-visible-flag t
                :arguments ("start-event"))
                nil [16599 17525])
            ("ruler-mode-mouse-del-tab-stop" function
               (:user-visible-flag t
                :arguments ("start-event"))
                nil [17527 18320])
            ("ruler-mode-toggle-show-tab-stops" function (:user-visible-flag t) nil [18322 18521])
            ("ruler-mode-map" variable (:default-value (let ((km (make-sparse-keymap))) (define-key km [header-line down-mouse-1] (function ignore)) (define-key km [header-line down-mouse-3] (function ignore)) (define-key km [header-line down-mouse-2] (function ruler-mode-mouse-grab-any-column)) (define-key km [header-line (shift down-mouse-1)] (function ruler-mode-mouse-set-left-margin)) (define-key km [header-line (shift down-mouse-3)] (function ruler-mode-mouse-set-right-margin)) (define-key km [header-line (control down-mouse-1)] (function ruler-mode-mouse-add-tab-stop)) (define-key km [header-line (control down-mouse-3)] (function ruler-mode-mouse-del-tab-stop)) (define-key km [header-line (control down-mouse-2)] (function ruler-mode-toggle-show-tab-stops)) (define-key km [header-line (shift mouse-1)] (quote ignore)) (define-key km [header-line (shift mouse-3)] (quote ignore)) (define-key km [header-line (control mouse-1)] (quote ignore)) (define-key km [header-line (control mouse-3)] (quote ignore)) (define-key km [header-line (control mouse-2)] (quote ignore)) km)) nil [18524 19642])
            ("ruler-mode-header-line-format-old" variable nil nil [19644 19739])
            ("ruler-mode-ruler-function" variable (:default-value (quote ruler-mode-ruler)) nil [19741 19910])
            ("ruler-mode-header-line-format" variable
               (:constant-flag t
                :default-value (quote (:eval (funcall ruler-mode-ruler-function))))
                nil [19912 20105])
            ("ruler-mode" variable nil nil [20122 20237])
            ("make-variable-buffer-local" code nil nil [20238 20278])
            ("ruler--save-header-line-format" function nil nil [20280 20738])
            ("define-minor-mode" code nil nil [20755 21767])
            ("define-key" code nil nil [21828 21952])
            ("ruler-mode-ruler-help-echo" variable
               (:constant-flag t
                :default-value "S-mouse-1/3: set L/R margin, mouse-2: set goal column, C-mouse-2: show tabs")
                nil [21954 22165])
            ("ruler-mode-ruler-help-echo-when-goal-column" variable
               (:constant-flag t
                :default-value "S-mouse-1/3: set L/R margin, C-mouse-2: show tabs")
                nil [22167 22392])
            ("ruler-mode-ruler-help-echo-when-tab-stops" variable
               (:constant-flag t
                :default-value "C-mouse1/3: set/unset tab, C-mouse-2: hide tabs")
                nil [22394 22594])
            ("ruler-mode-fill-column-help-echo" variable
               (:constant-flag t
                :default-value "drag-mouse-2: set fill column")
                nil [22596 22739])
            ("ruler-mode-comment-column-help-echo" variable
               (:constant-flag t
                :default-value "drag-mouse-2: set comment column")
                nil [22741 22893])
            ("ruler-mode-goal-column-help-echo" variable
               (:constant-flag t
                :default-value "drag-mouse-2: set goal column, mouse-2: unset goal column")
                nil [22895 23070])
            ("ruler-mode-margin-help-echo" variable
               (:constant-flag t
                :default-value "%s margin %S")
                nil [23072 23183])
            ("ruler-mode-fringe-help-echo" variable
               (:constant-flag t
                :default-value "%s fringe %S")
                nil [23185 23296])
            ("ruler-mode-space" function (:arguments ("width" "props")) nil [23298 23555])
            ("ruler-mode-ruler" function nil nil [23558 28246])
            ("ruler-mode" package nil nil [28248 28269]))          
      :file "ruler-mode.el.gz"
      :pointmax 28299
      :fsize 6182
      :lastmodtime '(22768 58519 0 0)
      :unmatched-syntax '((close-paren 4274 . 4275) (symbol 4235 . 4252) (open-paren 4234 . 4235)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("image" customgroup (:user-visible-flag t) nil [865 924])
            ("defalias" code nil nil [926 964])
            ("image-type-header-regexps" variable
               (:constant-flag t
                :default-value (\` (("\\`/[	
 ]*\\*.*XPM.\\*/" . xpm) ("\\`P[1-6]\\(?:\\(?:\\(?:#[^
]*[
]\\)?[[:space:]]\\)+\\(?:\\(?:#[^
]*[
]\\)?[0-9]\\)+\\)\\{2\\}" . pbm) ("\\`GIF8[79]a" . gif) ("\\`\211PNG

" . png) ("\\`[	
 ]*#define \\([a-z0-9_]+\\)_width [0-9]+
#define \\1_height [0-9]+
\\(#define \\1_x_hot [0-9]+
#define \\1_y_hot [0-9]+
\\)?static \\(unsigned \\)?char \\1_bits" . xbm) ("\\`\\(?:MM \\*\\|II\\* \\)" . tiff) ("\\`[	
 ]*%!PS" . postscript) ("\\`\377\330" . jpeg) ((\, (let* ((incomment-re "\\(?:[^-]\\|-[^-]\\)") (comment-re (concat "\\(?:!--" incomment-re "*-->[ 	
]*<\\)"))) (concat "\\(?:<\\?xml[ 	
]+[^>]*>\\)?[ 	
]*<" comment-re "*" "\\(?:!DOCTYPE[ 	
]+[^>]*>[ 	
]*<[ 	
]*" comment-re "*\\)?" "[Ss][Vv][Gg]"))) . svg))))
                nil [966 2289])
            ("image-type-file-name-regexps" variable (:default-value (quote (("\\.png\\'" . png) ("\\.gif\\'" . gif) ("\\.jpe?g\\'" . jpeg) ("\\.bmp\\'" . bmp) ("\\.xpm\\'" . xpm) ("\\.pbm\\'" . pbm) ("\\.xbm\\'" . xbm) ("\\.ps\\'" . postscript) ("\\.tiff?\\'" . tiff) ("\\.svgz?\\'" . svg)))) nil [2291 2750])
            ("image-type-auto-detectable" variable (:default-value (quote ((pbm . t) (xbm) (bmp . maybe) (gif . maybe) (png . maybe) (xpm) (jpeg . maybe) (tiff . maybe) (svg . maybe) (postscript)))) nil [2927 3430])
            ("image-format-suffixes" variable (:default-value (quote ((image/x-icon "ico")))) nil [3432 3947])
            ("image-load-path" variable (:default-value (list (file-name-as-directory (expand-file-name "images" data-directory)) (quote data-directory) (quote load-path))) nil [3949 4568])
            ("image-load-path-for-library" function (:arguments ("library" "image" "path" "no-error")) nil [4571 8618])
            ("image-jpeg-p" function (:arguments ("data")) nil [8714 9502])
            ("image-type-from-data" function (:arguments ("data")) nil [9520 10093])
            ("image-type-from-buffer" function nil nil [10111 10957])
            ("image-type-from-file-header" function (:arguments ("file")) nil [10975 11462])
            ("image-type-from-file-name" function (:arguments ("file")) nil [11480 11988])
            ("image-type" function (:arguments ("source" "type" "data-p")) nil [12005 12878])
            ("if" code nil nil [12881 13030])
            ("define-obsolete-variable-alias" code nil nil [13032 13123])
            ("image-type-available-p" function (:arguments ("type")) nil [13140 13346])
            ("image-type-auto-detected-p" function nil nil [13364 14009])
            ("create-image" function (:arguments ("file-or-data" "type" "data-p" "props")) nil [14027 15125])
            ("put-image" function (:arguments ("image" "pos" "string" "area")) nil [15143 16426])
            ("insert-image" function (:arguments ("image" "string" "area" "slice")) nil [16444 18249])
            ("insert-sliced-image" function (:arguments ("image" "string" "area" "rows" "cols")) nil [18267 19921])
            ("remove-images" function (:arguments ("start" "end" "buffer")) nil [19940 20427])
            ("image-search-load-path" function (:arguments ("file" "path")) nil [20429 21135])
            ("find-image" function (:arguments ("specs")) nil [21152 22465])
            ("defimage" function (:arguments ("symbol" "specs" "doc")) nil [22483 23351])
            ("image-default-frame-delay" variable (:default-value 0.1) nil [23379 23537])
            ("image-multi-frame-p" function (:arguments ("image")) nil [23539 24235])
            ("image-animated-p" function (:arguments ("image")) nil [24237 24417])
            ("make-obsolete" code nil nil [24419 24480])
            ("image-animate" function (:arguments ("image" "index" "limit")) nil [24502 25222])
            ("image-animate-timer" function (:arguments ("image")) nil [25224 25607])
            ("image-minimum-frame-delay" variable
               (:constant-flag t
                :default-value 0.01)
                nil [25609 25719])
            ("image-current-frame" function (:arguments ("image")) nil [25721 25851])
            ("image-show-frame" function (:arguments ("image" "n" "nocheck")) nil [25853 26235])
            ("image-animate-get-speed" function (:arguments ("image")) nil [26237 26365])
            ("image-animate-set-speed" function (:arguments ("image" "value" "multiply")) nil [26367 26701])
            ("image-animate-timeout" function (:arguments ("image" "n" "count" "time-elapsed" "limit")) nil [26910 28465])
            ("imagemagick-types-inhibit" variable nil nil [28469 28503])
            ("imagemagick-enabled-types" variable nil nil [28504 28538])
            ("imagemagick-filter-types" function nil nil [28540 29357])
            ("imagemagick--file-regexp" variable nil nil [29359 29576])
            ("imagemagick-register-types" function nil nil [29593 31085])
            ("imagemagick-types-inhibit" variable (:default-value (quote (C HTML HTM INFO M TXT PDF))) nil [31087 31964])
            ("imagemagick-enabled-types" variable (:default-value (quote (3FR ART ARW AVS BMP BMP2 BMP3 CAL CALS CMYK CMYKA CR2 CRW CUR CUT DCM DCR DCX DDS DJVU DNG DPX EXR FAX FITS GBR GIF GIF87 GRB HRZ ICB ICO ICON J2C JNG JP2 JPC JPEG JPG JPX K25 KDC MIFF MNG MRW MSL MSVG MTV NEF ORF OTB PBM PCD PCDS PCL PCT PCX PDB PEF PGM PICT PIX PJPEG PNG PNG24 PNG32 PNG8 PNM PPM PSD PTIF PWP RAF RAS RBG RGB RGBA RGBO RLA RLE SCR SCT SFW SGI SR2 SRF SUN SVG SVGZ TGA TIFF TIFF64 TILE TIM TTF UYVY VDA VICAR VID VIFF VST WBMP WPG X3F XBM XC XCF XPM XV XWD YCbCr YCbCrA YUV))) nil [31966 33524])
            ("imagemagick-register-types" code nil nil [33526 33554])
            ("image" package nil nil [33556 33572]))          
      :file "image.el.gz"
      :pointmax 33597
      :fsize 10253
      :lastmodtime '(22768 58519 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1049 1066])
            ("abbrev-mode" customgroup (:user-visible-flag t) nil [1069 1183])
            ("abbrev-file-name" variable (:default-value (locate-user-emacs-file "abbrev_defs" ".abbrev_defs")) nil [1185 1375])
            ("only-global-abbrevs" variable nil nil [1377 1628])
            ("define-minor-mode" code nil nil [1630 2058])
            ("put" code nil nil [2060 2109])
            ("edit-abbrevs-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "" (quote abbrev-edit-save-buffer)) (define-key map "" (quote abbrev-edit-save-to-file)) (define-key map "" (quote edit-abbrevs-redefine)) map)) nil [2113 2393])
            ("define-obsolete-variable-alias" code nil nil [2394 2476])
            ("kill-all-abbrevs" function (:user-visible-flag t) nil [2478 2649])
            ("copy-abbrev-table" function (:arguments ("table")) nil [2651 2986])
            ("insert-abbrevs" function (:user-visible-flag t) nil [2988 3274])
            ("list-abbrevs" function
               (:user-visible-flag t
                :arguments ("local"))
                nil [3276 3574])
            ("abbrev-table-name" function (:arguments ("table")) nil [3576 3862])
            ("prepare-abbrev-list-buffer" function (:arguments ("local")) nil [3864 4750])
            ("edit-abbrevs" function (:user-visible-flag t) nil [4752 5695])
            ("edit-abbrevs-redefine" function (:user-visible-flag t) nil [5697 5892])
            ("define-abbrevs" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [5894 6892])
            ("read-abbrev-file" function
               (:user-visible-flag t
                :arguments ("file" "quietly"))
                nil [6894 7411])
            ("quietly-read-abbrev-file" function (:arguments ("file")) nil [7413 7738])
            ("write-abbrev-file" function
               (:user-visible-flag t
                :arguments ("file" "verbose"))
                nil [7740 9499])
            ("abbrev-edit-save-to-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [9501 9821])
            ("abbrev-edit-save-buffer" function (:user-visible-flag t) nil [9823 10056])
            ("add-mode-abbrev" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [10060 10600])
            ("add-global-abbrev" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [10602 11092])
            ("add-abbrev" function (:arguments ("table" "type" "arg")) nil [11094 11687])
            ("inverse-add-mode-abbrev" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [11689 12120])
            ("inverse-add-global-abbrev" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [12122 12465])
            ("inverse-add-abbrev" function (:arguments ("table" "type" "arg")) nil [12467 13078])
            ("abbrev-prefix-mark" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [13080 13741])
            ("expand-region-abbrevs" function
               (:user-visible-flag t
                :arguments ("start" "end" "noquery"))
                nil [13743 14438])
            ("abbrev-table-get" function (:arguments ("table" "prop")) nil [14464 14617])
            ("abbrev-table-put" function (:arguments ("table" "prop" "val")) nil [14619 14844])
            ("defalias" code nil nil [14846 14935])
            ("defalias" code nil nil [14937 15107])
            ("abbrev-table-name-list" variable (:default-value (quote (fundamental-mode-abbrev-table global-abbrev-table))) nil [15163 15304])
            ("make-abbrev-table" function (:arguments ("props")) nil [15306 16097])
            ("abbrev-table-p" function (:arguments ("object")) nil [16099 16268])
            ("abbrev-table-empty-p" function (:arguments ("object" "ignore-system")) nil [16270 16734])
            ("global-abbrev-table" variable (:default-value (make-abbrev-table)) nil [16736 16983])
            ("abbrev-minor-mode-table-alist" variable nil nil [16985 17240])
            ("fundamental-mode-abbrev-table" variable (:default-value (let ((table (make-abbrev-table))) (setq-default local-abbrev-table table) table)) nil [17242 17517])
            ("abbrevs-changed" variable nil nil [17519 17667])
            ("abbrev-all-caps" variable nil nil [17669 17810])
            ("abbrev-start-location" variable nil nil [17812 18014])
            ("abbrev-start-location-buffer" variable nil nil [18016 18194])
            ("last-abbrev" variable nil nil [18196 18293])
            ("last-abbrev-text" variable nil nil [18295 18425])
            ("last-abbrev-location" variable nil nil [18427 18517])
            ("pre-abbrev-expand-hook" variable nil nil [18694 18969])
            ("make-obsolete-variable" code nil nil [18970 19049])
            ("clear-abbrev-table" function (:arguments ("table")) nil [19051 19673])
            ("define-abbrev" function (:arguments ("table" "name" "expansion" "hook" "props")) nil [19675 22811])
            ("abbrev--check-chars" function (:arguments ("abbrev" "global")) nil [22813 23556])
            ("define-global-abbrev" function
               (:user-visible-flag t
                :arguments ("abbrev" "expansion"))
                nil [23558 23916])
            ("define-mode-abbrev" function
               (:user-visible-flag t
                :arguments ("abbrev" "expansion"))
                nil [23918 24340])
            ("abbrev--active-tables" function (:arguments ("tables")) nil [24342 25389])
            ("abbrev--symbol" function (:arguments ("abbrev" "table")) nil [25392 26340])
            ("abbrev-symbol" function (:arguments ("abbrev" "table")) nil [26342 27036])
            ("abbrev-expansion" function (:arguments ("abbrev" "table")) nil [27039 27299])
            ("abbrev--before-point" function nil nil [27302 29886])
            ("abbrev-insert" function (:arguments ("abbrev" "name" "wordstart" "wordend")) nil [29888 32932])
            ("abbrev-expand-functions" variable nil nil [32934 33020])
            ("make-obsolete-variable" code nil nil [33021 33101])
            ("abbrev-expand-function" variable (:default-value (function abbrev--default-expand)) nil [33103 33306])
            ("expand-abbrev" function (:user-visible-flag t) nil [33308 33799])
            ("abbrev--default-expand" function nil nil [33801 35302])
            ("unexpand-abbrev" function (:user-visible-flag t) nil [35304 36202])
            ("abbrev--write" function (:arguments ("sym")) nil [36204 36659])
            ("abbrev--describe" function (:arguments ("sym")) nil [36661 37055])
            ("insert-abbrev-table-description" function (:arguments ("name" "readable")) nil [37057 38098])
            ("define-abbrev-table" function (:arguments ("tablename" "definitions" "docstring" "props")) nil [38100 40389])
            ("abbrev-table-menu" function (:arguments ("table" "prompt" "sortfun")) nil [40391 41207])
            ("define-derived-mode" code nil nil [41302 41432])
            ("abbrev" package nil nil [41434 41451]))          
      :file "abbrev.el.gz"
      :pointmax 41477
      :fsize 12086
      :lastmodtime '(22768 58519 0 0)
      :unmatched-syntax '((close-paren 1066 . 1067) (symbol 1031 . 1048) (open-paren 1030 . 1031)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("reposition-window" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [1661 6522])
            ("repos-count-screen-lines" function (:arguments ("start" "end")) nil [6605 6808])
            ("repos-count-screen-lines-signed" function (:arguments ("start" "end")) nil [6918 7070])
            ("reposition" package nil nil [7239 7260]))          
      :file "reposition.el.gz"
      :pointmax 7290
      :fsize 2755
      :lastmodtime '(22768 58519 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("help-macro" include nil nil [1149 1170])
            ("add-hook" code nil nil [1241 1292])
            ("add-hook" code nil nil [1293 1344])
            ("help-window-point-marker" variable (:default-value (make-marker)) nil [1765 1875])
            ("help-window-old-frame" variable nil nil [1877 1973])
            ("help-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map (char-to-string help-char) (quote help-for-help)) (define-key map [help] (quote help-for-help)) (define-key map [f1] (quote help-for-help)) (define-key map "." (quote display-local-help)) (define-key map "?" (quote help-for-help)) (define-key map "" (quote about-emacs)) (define-key map "" (quote describe-copying)) (define-key map "" (quote view-emacs-debugging)) (define-key map "" (quote view-external-packages)) (define-key map "" (quote view-emacs-FAQ)) (define-key map "" (quote view-order-manuals)) (define-key map "" (quote view-emacs-news)) (define-key map "" (quote describe-distribution)) (define-key map "" (quote view-emacs-problems)) (define-key map "" (quote view-emacs-todo)) (define-key map "" (quote describe-no-warranty)) (define-key map "" (quote describe-input-method)) (define-key map "C" (quote describe-coding-system)) (define-key map "F" (quote Info-goto-emacs-command-node)) (define-key map "I" (quote describe-input-method)) (define-key map "K" (quote Info-goto-emacs-key-command-node)) (define-key map "L" (quote describe-language-environment)) (define-key map "S" (quote info-lookup-symbol)) (define-key map "a" (quote apropos-command)) (define-key map "b" (quote describe-bindings)) (define-key map "c" (quote describe-key-briefly)) (define-key map "d" (quote apropos-documentation)) (define-key map "e" (quote view-echo-area-messages)) (define-key map "f" (quote describe-function)) (define-key map "g" (quote describe-gnu-project)) (define-key map "h" (quote view-hello-file)) (define-key map "i" (quote info)) (define-key map "4i" (quote info-other-window)) (define-key map "k" (quote describe-key)) (define-key map "l" (quote view-lossage)) (define-key map "m" (quote describe-mode)) (define-key map "o" (quote describe-symbol)) (define-key map "n" (quote view-emacs-news)) (define-key map "p" (quote finder-by-keyword)) (define-key map "P" (quote describe-package)) (define-key map "r" (quote info-emacs-manual)) (define-key map "s" (quote describe-syntax)) (define-key map "t" (quote help-with-tutorial)) (define-key map "w" (quote where-is)) (define-key map "v" (quote describe-variable)) (define-key map "q" (quote help-quit)) map)) nil [1975 4264])
            ("define-key" code nil nil [4266 4330])
            ("define-key" code nil nil [4331 4375])
            ("define-key" code nil nil [4376 4418])
            ("fset" code nil nil [4419 4448])
            ("help-button-cache" variable nil nil [4517 4547])
            ("help-quit" function (:user-visible-flag t) nil [4551 4645])
            ("help-return-method" variable nil nil [4647 5016])
            ("define-obsolete-function-alias" code nil nil [5018 5111])
            ("help-print-return-message" function (:arguments ("function")) nil [5112 7407])
            ("fset" code nil nil [7467 7528])
            ("defalias" code nil nil [7530 7570])
            ("defalias" code nil nil [7603 7652])
            ("make-help-screen" code nil nil [7698 10812])
            ("function-called-at-point" function nil nil [10817 12549])
            ("view-help-file" function (:arguments ("file" "dir")) nil [12580 12735])
            ("describe-distribution" function (:user-visible-flag t) nil [12737 12881])
            ("describe-copying" function (:user-visible-flag t) nil [12883 13021])
            ("describe-gnu-project" function (:user-visible-flag t) nil [13069 13225])
            ("define-obsolete-function-alias" code nil nil [13227 13306])
            ("describe-no-warranty" function (:user-visible-flag t) nil [13308 13554])
            ("describe-prefix-bindings" function (:user-visible-flag t) nil [13556 14062])
            ("setq" code nil nil [14153 14205])
            ("view-emacs-news" function
               (:user-visible-flag t
                :arguments ("version"))
                nil [14207 16617])
            ("view-emacs-todo" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [16619 16738])
            ("define-obsolete-function-alias" code nil nil [16740 16807])
            ("view-echo-area-messages" function (:user-visible-flag t) nil [16810 17135])
            ("view-order-manuals" function (:user-visible-flag t) nil [17137 17315])
            ("view-emacs-FAQ" function (:user-visible-flag t) nil [17317 17504])
            ("view-emacs-problems" function (:user-visible-flag t) nil [17506 17654])
            ("view-emacs-debugging" function (:user-visible-flag t) nil [17656 17779])
            ("view-external-packages" function (:user-visible-flag t) nil [17848 18005])
            ("view-lossage" function (:user-visible-flag t) nil [18007 18976])
            ("describe-bindings" function
               (:user-visible-flag t
                :arguments ("prefix" "buffer"))
                nil [18997 19833])
            ("describe-bindings-internal" function (:arguments ("menus" "prefix")) nil [19876 20610])
            ("where-is" function
               (:user-visible-flag t
                :arguments ("definition" "insert"))
                nil [20612 22774])
            ("help-key-description" function (:arguments ("key" "untranslated")) nil [22776 23136])
            ("describe-key-briefly" function
               (:user-visible-flag t
                :arguments ("key" "insert" "untranslated"))
                nil [23138 26260])
            ("help--key-binding-keymap" function (:arguments ("key" "accept-default" "no-remap" "position")) nil [26262 27324])
            ("help--binding-locus" function (:arguments ("key" "position")) nil [27326 29031])
            ("describe-key" function
               (:user-visible-flag t
                :arguments ("key" "untranslated" "up-event"))
                nil [29033 35379])
            ("describe-mode" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [35382 39247])
            ("describe-minor-mode" function
               (:user-visible-flag t
                :arguments ("minor-mode"))
                nil [39250 40137])
            ("describe-minor-mode-completion-table-for-symbol" function nil nil [40149 40363])
            ("describe-minor-mode-from-symbol" function
               (:user-visible-flag t
                :arguments ("symbol"))
                nil [40365 40709])
            ("describe-minor-mode-completion-table-for-indicator" function nil nil [40724 41041])
            ("describe-minor-mode-from-indicator" function
               (:user-visible-flag t
                :arguments ("indicator"))
                nil [41043 41592])
            ("lookup-minor-mode-from-indicator" function (:arguments ("indicator")) nil [41594 42384])
            ("temp-buffer-max-height" variable (:default-value (lambda (buffer) (if (and (display-graphic-p) (eq (selected-window) (frame-root-window))) (/ (x-display-pixel-height) (frame-char-height) 2) (/ (- (frame-height) 2) 2)))) nil [42432 43201])
            ("temp-buffer-max-width" variable (:default-value (lambda (buffer) (if (and (display-graphic-p) (eq (selected-window) (frame-root-window))) (/ (x-display-pixel-width) (frame-char-width) 2) (/ (- (frame-width) 2) 2)))) nil [43203 43967])
            ("define-minor-mode" code nil nil [43969 45125])
            ("resize-temp-buffer-window" function (:arguments ("window")) nil [45127 46884])
            ("help-window-select" variable nil nil [46904 47872])
            ("help-enable-auto-load" variable (:default-value t) nil [47874 48261])
            ("help-window-display-message" function (:arguments ("quit-part" "window" "scroll")) nil [48263 49181])
            ("help-window-setup" function (:arguments ("window" "value")) nil [49183 51984])
            ("with-help-window" function (:arguments ("buffer-name" "body")) nil [52556 53665])
            ("help-form-show" function nil nil [53793 53983])
            ("help--docstring-quote" function (:arguments ("string")) nil [53987 54209])
            ("help-split-fundoc" function (:arguments ("docstring" "def")) nil [54433 55446])
            ("help-add-fundoc-usage" function (:arguments ("docstring" "arglist")) nil [55448 56298])
            ("help-function-arglist" function (:arguments ("def" "preserve-names")) nil [56300 58859])
            ("help--make-usage" function (:arguments ("function" "arglist")) nil [58861 59299])
            ("define-obsolete-function-alias" code nil nil [59301 59375])
            ("help--make-usage-docstring" function (:arguments ("fn" "arglist")) nil [59377 59532])
            ("help" package nil nil [59536 59551]))          
      :file "help.el.gz"
      :pointmax 59575
      :fsize 17008
      :lastmodtime '(22768 58519 0 0)
      :unmatched-syntax '((close-paren 1170 . 1171) (symbol 1131 . 1148) (open-paren 1130 . 1131)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cus-face" include nil nil [4463 4482])
            ("wid-edit" include nil nil [4483 4502])
            ("custom-versions-load-alist" variable nil nil [4504 4539])
            ("recentf-exclude" variable nil nil [4556 4580])
            ("condition-case" code nil nil [4601 4659])
            ("condition-case" code nil nil [4661 4720])
            ("put" code nil nil [4722 4766])
            ("put" code nil nil [4767 4815])
            ("custom-add-to-group" code nil nil [4816 4885])
            ("emacs" customgroup (:user-visible-flag t) nil [4914 5014])
            ("editing" customgroup (:user-visible-flag t) nil [5069 5142])
            ("convenience" customgroup (:user-visible-flag t) nil [5144 5231])
            ("files" customgroup (:user-visible-flag t) nil [5233 5300])
            ("wp" customgroup (:user-visible-flag t) nil [5302 5385])
            ("data" customgroup (:user-visible-flag t) nil [5387 5465])
            ("abbrev" customgroup (:user-visible-flag t) nil [5467 5586])
            ("matching" customgroup (:user-visible-flag t) nil [5588 5674])
            ("emulations" customgroup (:user-visible-flag t) nil [5676 5796])
            ("mouse" customgroup (:user-visible-flag t) nil [5798 5855])
            ("outlines" customgroup (:user-visible-flag t) nil [5857 5933])
            ("external" customgroup (:user-visible-flag t) nil [5935 6013])
            ("comm" customgroup (:user-visible-flag t) nil [6015 6133])
            ("processes" customgroup (:user-visible-flag t) nil [6135 6239])
            ("programming" customgroup (:user-visible-flag t) nil [6241 6331])
            ("languages" customgroup (:user-visible-flag t) nil [6333 6424])
            ("lisp" customgroup (:user-visible-flag t) nil [6426 6601])
            ("c" customgroup (:user-visible-flag t) nil [6603 6803])
            ("tools" customgroup (:user-visible-flag t) nil [6805 6870])
            ("applications" customgroup (:user-visible-flag t) nil [6872 6950])
            ("calendar" customgroup (:user-visible-flag t) nil [6952 7040])
            ("mail" customgroup (:user-visible-flag t) nil [7042 7124])
            ("news" customgroup (:user-visible-flag t) nil [7126 7241])
            ("games" customgroup (:user-visible-flag t) nil [7243 7319])
            ("development" customgroup (:user-visible-flag t) nil [7321 7409])
            ("docs" customgroup (:user-visible-flag t) nil [7411 7489])
            ("extensions" customgroup (:user-visible-flag t) nil [7491 7574])
            ("internal" customgroup (:user-visible-flag t) nil [7576 7676])
            ("maint" customgroup (:user-visible-flag t) nil [7678 7795])
            ("environment" customgroup (:user-visible-flag t) nil [7797 7879])
            ("hardware" customgroup (:user-visible-flag t) nil [7881 7983])
            ("terminals" customgroup (:user-visible-flag t) nil [7985 8063])
            ("unix" customgroup (:user-visible-flag t) nil [8065 8167])
            ("i18n" customgroup (:user-visible-flag t) nil [8169 8338])
            ("x" customgroup (:user-visible-flag t) nil [8340 8403])
            ("frames" customgroup (:user-visible-flag t) nil [8405 8497])
            ("tex" customgroup (:user-visible-flag t) nil [8499 8643])
            ("faces" customgroup (:user-visible-flag t) nil [8645 8713])
            ("help" customgroup (:user-visible-flag t) nil [8715 8786])
            ("multimedia" customgroup (:user-visible-flag t) nil [8788 8885])
            ("local" customgroup (:user-visible-flag t) nil [8887 8952])
            ("customize" customgroup
               (:user-visible-flag t
                :value (quote ((widgets custom-group))))
                nil [8954 9083])
            ("custom-faces" customgroup (:user-visible-flag t) nil [9085 9177])
            ("custom-browse" customgroup (:user-visible-flag t) nil [9179 9278])
            ("custom-buffer" customgroup (:user-visible-flag t) nil [9280 9379])
            ("custom-menu" customgroup (:user-visible-flag t) nil [9381 9476])
            ("alloc" customgroup (:user-visible-flag t) nil [9478 9607])
            ("undo" customgroup (:user-visible-flag t) nil [9609 9717])
            ("mode-line" customgroup (:user-visible-flag t) nil [9719 9796])
            ("editing-basics" customgroup (:user-visible-flag t) nil [9798 9880])
            ("display" customgroup (:user-visible-flag t) nil [9882 9971])
            ("execute" customgroup (:user-visible-flag t) nil [9973 10048])
            ("installation" customgroup (:user-visible-flag t) nil [10050 10127])
            ("dired" customgroup (:user-visible-flag t) nil [10129 10194])
            ("limits" customgroup (:user-visible-flag t) nil [10196 10263])
            ("debug" customgroup (:user-visible-flag t) nil [10265 10335])
            ("keyboard" customgroup (:user-visible-flag t) nil [10337 10411])
            ("mouse" customgroup (:user-visible-flag t) nil [10413 10481])
            ("menu" customgroup (:user-visible-flag t) nil [10483 10550])
            ("dnd" customgroup (:user-visible-flag t) nil [10552 10630])
            ("auto-save" customgroup (:user-visible-flag t) nil [10632 10712])
            ("processes-basics" customgroup (:user-visible-flag t) nil [10714 10805])
            ("mule" customgroup (:user-visible-flag t) nil [10807 10878])
            ("windows" customgroup (:user-visible-flag t) nil [10880 10994])
            ("custom-mode-map" variable (:default-value (let ((map (make-keymap))) (set-keymap-parent map widget-keymap) (define-key map [remap self-insert-command] (quote Custom-no-edit)) (define-key map "" (quote Custom-newline)) (define-key map " " (quote scroll-up-command)) (define-key map [33554464] (quote scroll-down-command)) (define-key map "" (quote scroll-down-command)) (define-key map "" (quote Custom-set)) (define-key map "" (quote Custom-save)) (define-key map "q" (quote Custom-buffer-done)) (define-key map "u" (quote Custom-goto-parent)) (define-key map "n" (quote widget-forward)) (define-key map "p" (quote widget-backward)) map)) nil [11021 11669])
            ("custom-mode-link-map" variable (:default-value (let ((map (make-keymap))) (set-keymap-parent map custom-mode-map) (define-key map [down-mouse-2] nil) (define-key map [down-mouse-1] (quote mouse-drag-region)) (define-key map [mouse-2] (quote widget-move-and-invoke)) map)) nil [11671 11977])
            ("custom-field-keymap" variable (:default-value (let ((map (copy-keymap widget-field-keymap))) (define-key map "" (quote Custom-set)) (define-key map "" (quote Custom-save)) map)) nil [11979 12219])
            ("widget-put" code nil nil [12221 12296])
            ("custom-split-regexp-maybe" function (:arguments ("regexp")) nil [12314 12626])
            ("custom-variable-prompt" function nil nil [12628 13187])
            ("custom-menu-filter" function (:arguments ("menu" "widget")) nil [13189 13740])
            ("custom-prefix-list" variable nil nil [13758 13856])
            ("custom-unlispify-menu-entries" variable (:default-value t) nil [13858 14005])
            ("custom-unlispify-remove-prefixes" variable nil nil [14007 14363])
            ("custom-unlispify-menu-entry" function (:arguments ("symbol" "no-suffix")) nil [14365 15347])
            ("custom-unlispify-tag-names" variable (:default-value t) nil [15349 15492])
            ("custom-unlispify-tag-name" function (:arguments ("symbol")) nil [15494 15686])
            ("custom-prefix-add" function (:arguments ("symbol" "prefixes")) nil [15688 15866])
            ("custom-guess-name-alist" variable (:default-value (quote (("-p\\'" boolean) ("-flag\\'" boolean) ("-hook\\'" hook) ("-face\\'" face) ("-file\\'" file) ("-function\\'" function) ("-functions\\'" (repeat function)) ("-list\\'" (repeat sexp)) ("-alist\\'" (alist :key-type sexp :value-type sexp))))) nil [15880 16602])
            ("custom-guess-doc-alist" variable (:default-value (quote (("\\`\\*?Non-nil " boolean)))) nil [16604 17117])
            ("custom-guess-type" function (:arguments ("symbol")) nil [17119 17921])
            ("custom-browse-sort-alphabetically" variable nil nil [17952 18118])
            ("custom-browse-order-groups" variable nil nil [18120 18416])
            ("custom-browse-only-groups" variable nil nil [18418 18573])
            ("custom-buffer-sort-alphabetically" variable (:default-value t) nil [18590 18770])
            ("custom-buffer-order-groups" variable (:default-value (quote last)) nil [18772 19070])
            ("custom-menu-sort-alphabetically" variable nil nil [19087 19244])
            ("custom-menu-order-groups" variable (:default-value (quote first)) nil [19246 19541])
            ("custom-sort-items" function (:arguments ("items" "sort-alphabetically" "order-groups")) nil [19543 20642])
            ("custom-commands" variable (:default-value (quote ((" Apply " Custom-set t "Apply settings (for the current session only)." "index" "Apply") (" Apply and Save " Custom-save (or custom-file user-init-file) "Apply settings and save for future sessions." "save" "Save") (" Undo Edits " Custom-reset-current t "Restore customization buffer to reflect existing settings." "refresh" "Undo") (" Reset Customizations " Custom-reset-saved t "Undo any settings applied only for the current session." "undo" "Reset") (" Erase Customizations " Custom-reset-standard (or custom-file user-init-file) "Un-customize settings in this and future sessions." "delete" "Uncustomize") (" Help for Customize " Custom-help t "Get help for using Customize." "help" "Help") (" Exit " Custom-buffer-done t "Exit Customize." "exit" "Exit")))) nil [20817 21731])
            ("Custom-help" function (:user-visible-flag t) nil [21733 21869])
            ("custom-reset-menu" variable (:default-value (quote (("Undo Edits in Customization Buffer" . Custom-reset-current) ("Revert This Session's Customizations" . Custom-reset-saved) ("Erase Customizations" . Custom-reset-standard)))) nil [21871 22292])
            ("custom-options" variable nil nil [22294 22370])
            ("custom-command-apply" function (:arguments ("fun" "query" "strong-query")) nil [22372 22994])
            ("Custom-set" function
               (:user-visible-flag t
                :arguments ("_ignore"))
                nil [22996 23302])
            ("Custom-save" function
               (:user-visible-flag t
                :arguments ("_ignore"))
                nil [23304 23936])
            ("custom-reset" function (:arguments ("_widget" "event")) nil [23938 24165])
            ("Custom-reset-current" function
               (:user-visible-flag t
                :arguments ("_ignore"))
                nil [24167 24526])
            ("Custom-reset-saved" function
               (:user-visible-flag t
                :arguments ("_ignore"))
                nil [24528 24953])
            ("custom-reset-standard-variables-list" variable nil nil [25375 25424])
            ("custom-reset-standard-faces-list" variable nil nil [25425 25470])
            ("custom-reset-standard-save-and-update" function nil nil [25724 26892])
            ("Custom-reset-standard" function
               (:user-visible-flag t
                :arguments ("_ignore"))
                nil [26894 27809])
            ("custom-prompt-variable" function (:arguments ("prompt-var" "prompt-val" "comment")) nil [27839 29617])
            ("customize-set-value" function
               (:user-visible-flag t
                :arguments ("variable" "value" "comment"))
                nil [29634 30404])
            ("customize-set-variable" function
               (:user-visible-flag t
                :arguments ("variable" "value" "comment"))
                nil [30421 31667])
            ("customize-save-variable" function
               (:user-visible-flag t
                :arguments ("variable" "value" "comment"))
                nil [31684 33163])
            ("customize-push-and-save" function (:arguments ("list-var" "elts")) nil [33448 34114])
            ("customize" function (:user-visible-flag t) nil [34131 34443])
            ("customize-mode" function
               (:user-visible-flag t
                :arguments ("mode"))
                nil [34460 35126])
            ("customize-read-group" function nil nil [35128 35528])
            ("customize-group" function
               (:user-visible-flag t
                :arguments ("group" "other-window"))
                nil [35545 36345])
            ("customize-group-other-window" function
               (:user-visible-flag t
                :arguments ("group"))
                nil [36362 36567])
            ("defalias" code nil nil [36584 36632])
            ("customize-option" function
               (:user-visible-flag t
                :arguments ("symbol"))
                nil [36649 37114])
            ("defalias" code nil nil [37131 37205])
            ("customize-option-other-window" function
               (:user-visible-flag t
                :arguments ("symbol"))
                nil [37222 37768])
            ("customize-changed-options-previous-release" variable (:default-value "24.1") nil [37770 37901])
            ("customize-package-emacs-version-alist" variable nil nil [37979 39318])
            ("defalias" code nil nil [39335 39391])
            ("customize-changed-options" function
               (:user-visible-flag t
                :arguments ("since-version"))
                nil [39408 41760])
            ("customize-package-emacs-version" function (:arguments ("symbol" "package-version")) nil [41762 43029])
            ("customize-version-lessp" function (:arguments ("version1" "version2")) nil [43031 43890])
            ("customize-face" function
               (:user-visible-flag t
                :arguments ("face" "other-window"))
                nil [43907 45191])
            ("customize-face-other-window" function
               (:user-visible-flag t
                :arguments ("face"))
                nil [45208 45671])
            ("custom-unsaved-options" function nil nil [45673 46271])
            ("defalias" code nil nil [46273 46324])
            ("customize-unsaved" function (:user-visible-flag t) nil [46341 46657])
            ("customize-rogue" function (:user-visible-flag t) nil [46674 47350])
            ("customize-saved" function (:user-visible-flag t) nil [47366 47958])
            ("declare-function" code nil nil [47960 48020])
            ("apropos-regexp" variable nil nil [48021 48044])
            ("customize-apropos" function
               (:user-visible-flag t
                :arguments ("pattern" "type"))
                nil [48061 49813])
            ("customize-apropos-options" function
               (:user-visible-flag t
                :arguments ("regexp" "ignored"))
                nil [49830 50047])
            ("customize-apropos-faces" function
               (:user-visible-flag t
                :arguments ("regexp"))
                nil [50064 50242])
            ("customize-apropos-groups" function
               (:user-visible-flag t
                :arguments ("regexp"))
                nil [50259 50441])
            ("custom-prompt-customize-unsaved-options" function nil nil [50458 50805])
            ("custom-buffer-style" variable (:default-value (quote links)) nil [50820 51207])
            ("custom-buffer-done-kill" variable nil nil [51209 51365])
            ("custom-buffer-indent" variable (:default-value 3) nil [51367 51488])
            ("custom-get-fresh-buffer" function (:arguments ("name")) nil [51490 52404])
            ("custom-buffer-create" function (:arguments ("options" "name" "description")) nil [52421 52877])
            ("custom-buffer-create-other-window" function (:arguments ("options" "name" "description")) nil [52894 53444])
            ("custom-reset-button-menu" variable (:default-value t) nil [53446 53675])
            ("custom-buffer-verbose-help" variable (:default-value t) nil [53677 53828])
            ("Custom-buffer-done" function
               (:user-visible-flag t
                :arguments ("_ignore"))
                nil [53830 53999])
            ("custom-button" variable nil nil [54001 54079])
            ("custom-button-mouse" variable nil nil [54081 54171])
            ("custom-button-pressed" variable nil nil [54173 54267])
            ("custom-search-field" variable (:default-value t) nil [54269 54416])
            ("custom-raised-buttons" variable (:default-value (not (equal (face-valid-attribute-values :box) (quote (("unspecified" . unspecified)))))) nil [54418 55037])
            ("custom-buffer-create-internal" function (:arguments ("options" "_description")) nil [55039 59294])
            ("customize-browse" function
               (:user-visible-flag t
                :arguments ("group"))
                nil [59334 60666])
            ("define-widget" code nil nil [60668 60842])
            ("custom-browse-visibility-action" function (:arguments ("widget" "_ignore")) nil [60844 60978])
            ("define-widget" code nil nil [60980 61166])
            ("custom-browse-group-tag-action" function (:arguments ("widget" "_ignore")) nil [61168 61333])
            ("define-widget" code nil nil [61335 61528])
            ("custom-browse-variable-tag-action" function (:arguments ("widget" "_ignore")) nil [61530 61701])
            ("define-widget" code nil nil [61703 61884])
            ("custom-browse-face-tag-action" function (:arguments ("widget" "_ignore")) nil [61886 62049])
            ("custom-browse-alist" variable
               (:constant-flag t
                :default-value (quote (("   " "space") (" | " "vertical") ("-\\ " "top") (" |-" "middle") (" `-" "bottom"))))
                nil [62051 62204])
            ("custom-browse-insert-prefix" function (:arguments ("prefix")) nil [62206 62813])
            ("widget-put" code nil nil [63137 63189])
            ("widget-put" code nil nil [63190 63427])
            ("widget-put" code nil nil [63428 63487])
            ("define-widget" code nil nil [63522 63831])
            ("custom-magic-faces" customgroup (:user-visible-flag t) nil [63865 63981])
            ("custom-invalid" variable
               (:default-value (quote ((((class color)) :foreground "yellow1" :background "red1") (t :weight bold :slant italic :underline t)))
                :type "face")
                nil [63983 64203])
            ("custom-rogue" variable
               (:default-value (quote ((((class color)) :foreground "pink" :background "black") (t :underline t)))
                :type "face")
                nil [64205 64412])
            ("custom-modified" variable
               (:default-value (quote ((((min-colors 88) (class color)) :foreground "white" :background "blue1") (((class color)) :foreground "white" :background "blue") (t :slant italic)))
                :type "face")
                nil [64414 64703])
            ("custom-set" variable
               (:default-value (quote ((((min-colors 88) (class color)) :foreground "blue1" :background "white") (((class color)) :foreground "blue" :background "white") (t :slant italic)))
                :type "face")
                nil [64705 64992])
            ("custom-changed" variable
               (:default-value (quote ((((min-colors 88) (class color)) :foreground "white" :background "blue1") (((class color)) :foreground "white" :background "blue") (t :slant italic)))
                :type "face")
                nil [64994 65277])
            ("custom-themed" variable
               (:default-value (quote ((((min-colors 88) (class color)) :foreground "white" :background "blue1") (((class color)) :foreground "white" :background "blue") (t :slant italic)))
                :type "face")
                nil [65279 65564])
            ("custom-saved" variable
               (:default-value (quote ((t :underline t)))
                :type "face")
                nil [65566 65691])
            ("custom-magic-alist" variable
               (:constant-flag t
                :default-value (quote ((nil "#" underline "UNINITIALIZED, you should not see this.") (unknown "?" italic "UNKNOWN, you should not see this.") (hidden "-" default "HIDDEN, invoke \"Show\" in the previous line to show." "group now hidden, invoke \"Show\", above, to show contents.") (invalid "x" custom-invalid "INVALID, the displayed value cannot be set.") (modified "*" custom-modified "EDITED, shown value does not take effect until you set or save it." "something in this group has been edited but not set.") (set "+" custom-set "SET for current session only." "something in this group has been set but not saved.") (changed ":" custom-changed "CHANGED outside Customize." "something in this group has been changed outside customize.") (saved "!" custom-saved "SAVED and set." "something in this group has been set and saved.") (themed "o" custom-themed "THEMED." "visible group members are set by enabled themes.") (rogue "@" custom-rogue "NO CUSTOMIZATION DATA; not intended to be customized." "something in this group is not prepared for customization.") (standard " " nil "STANDARD." "visible group members are all at standard values."))))
                nil [65693 68118])
            ("custom-magic-show" variable (:default-value (quote long)) nil [68120 68380])
            ("custom-magic-show-hidden" variable (:default-value (quote (option face))) nil [68382 68730])
            ("custom-magic-show-button" variable nil nil [68732 68892])
            ("define-widget" code nil nil [68894 69165])
            ("widget-magic-mouse-down-action" function (:arguments ("widget" "_event")) nil [69167 69369])
            ("custom-magic-value-create" function (:arguments ("widget")) nil [69371 71899])
            ("custom-magic-reset" function (:arguments ("widget")) nil [71901 72106])
            ("custom-button" variable
               (:default-value (quote ((((type x w32 ns) (class color)) :box (:line-width 2 :style released-button) :background "lightgrey" :foreground "black")))
                :type "face")
                nil [72134 72434])
            ("custom-button-mouse" variable
               (:default-value (quote ((((type x w32 ns) (class color)) :box (:line-width 2 :style released-button) :background "grey90" :foreground "black") (t :inverse-video t)))
                :type "face")
                nil [72436 72916])
            ("custom-button-unraised" variable
               (:default-value (quote ((t :inherit underline)))
                :type "face")
                nil [72918 73089])
            ("setq" code nil nil [73091 73183])
            ("setq" code nil nil [73185 73276])
            ("custom-button-pressed" variable
               (:default-value (quote ((((type x w32 ns) (class color)) :box (:line-width 2 :style pressed-button) :background "lightgrey" :foreground "black") (t :inverse-video t)))
                :type "face")
                nil [73278 73586])
            ("custom-button-pressed-unraised" variable
               (:default-value (quote ((default :inherit custom-button-unraised) (((class color) (background light)) :foreground "magenta4") (((class color) (background dark)) :foreground "violet")))
                :type "face")
                nil [73588 73912])
            ("setq" code nil nil [73914 74036])
            ("custom-documentation" variable
               (:default-value (quote ((t nil)))
                :type "face")
                nil [74038 74168])
            ("custom-state" variable
               (:default-value (quote ((((class color) (background dark)) :foreground "lime green") (((class color) (background light)) :foreground "dark green")))
                :type "face")
                nil [74170 74414])
            ("custom-link" variable
               (:default-value (quote ((t :inherit link)))
                :type "face")
                nil [74416 74544])
            ("define-widget" code nil nil [74546 75027])
            ("custom-convert-widget" function (:arguments ("widget")) nil [75029 75390])
            ("custom-notify" function (:arguments ("widget" "args")) nil [75392 75724])
            ("custom-redraw" function (:arguments ("widget")) nil [75726 76321])
            ("custom-redraw-magic" function (:arguments ("widget")) nil [76323 76697])
            ("custom-show" function (:arguments ("widget" "value")) nil [76699 76983])
            ("custom-load-widget" function (:arguments ("widget")) nil [76985 77103])
            ("custom-unloaded-symbol-p" function (:arguments ("symbol")) nil [77105 77583])
            ("custom-unloaded-widget-p" function (:arguments ("widget")) nil [77585 77752])
            ("custom-toggle-hide" function (:arguments ("widget")) nil [77754 78213])
            ("custom-toggle-parent" function (:arguments ("widget" "_ignore")) nil [78215 78360])
            ("custom-add-see-also" function (:arguments ("widget" "prefix")) nil [78362 79264])
            ("custom-add-parent-links" function (:arguments ("widget" "initial-string" "_doc-initial-string")) nil [79266 80142])
            ("custom-comment" variable
               (:default-value (quote ((((type tty)) :background "yellow3" :foreground "black") (((class grayscale color) (background light)) :background "gray85") (((class grayscale color) (background dark)) :background "dim gray") (t :slant italic)))
                :type "face")
                nil [80205 80594])
            ("custom-comment-tag" variable
               (:default-value (quote ((((class color) (background dark)) :foreground "gray80") (((class color) (background light)) :foreground "blue4") (((class grayscale) (background light)) :foreground "DimGray" :weight bold :slant italic) (((class grayscale) (background dark)) :foreground "LightGray" :weight bold :slant italic) (t :weight bold)))
                :type "face")
                nil [80627 81078])
            ("define-widget" code nil nil [81080 81301])
            ("custom-comment-create" function (:arguments ("widget")) nil [81303 81714])
            ("custom-comment-hide" function (:arguments ("widget")) nil [81716 81814])
            ("custom-comment-show" function (:arguments ("widget")) nil [81917 82034])
            ("custom-comment-invisible-p" function (:arguments ("widget")) nil [82036 82214])
            ("custom-variable-tag" variable
               (:default-value (\` ((((class color) (background dark)) :foreground "light blue" :weight bold) (((min-colors 88) (class color) (background light)) :foreground "blue1" :weight bold) (((class color) (background light)) :foreground "blue" :weight bold) (t :weight bold)))
                :type "face")
                nil [82251 82625])
            ("custom-variable-button" variable
               (:default-value (quote ((t :underline t :weight bold)))
                :type "face")
                nil [82627 82757])
            ("custom-variable-default-form" variable (:default-value (quote edit)) nil [82759 82942])
            ("custom-variable-documentation" function (:arguments ("variable")) nil [82944 83577])
            ("define-widget" code nil nil [83579 85149])
            ("custom-variable-type" function (:arguments ("symbol")) nil [85151 85740])
            ("custom-variable-value-create" function (:arguments ("widget")) nil [85742 91230])
            ("custom-toggle-hide-variable" function (:arguments ("visibility-widget" "_ignore")) nil [91232 92325])
            ("custom-tag-action" function (:arguments ("widget" "args")) nil [92327 92520])
            ("custom-tag-mouse-down-action" function (:arguments ("widget" "args")) nil [92522 92748])
            ("custom-variable-state" function (:arguments ("symbol" "val")) nil [92750 94406])
            ("custom-variable-state-set" function (:arguments ("widget" "state")) nil [94408 94710])
            ("custom-variable-standard-value" function (:arguments ("widget")) nil [94712 94805])
            ("custom-variable-menu" variable (:default-value (\` (("Set for Current Session" custom-variable-set (lambda (widget) (eq (widget-get widget :custom-state) (quote modified)))) (\,@ (when (or custom-file init-file-user) (quote (("Save for Future Sessions" custom-variable-save (lambda (widget) (memq (widget-get widget :custom-state) (quote (modified set changed rogue))))))))) ("Undo Edits" custom-redraw (lambda (widget) (and (default-boundp (widget-value widget)) (memq (widget-get widget :custom-state) (quote (modified changed)))))) ("Revert This Session's Customization" custom-variable-reset-saved (lambda (widget) (memq (widget-get widget :custom-state) (quote (modified set changed rogue))))) (\,@ (when (or custom-file init-file-user) (quote (("Erase Customization" custom-variable-reset-standard (lambda (widget) (and (get (widget-value widget) (quote standard-value)) (memq (widget-get widget :custom-state) (quote (modified set changed saved rogue)))))))))) ("Set to Backup Value" custom-variable-reset-backup (lambda (widget) (get (widget-value widget) (quote backup-value)))) ("---" ignore ignore) ("Add Comment" custom-comment-show custom-comment-invisible-p) ("---" ignore ignore) ("Show Current Value" custom-variable-edit (lambda (widget) (eq (widget-get widget :custom-form) (quote lisp)))) ("Show Saved Lisp Expression" custom-variable-edit-lisp (lambda (widget) (eq (widget-get widget :custom-form) (quote edit))))))) nil [94807 97009])
            ("custom-variable-action" function (:arguments ("widget" "event")) nil [97011 97671])
            ("custom-variable-edit" function (:arguments ("widget")) nil [97673 97847])
            ("custom-variable-edit-lisp" function (:arguments ("widget")) nil [97849 98059])
            ("custom-variable-set" function (:arguments ("widget")) nil [98061 99828])
            ("custom-variable-mark-to-save" function (:arguments ("widget")) nil [99830 101549])
            ("custom-variable-state-set-and-redraw" function (:arguments ("widget")) nil [101551 101749])
            ("custom-variable-save" function (:arguments ("widget")) nil [101751 101948])
            ("custom-variable-reset-saved" function (:arguments ("widget")) nil [101950 103095])
            ("custom-variable-mark-to-reset-standard" function (:arguments ("widget")) nil [103097 104546])
            ("custom-variable-reset-standard" function (:arguments ("widget")) nil [104548 104992])
            ("custom-variable-backup-value" function (:arguments ("widget")) nil [104994 105464])
            ("custom-variable-reset-backup" function (:arguments ("widget")) nil [105466 106502])
            ("define-widget" code nil nil [106540 106781])
            ("custom-visibility" variable
               (:default-value (quote ((t :height 0.8 :inherit link)))
                :type "face")
                nil [106783 106931])
            ("define-widget" code nil nil [106969 107862])
            ("custom-face-edit-value-create" function (:arguments ("widget")) nil [107864 109309])
            ("custom-face-edit-value-visibility-action" function (:arguments ("widget" "_ignore")) nil [109311 109589])
            ("custom-face-edit-fix-value" function (:arguments ("_widget" "value")) nil [109591 109787])
            ("custom-face-edit-convert-widget" function (:arguments ("widget")) nil [109789 110136])
            ("custom-face-edit" variable
               (:constant-flag t
                :default-value (widget-convert (quote custom-face-edit)))
                nil [110138 110256])
            ("custom-face-edit-deactivate" function (:arguments ("widget")) nil [110258 110812])
            ("custom-face-edit-activate" function (:arguments ("widget")) nil [110814 111288])
            ("custom-face-edit-delete" function (:arguments ("widget")) nil [111290 111852])
            ("custom-face-edit-attribute-tag" function (:arguments ("widget")) nil [111855 112210])
            ("define-widget" code nil nil [112246 114718])
            ("custom-face-tag" variable
               (:default-value (quote ((t :inherit custom-variable-tag)))
                :type "face")
                nil [114751 114866])
            ("custom-face-default-form" variable (:default-value (quote selected)) nil [114868 115070])
            ("define-widget" code nil nil [115072 116614])
            ("define-widget" code nil nil [116616 117044])
            ("custom-face-all" variable
               (:constant-flag t
                :default-value (widget-convert (quote custom-face-all)))
                nil [117046 117161])
            ("custom-filter-face-spec" function (:arguments ("spec" "filter-index" "default-filter")) nil [117163 118290])
            ("custom-pre-filter-face-spec" function (:arguments ("spec")) nil [118292 118483])
            ("custom-post-filter-face-spec" function (:arguments ("spec")) nil [118485 118635])
            ("custom-face-widget-to-spec" function (:arguments ("widget")) nil [118637 119049])
            ("custom-face-get-current-spec" function (:arguments ("face")) nil [119051 119575])
            ("custom-toggle-hide-face" function (:arguments ("visibility-widget" "_ignore")) nil [119577 120620])
            ("custom-face-value-create" function (:arguments ("widget")) nil [120622 125046])
            ("custom-face-menu" variable (:default-value (\` (("Set for Current Session" custom-face-set) (\,@ (when (or custom-file init-file-user) (quote (("Save for Future Sessions" custom-face-save))))) ("Undo Edits" custom-redraw (lambda (widget) (memq (widget-get widget :custom-state) (quote (modified changed))))) ("Revert This Session's Customization" custom-face-reset-saved (lambda (widget) (memq (widget-get widget :custom-state) (quote (modified set changed))))) (\,@ (when (or custom-file init-file-user) (quote (("Erase Customization" custom-face-reset-standard (lambda (widget) (get (widget-value widget) (quote face-defface-spec)))))))) ("---" ignore ignore) ("Add Comment" custom-comment-show custom-comment-invisible-p) ("---" ignore ignore) ("For Current Display" custom-face-edit-selected (lambda (widget) (not (eq (widget-get widget :custom-form) (quote selected))))) ("For All Kinds of Displays" custom-face-edit-all (lambda (widget) (not (eq (widget-get widget :custom-form) (quote all))))) ("Show Lisp Expression" custom-face-edit-lisp (lambda (widget) (not (eq (widget-get widget :custom-form) (quote lisp)))))))) nil [125048 126586])
            ("custom-face-edit-selected" function (:arguments ("widget")) nil [126588 126798])
            ("custom-face-edit-all" function (:arguments ("widget")) nil [126800 126995])
            ("custom-face-edit-lisp" function (:arguments ("widget")) nil [126997 127203])
            ("custom-face-state" function (:arguments ("face")) nil [127205 128224])
            ("custom-face-state-set" function (:arguments ("widget")) nil [128226 128378])
            ("custom-face-action" function (:arguments ("widget" "event")) nil [128380 128904])
            ("custom-face-set" function (:arguments ("widget")) nil [128906 129599])
            ("custom-face-mark-to-save" function (:arguments ("widget")) nil [129601 130349])
            ("custom-face-state-set-and-redraw" function (:arguments ("widget")) nil [130351 130537])
            ("custom-face-save" function (:arguments ("widget")) nil [130539 130708])
            ("define-obsolete-function-alias" code nil nil [130741 130826])
            ("custom-face-reset-saved" function (:arguments ("widget")) nil [130828 131681])
            ("custom-face-standard-value" function (:arguments ("widget")) nil [131683 131775])
            ("custom-face-mark-to-reset-standard" function (:arguments ("widget")) nil [131777 133375])
            ("custom-face-reset-standard" function (:arguments ("widget")) nil [133377 133700])
            ("widget-face-prompt-value-history" variable nil nil [133726 133823])
            ("define-widget" code nil nil [133825 134461])
            ("widget-face-sample-face-get" function (:arguments ("widget")) nil [134463 134592])
            ("widget-face-notify" function (:arguments ("widget" "child" "event")) nil [134594 134847])
            ("define-widget" code nil nil [134874 135455])
            ("custom-hook-convert-widget" function (:arguments ("widget")) nil [135457 135885])
            ("define-widget" code nil nil [135924 136245])
            ("custom-group-link-action" function (:arguments ("widget" "_ignore")) nil [136247 136344])
            ("custom-group-tag-faces" variable nil nil [136378 136636])
            ("custom-group-tag-1" variable
               (:default-value (quote ((default :weight bold :height 1.2 :inherit variable-pitch) (((class color) (background dark)) :foreground "pink") (((min-colors 88) (class color) (background light)) :foreground "red1") (((class color) (background light)) :foreground "red")))
                :type "face")
                nil [136638 136972])
            ("custom-group-tag" variable
               (:default-value (quote ((default :weight bold :height 1.2 :inherit variable-pitch) (((class color) (background dark)) :foreground "light blue") (((min-colors 88) (class color) (background light)) :foreground "blue1") (((class color) (background light)) :foreground "blue") (t :weight bold)))
                :type "face")
                nil [136974 137345])
            ("custom-group-subtitle" variable
               (:default-value (quote ((t :weight bold)))
                :type "face")
                nil [137347 137483])
            ("custom-group-doc-align-col" variable (:default-value 20) nil [137485 137523])
            ("define-widget" code nil nil [137525 138262])
            ("custom-group-sample-face-get" function (:arguments ("widget")) nil [138264 138431])
            ("define-widget" code nil nil [138433 138587])
            ("custom-group-visibility-create" function (:arguments ("widget")) nil [138589 138749])
            ("custom-group-members" function (:arguments ("symbol" "groups-only")) nil [138751 139130])
            ("custom-group-value-create" function (:arguments ("widget")) nil [139132 147316])
            ("custom-group-menu" variable (:default-value (\` (("Set for Current Session" custom-group-set (lambda (widget) (eq (widget-get widget :custom-state) (quote modified)))) (\,@ (when (or custom-file init-file-user) (quote (("Save for Future Sessions" custom-group-save (lambda (widget) (memq (widget-get widget :custom-state) (quote (modified set))))))))) ("Undo Edits" custom-group-reset-current (lambda (widget) (memq (widget-get widget :custom-state) (quote (modified))))) ("Revert This Session's Customizations" custom-group-reset-saved (lambda (widget) (memq (widget-get widget :custom-state) (quote (modified set))))) (\,@ (when (or custom-file init-file-user) (quote (("Erase Customization" custom-group-reset-standard (lambda (widget) (memq (widget-get widget :custom-state) (quote (modified set saved)))))))))))) nil [147318 148519])
            ("custom-group-action" function (:arguments ("widget" "event")) nil [148521 149036])
            ("custom-group-set" function (:arguments ("widget")) nil [149038 149265])
            ("custom-group-mark-to-save" function (:arguments ("widget")) nil [149267 149521])
            ("custom-group-state-set-and-redraw" function (:arguments ("widget")) nil [149523 149819])
            ("custom-group-save" function (:arguments ("widget")) nil [149821 149994])
            ("custom-group-reset-current" function (:arguments ("widget")) nil [149996 150234])
            ("custom-group-reset-saved" function (:arguments ("widget")) nil [150236 150485])
            ("custom-group-reset-standard" function (:arguments ("widget")) nil [150487 150772])
            ("custom-group-mark-to-reset-standard" function (:arguments ("widget")) nil [150774 151069])
            ("custom-group-state-update" function (:arguments ("widget")) nil [151071 151664])
            ("custom-file" variable nil nil [151724 153562])
            ("custom-file" function (:arguments ("no-error")) nil [153564 154066])
            ("declare-function" code nil nil [154116 154176])
            ("custom-save-all" function nil nil [154193 155607])
            ("customize-save-customized" function (:user-visible-flag t) nil [155624 156623])
            ("custom-save-delete" function (:arguments ("symbol")) nil [156676 157979])
            ("sort-fold-case" variable nil nil [157981 158004])
            ("custom-save-variables" function nil nil [158027 160948])
            ("custom-save-faces" function nil nil [160950 162794])
            ("custom-menu-nesting" variable (:default-value 2) nil [162840 162949])
            ("custom-face-menu-create" function (:arguments ("_widget" "symbol")) nil [162951 163154])
            ("custom-variable-menu-create" function (:arguments ("_widget" "symbol")) nil [163156 163574])
            ("widget-put" code nil nil [163623 163845])
            ("custom-group-menu-create" function (:arguments ("_widget" "symbol")) nil [163847 164141])
            ("custom-menu-create" function (:arguments ("symbol")) nil [164158 165118])
            ("customize-menu-create" function (:arguments ("symbol" "name")) nil [165135 165588])
            ("easy-menu-define" code nil nil [165623 166031])
            ("tool-bar-map" variable nil nil [166033 166054])
            ("custom-tool-bar-map" variable nil nil [166242 166313])
            ("Custom-no-edit" function
               (:user-visible-flag t
                :arguments ("_pos" "_event"))
                nil [166337 166533])
            ("Custom-newline" function
               (:user-visible-flag t
                :arguments ("pos" "event"))
                nil [166535 167131])
            ("Custom-goto-parent" function (:user-visible-flag t) nil [167133 167531])
            ("Custom-mode-hook" variable nil nil [167533 167646])
            ("custom-state-buffer-message" function (:arguments ("widget")) nil [167648 167854])
            ("custom--initialize-widget-variables" function nil nil [167856 168773])
            ("define-obsolete-variable-alias" code nil nil [168775 168850])
            ("define-derived-mode" code nil nil [168851 170430])
            ("put" code nil nil [170432 170471])
            ("define-obsolete-function-alias" code nil nil [170473 170538])
            ("add-to-list" code nil nil [170540 170594])
            ("cus-edit" package nil nil [170610 170629]))          
      :file "cus-edit.el.gz"
      :pointmax 170657
      :fsize 40016
      :lastmodtime '(22768 58519 0 0)
      :unmatched-syntax nil))
  :file "!usr!share!emacs!25.3!lisp!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
