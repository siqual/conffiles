;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("nxml-util" include nil nil [1125 1145])
            ("rng-util" include nil nil [1146 1165])
            ("rng-uri" include nil nil [1166 1184])
            ("rng-pttrn" include nil nil [1185 1205])
            ("rng-c-load-schema" function (:arguments ("filename")) nil [1222 1366])
            ("define-error" code nil nil [1388 1482])
            ("rng-c-signal-incorrect-schema" function (:arguments ("filename" "pos" "message")) nil [1484 1634])
            ("rng-c-keywords" variable
               (:constant-flag t
                :default-value (quote ("attribute" "default" "datatypes" "div" "element" "empty" "external" "grammar" "include" "inherit" "list" "mixed" "namespace" "notAllowed" "parent" "start" "string" "text" "token")))
                nil [1648 1991])
            ("rng-c-anchored-keyword-re" variable
               (:constant-flag t
                :default-value (concat "\\`\\(" (regexp-opt rng-c-keywords) "\\)\\'"))
                nil [1993 2151])
            ("rng-c-syntax-table" variable nil nil [2153 2233])
            ("if" code nil nil [2235 2614])
            ("rng-c-literal-1-re" variable
               (:constant-flag t
                :default-value "'\\(''\\([^']\\|'[^']\\|''[^']\\)*''\\|[^'
]*\\)'")
                nil [2616 2757])
            ("rng-c-literal-2-re" variable
               (:constant-flag t
                :default-value (replace-regexp-in-string "'" "\"" rng-c-literal-1-re))
                nil [2759 2902])
            ("rng-c-ncname-re" variable
               (:constant-flag t
                :default-value "\\w+")
                nil [2904 2937])
            ("rng-c-anchored-ncname-re" variable
               (:constant-flag t
                :default-value (concat "\\`" rng-c-ncname-re "\\'"))
                nil [2939 3013])
            ("rng-c-token-re" variable
               (:constant-flag t
                :default-value (concat "[&|]=" "\\|" "[][()|&,*+?{}~=-]" "\\|" rng-c-literal-1-re "\\|" rng-c-literal-2-re "\\|" rng-c-ncname-re "\\(:\\(\\*\\|" rng-c-ncname-re "\\)\\)?" "\\|" "\\\\" rng-c-ncname-re "\\|" ">>"))
                nil [3015 3320])
            ("rng-c-init-buffer" function nil nil [3322 3493])
            ("rng-c-current-token" variable nil nil [3495 3527])
            ("make-variable-buffer-local" code nil nil [3528 3577])
            ("rng-c-advance" function nil nil [3579 3842])
            ("rng-c-anchored-datatype-name-re" variable
               (:constant-flag t
                :default-value (concat "\\`" rng-c-ncname-re ":" rng-c-ncname-re "\\'"))
                nil [3844 3946])
            ("rng-c-current-token-keyword-p" function nil nil [3948 4054])
            ("rng-c-current-token-prefixed-name-p" function nil nil [4056 4174])
            ("rng-c-current-token-literal-p" function nil nil [4176 4267])
            ("rng-c-current-token-quoted-identifier-p" function nil nil [4269 4369])
            ("rng-c-current-token-ncname-p" function nil nil [4371 4475])
            ("rng-c-current-token-ns-name-p" function nil nil [4477 4631])
            ("rng-c-inherit-namespace" variable nil nil [4649 4685])
            ("rng-c-default-namespace" variable nil nil [4687 4723])
            ("rng-c-default-namespace-declared" variable nil nil [4725 4770])
            ("rng-c-namespace-decls" variable nil nil [4772 4843])
            ("rng-c-no-namespace" variable (:constant-flag t) nil [4845 4878])
            ("rng-c-declare-standard-namespaces" function nil nil [4880 5171])
            ("rng-c-expand-name" function (:arguments ("prefixed-name")) nil [5173 5390])
            ("rng-c-lookup-prefix" function (:arguments ("prefix")) nil [5392 5563])
            ("rng-c-unqualified-namespace" function (:arguments ("attribute")) nil [5565 5682])
            ("rng-c-make-context" function nil nil [5684 5768])
            ("rng-string-datatype" variable
               (:constant-flag t
                :default-value (rng-make-datatype rng-builtin-datatypes-uri "string"))
                nil [5785 5872])
            ("rng-token-datatype" variable
               (:constant-flag t
                :default-value (rng-make-datatype rng-builtin-datatypes-uri "token"))
                nil [5874 5959])
            ("rng-c-datatype-decls" variable nil nil [5961 6116])
            ("rng-c-declare-standard-datatypes" function nil nil [6118 6262])
            ("rng-c-lookup-datatype-prefix" function (:arguments ("prefix")) nil [6264 6443])
            ("rng-c-expand-datatype" function (:arguments ("prefixed-name")) nil [6445 6666])
            ("rng-c-current-grammar" variable nil nil [6682 6716])
            ("rng-c-parent-grammar" variable nil nil [6717 6750])
            ("rng-c-make-grammar" function nil nil [6752 6814])
            ("rng-c-about-override-slot" variable (:constant-flag t) nil [6816 6854])
            ("rng-c-about-combine-slot" variable
               (:constant-flag t
                :default-value 1)
                nil [6855 6892])
            ("rng-c-lookup-create" function (:arguments ("name" "grammar")) nil [6894 7342])
            ("rng-c-make-ref" function (:arguments ("name")) nil [7344 7508])
            ("rng-c-make-parent-ref" function (:arguments ("name")) nil [7510 7693])
            ("rng-c-overrides" variable nil nil [7695 7766])
            ("rng-c-merge-combine" function (:arguments ("def" "combine" "name")) nil [7768 8101])
            ("rng-c-prepare-define" function (:arguments ("name" "combine" "in-include")) nil [8103 8673])
            ("rng-c-start-include" function (:arguments ("overrides")) nil [8675 8950])
            ("rng-c-end-include" function (:arguments ("overrides")) nil [8952 9373])
            ("rng-c-define" function (:arguments ("def" "value")) nil [9375 9717])
            ("rng-c-finish-grammar" function nil nil [9719 10007])
            ("rng-c-escape-positions" variable nil nil [10022 10057])
            ("make-variable-buffer-local" code nil nil [10058 10110])
            ("rng-c-file-name" variable nil nil [10112 10140])
            ("make-variable-buffer-local" code nil nil [10141 10186])
            ("rng-c-file-index" variable nil nil [10188 10217])
            ("rng-c-parse-file" function (:arguments ("filename" "context")) nil [10219 10557])
            ("rng-c-buffer-name" function (:arguments ("context")) nil [10559 10792])
            ("rng-c-process-escapes" function nil nil [10794 11754])
            ("rng-c-translate-position" function (:arguments ("pos")) nil [11756 11946])
            ("rng-c-error" function (:arguments ("args")) nil [11948 12105])
            ("rng-c-parse-top-level" function (:arguments ("context")) nil [12107 12713])
            ("rng-c-parse-included-grammar" function nil nil [12715 12933])
            ("rng-c-implicit-grammar-p" function nil nil [12935 13366])
            ("rng-c-parse-decls" function nil nil [13368 13817])
            ("rng-c-parse-datatypes" function nil nil [13819 14184])
            ("rng-c-parse-namespace" function nil nil [14186 14292])
            ("rng-c-parse-default" function nil nil [14294 14491])
            ("rng-c-declare-namespace" function (:arguments ("declare-default" "prefix")) nil [14493 15192])
            ("rng-c-parse-implicit-grammar" function nil nil [15194 15397])
            ("rng-c-parse-grammar-body" function (:arguments ("close-token" "in-include")) nil [15399 16776])
            ("rng-c-parse-div" function (:arguments ("in-include")) nil [16778 16879])
            ("rng-c-parse-include" function nil nil [16881 17397])
            ("rng-c-parse-define" function (:arguments ("name" "in-include")) nil [17399 17775])
            ("rng-c-had-except" variable nil nil [17777 17806])
            ("rng-c-parse-pattern" function nil nil [17808 18479])
            ("rng-c-parse-repeated" function nil nil [18481 18932])
            ("rng-c-parse-primary" function nil nil [18934 20161])
            ("rng-c-parse-parent" function nil nil [20163 20383])
            ("rng-c-parse-literal" function nil nil [20385 20496])
            ("rng-c-parse-literal-segments" function nil nil [20498 20712])
            ("rng-c-parse-literal-segment" function nil nil [20714 21049])
            ("rng-c-fix-escaped-newlines" function (:arguments ("str")) nil [21051 21246])
            ("rng-c-parse-identifier-or-keyword" function nil nil [21248 21531])
            ("put" code nil nil [21533 21581])
            ("put" code nil nil [21582 21628])
            ("put" code nil nil [21629 21679])
            ("put" code nil nil [21680 21734])
            ("put" code nil nil [21735 21779])
            ("put" code nil nil [21780 21826])
            ("put" code nil nil [21827 21871])
            ("put" code nil nil [21872 21918])
            ("put" code nil nil [21919 21976])
            ("put" code nil nil [21977 22027])
            ("put" code nil nil [22028 22076])
            ("put" code nil nil [22077 22129])
            ("rng-c-parse-element" function nil nil [22131 22349])
            ("rng-c-parse-attribute" function nil nil [22351 22580])
            ("rng-c-parse-name-class" function (:arguments ("attribute")) nil [22582 23312])
            ("rng-c-parse-primary-name-class" function (:arguments ("attribute")) nil [23314 24697])
            ("rng-c-parse-opt-except-name-class" function (:arguments ("attribute")) nil [24699 25039])
            ("rng-c-parse-mixed" function nil nil [25041 25184])
            ("rng-c-parse-list" function nil nil [25186 25327])
            ("rng-c-parse-text" function nil nil [25329 25374])
            ("rng-c-parse-empty" function nil nil [25376 25423])
            ("rng-c-parse-not-allowed" function nil nil [25425 25484])
            ("rng-c-parse-string" function nil nil [25486 25556])
            ("rng-c-parse-token" function nil nil [25558 25626])
            ("rng-c-parse-data" function (:arguments ("name")) nil [25628 26166])
            ("rng-c-parse-optional-params" function nil nil [26168 26724])
            ("rng-c-parse-external" function nil nil [26726 26917])
            ("rng-c-expand-file" function (:arguments ("uri")) nil [26919 27114])
            ("rng-c-parse-opt-inherit" function nil nil [27116 27334])
            ("rng-c-parse-grammar" function nil nil [27336 27552])
            ("rng-c-parse-lead-annotation" function nil nil [27554 27723])
            ("rng-c-parse-follow-annotations" function (:arguments ("obj")) nil [27725 27987])
            ("rng-c-parse-annotation-element" function nil nil [27989 28082])
            ("rng-c-parse-annotation-body" function (:arguments ("allow-text")) nil [28175 28988])
            ("rng-c-advance-with" function (:arguments ("pattern")) nil [28990 29054])
            ("rng-c-expect" function (:arguments ("str")) nil [29056 29219])
            ("rng-cmpct" package nil nil [29221 29241]))          
      :file "rng-cmpct.el.gz"
      :pointmax 29260
      :fsize 6859
      :lastmodtime '(22768 58519 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("rng-dt" include nil nil [1335 1352])
            ("rng-util" include nil nil [1353 1372])
            ("xsd-regexp" include nil nil [1373 1394])
            ("put" code nil nil [1411 1503])
            ("rng-xsd-compile" function (:arguments ("name" "params")) nil [1520 2753])
            ("rng-xsd-compile1" function (:arguments ("name" "params" "convert")) nil [2771 5376])
            ("rng-xsd-string-to-non-negative-integer" function (:arguments ("str")) nil [5378 5556])
            ("rng-xsd-collapse-space" function (:arguments ("str" "convert" "args")) nil [5558 5716])
            ("rng-xsd-replace-space" function (:arguments ("str" "convert" "args")) nil [5718 6022])
            ("put" code nil nil [6024 6087])
            ("put" code nil nil [6088 6151])
            ("put" code nil nil [6152 6215])
            ("put" code nil nil [6216 6279])
            ("put" code nil nil [6280 6330])
            ("put" code nil nil [6331 6388])
            ("put" code nil nil [6389 6446])
            ("put" code nil nil [6447 6514])
            ("put" code nil nil [6515 6576])
            ("rng-xsd-check-min-exclusive" function (:arguments ("str" "less-than-fun" "limit" "convert" "args")) nil [6578 6762])
            ("rng-xsd-check-min-inclusive" function (:arguments ("str" "less-than-fun" "limit" "convert" "args")) nil [6764 6977])
            ("rng-xsd-check-max-exclusive" function (:arguments ("str" "less-than-fun" "limit" "convert" "args")) nil [6979 7163])
            ("rng-xsd-check-max-inclusive" function (:arguments ("str" "less-than-fun" "limit" "convert" "args")) nil [7165 7378])
            ("rng-xsd-check-min-length" function (:arguments ("str" "length-fun" "limit" "convert" "args")) nil [7380 7560])
            ("rng-xsd-check-max-length" function (:arguments ("str" "length-fun" "limit" "convert" "args")) nil [7562 7742])
            ("rng-xsd-check-length" function (:arguments ("str" "length-fun" "len" "convert" "args")) nil [7744 7915])
            ("rng-xsd-check-fraction-digits" function (:arguments ("str" "n" "convert" "args")) nil [7917 8080])
            ("rng-xsd-check-total-digits" function (:arguments ("str" "n" "convert" "args")) nil [8082 8276])
            ("rng-xsd-check-pattern" function (:arguments ("str" "regexp" "convert" "args")) nil [8278 8443])
            ("rng-xsd-convert-boolean" function (:arguments ("string")) nil [8446 8624])
            ("rng-xsd-convert-decimal" function (:arguments ("string")) nil [8626 9570])
            ("rng-xsd-convert-integer" function (:arguments ("string")) nil [9572 9923])
            ("rng-xsd-decimal<" function (:arguments ("n1" "n2")) nil [9925 9997])
            ("rng-xsd-compare-decimal" function (:arguments ("n1" "n2")) nil [9999 10505])
            ("rng-xsd-float-regexp" variable
               (:constant-flag t
                :default-value (concat "\\`[ 
	]*\\(?:" "\\(" "[-+]?\\(?:[0-9]+\\(?:\\.[0-9]*\\)?\\|\\.[0-9]+\\)" "\\(?:[eE][-+]?[0-9]+\\)?" "\\)" "\\|\\(INF\\)" "\\|\\(-INF\\)" "\\|\\(NaN\\)" "\\)[ 
	]*\\'"))
                nil [10507 10750])
            ("rng-xsd-convert-float" function (:arguments ("string")) nil [10752 11088])
            ("rng-xsd-float<" function (:arguments ("f1" "f2")) nil [11090 11190])
            ("rng-xsd-convert-token" function (:arguments ("string" "regexp")) nil [11192 11305])
            ("rng-xsd-convert-hex-binary" function (:arguments ("string")) nil [11307 11495])
            ("rng-xsd-hex-binary-length" function (:arguments ("obj")) nil [11497 11557])
            ("rng-xsd-base64-binary-regexp" variable
               (:constant-flag t
                :default-value (let ((S "[ 	
]*") (B04 "[AQgw]") (B16 "[AEIMQUYcgkosw048]") (B64 "[A-Za-z0-9+/]")) (concat "\\`" S "\\(?:\\(?:" B64 S "\\)\\{4\\}\\)*" "\\(?:" B64 S B64 S B16 S "=" S "\\|" B64 S B04 S "=" S "=" S "\\)?\\'")))
                nil [11559 11831])
            ("rng-xsd-convert-base64-binary" function (:arguments ("string")) nil [11833 11999])
            ("rng-xsd-base64-binary-length" function (:arguments ("obj")) nil [12001 12213])
            ("rng-xsd-convert-any-uri" function (:arguments ("string")) nil [12215 12502])
            ("rng-xsd-make-date-time-regexp" function (:arguments ("template")) nil [12504 14269])
            ("rng-xsd-seconds-per-day" variable
               (:constant-flag t
                :default-value (* 24 60 60))
                nil [14271 14318])
            ("rng-xsd-days-in-month" variable
               (:constant-flag t
                :default-value [31 28 31 30 31 30 31 31 30 31 30 31])
                nil [14319 14389])
            ("rng-xsd-days-in-month" function (:arguments ("year" "month")) nil [14391 14538])
            ("rng-xsd-months-to-days" variable
               (:constant-flag t
                :default-value (let ((v (make-vector 12 nil)) (total 0) (i 0)) (while (< i 12) (setq total (+ total (aref rng-xsd-days-in-month i))) (aset v i total) (setq i (1+ i))) v))
                nil [14540 14758])
            ("rng-xsd-convert-date-time" function (:arguments ("string" "regexp")) nil [14760 17234])
            ("rng-xsd-leap-year-p" function (:arguments ("year")) nil [17236 17350])
            ("rng-xsd-time-to-seconds" function (:arguments ("hour" "minute" "second")) nil [17352 17457])
            ("rng-xsd-max-tz" variable
               (:constant-flag t
                :default-value (rng-xsd-time-to-seconds 14 0 0))
                nil [17459 17517])
            ("rng-xsd-date-time<" function (:arguments ("dt1" "dt2")) nil [17519 17862])
            ("rng-xsd-add-seconds" function (:arguments ("date" "offset")) nil [17864 18234])
            ("rng-xsd-number-list<" function (:arguments ("numbers1" "numbers2")) nil [18236 18471])
            ("rng-xsd-date-to-days" function (:arguments ("year" "month" "day")) nil [18473 18871])
            ("rng-xsd-days-in-years" function (:arguments ("years")) nil [18873 19056])
            ("rng-xsd-day-number-in-year" function (:arguments ("year" "month" "day")) nil [19058 19264])
            ("rng-xsd-duration-regexp" variable
               (:constant-flag t
                :default-value "\\`[ 	
]*\\(-\\)?P\\([0-9]+Y\\)?\\([0-9]+M\\)?\\([0-9]+D\\)?\\(?:T\\([0-9]+H\\)?\\([0-9]+M\\)?\\(\\([0-9]+\\(?:\\.[0-9]*\\)?\\|\\.[0-9]+\\)S\\)?\\)?[ 	
]*\\'")
                nil [19266 19480])
            ("rng-xsd-convert-duration" function (:arguments ("string")) nil [19483 20141])
            ("rng-xsd-min-seconds-per-month" variable
               (:constant-flag t
                :default-value (* 28 rng-xsd-seconds-per-day))
                nil [20143 20214])
            ("rng-xsd-duration<" function (:arguments ("d1" "d2")) nil [20216 20797])
            ("xsd-duration-reference-dates" variable
               (:constant-flag t
                :default-value (quote ((1696 . 9) (1697 . 2) (1903 . 3) (1903 . 7))))
                nil [20799 20887])
            ("rng-xsd-months-seconds<" function (:arguments ("months1" "seconds1" "months2" "seconds2")) nil [20889 21398])
            ("rng-xsd-month-seconds" function (:arguments ("months" "ref-year" "ref-month")) nil [21401 21694])
            ("rng-xsd-years-per-gregorian-cycle" variable
               (:constant-flag t
                :default-value 400)
                nil [21696 21744])
            ("rng-xsd-months-per-gregorian-cycle" variable
               (:constant-flag t
                :default-value (* rng-xsd-years-per-gregorian-cycle 12))
                nil [21745 21833])
            ("rng-xsd-leap-years-per-gregorian-cycle" variable
               (:constant-flag t
                :default-value (- 100 (- 4 1)))
                nil [21834 21899])
            ("rng-xsd-days-per-gregorian-cycle" variable
               (:constant-flag t
                :default-value (+ (* 365 rng-xsd-years-per-gregorian-cycle) rng-xsd-leap-years-per-gregorian-cycle))
                nil [21900 22035])
            ("rng-xsd-month-days" function (:arguments ("months" "ref-year" "ref-month")) nil [22037 22744])
            ("rng-xsd-duration-months" function (:arguments ("d")) nil [22746 22821])
            ("rng-xsd-duration-seconds" function (:arguments ("d")) nil [22823 22970])
            ("rng-xsd-convert-qname" function (:arguments ("string")) nil [22972 23605])
            ("rng-xsd-convert-list" function (:arguments ("string" "convert" "args")) nil [23607 24098])
            ("rng-xsd-strcmp" function (:arguments ("s1" "s2")) nil [24100 24188])
            ("put" code nil nil [24190 24232])
            ("put" code nil nil [24233 24270])
            ("put" code nil nil [24271 24312])
            ("put" code nil nil [24314 24366])
            ("put" code nil nil [24367 24414])
            ("put" code nil nil [24415 24466])
            ("put" code nil nil [24468 24509])
            ("put" code nil nil [24510 24546])
            ("put" code nil nil [24547 24587])
            ("put" code nil nil [24589 24652])
            ("put" code nil nil [24653 24712])
            ("put" code nil nil [24714 24783])
            ("put" code nil nil [24784 24849])
            ("put" code nil nil [24851 24909])
            ("put" code nil nil [24911 24965])
            ("put" code nil nil [24966 25013])
            ("put" code nil nil [25015 25070])
            ("put" code nil nil [25071 25119])
            ("put" code nil nil [25121 25179])
            ("put" code nil nil [25180 25231])
            ("put" code nil nil [25233 25291])
            ("put" code nil nil [25292 25343])
            ("rng-xsd-def-integer-type" function (:arguments ("name" "min" "max")) nil [25345 25615])
            ("rng-xsd-def-token-type" function (:arguments ("name" "regexp")) nil [25617 25835])
            ("rng-xsd-def-token-type" code nil nil [25837 25889])
            ("rng-xsd-def-token-type" code nil nil [25890 25952])
            ("rng-xsd-def-token-type" code nil nil [25953 26015])
            ("rng-xsd-def-token-type" code nil nil [26016 26103])
            ("put" code nil nil [26105 26166])
            ("put" code nil nil [26167 26204])
            ("put" code nil nil [26205 26262])
            ("put" code nil nil [26263 26296])
            ("put" code nil nil [26297 26357])
            ("put" code nil nil [26358 26394])
            ("rng-xsd-def-list-type" function (:arguments ("name" "member-name")) nil [26396 26582])
            ("rng-xsd-def-list-type" code nil nil [26584 26626])
            ("rng-xsd-def-list-type" code nil nil [26627 26665])
            ("rng-xsd-def-list-type" code nil nil [26666 26707])
            ("put" code nil nil [26709 26766])
            ("put" code nil nil [26767 26804])
            ("put" code nil nil [26806 26860])
            ("put" code nil nil [26861 26918])
            ("rng-xsd-long-max" variable
               (:constant-flag t
                :default-value "9223372036854775807")
                nil [26920 26969])
            ("rng-xsd-long-min" variable
               (:constant-flag t
                :default-value "-9223372036854775808")
                nil [26970 27020])
            ("rng-xsd-int-max" variable
               (:constant-flag t
                :default-value "2147483647")
                nil [27021 27060])
            ("rng-xsd-int-min" variable
               (:constant-flag t
                :default-value "-2147483648")
                nil [27061 27101])
            ("rng-xsd-short-max" variable
               (:constant-flag t
                :default-value "32767")
                nil [27102 27138])
            ("rng-xsd-short-min" variable
               (:constant-flag t
                :default-value "-32768")
                nil [27139 27176])
            ("rng-xsd-byte-max" variable
               (:constant-flag t
                :default-value "127")
                nil [27177 27210])
            ("rng-xsd-byte-min" variable
               (:constant-flag t
                :default-value "-128")
                nil [27211 27245])
            ("rng-xsd-unsigned-long-max" variable
               (:constant-flag t
                :default-value "18446744073709551615")
                nil [27246 27305])
            ("rng-xsd-unsigned-int-max" variable
               (:constant-flag t
                :default-value "4294967295")
                nil [27306 27354])
            ("rng-xsd-unsigned-short-max" variable
               (:constant-flag t
                :default-value "65535")
                nil [27355 27400])
            ("rng-xsd-unsigned-byte-max" variable
               (:constant-flag t
                :default-value "255")
                nil [27401 27443])
            ("rng-xsd-def-integer-type" code nil nil [27445 27499])
            ("rng-xsd-def-integer-type" code nil nil [27500 27551])
            ("rng-xsd-def-integer-type" code nil nil [27552 27606])
            ("rng-xsd-def-integer-type" code nil nil [27607 27659])
            ("rng-xsd-def-integer-type" code nil nil [27660 27726])
            ("rng-xsd-def-integer-type" code nil nil [27727 27790])
            ("rng-xsd-def-integer-type" code nil nil [27791 27860])
            ("rng-xsd-def-integer-type" code nil nil [27861 27927])
            ("rng-xsd-def-integer-type" code nil nil [27928 27998])
            ("rng-xsd-def-integer-type" code nil nil [27999 28067])
            ("rng-xsd-def-integer-type" code nil nil [28068 28140])
            ("rng-xsd-def-integer-type" code nil nil [28141 28211])
            ("rng-xsd-def-date-time-type" function (:arguments ("name" "template")) nil [28213 28427])
            ("rng-xsd-def-date-time-type" code nil nil [28429 28477])
            ("rng-xsd-def-date-time-type" code nil nil [28478 28516])
            ("rng-xsd-def-date-time-type" code nil nil [28517 28559])
            ("rng-xsd-def-date-time-type" code nil nil [28560 28606])
            ("rng-xsd-def-date-time-type" code nil nil [28607 28646])
            ("rng-xsd-def-date-time-type" code nil nil [28647 28694])
            ("rng-xsd-def-date-time-type" code nil nil [28695 28736])
            ("rng-xsd-def-date-time-type" code nil nil [28737 28779])
            ("put" code nil nil [28781 28841])
            ("put" code nil nil [28842 28895])
            ("rng-xsd" package nil nil [28897 28915]))          
      :file "rng-xsd.el.gz"
      :pointmax 28942
      :fsize 7783
      :lastmodtime '(22768 58519 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("xmltok" include nil nil [4725 4742])
            ("nxml-enc" include nil nil [4743 4762])
            ("nxml-util" include nil nil [4763 4783])
            ("nxml-ns" include nil nil [4784 4802])
            ("rng-match" include nil nil [4803 4823])
            ("rng-util" include nil nil [4824 4843])
            ("rng-loc" include nil nil [4844 4862])
            ("relax-ng" customgroup (:user-visible-flag t) nil [4892 5001])
            ("rng-error" variable
               (:default-value (quote ((t (:inherit font-lock-warning-face))))
                :type "face")
                nil [5003 5120])
            ("rng-state-cache-distance" variable (:default-value 2000) nil [5122 5275])
            ("rng-validate-chunk-size" variable (:default-value 8000) nil [5277 5585])
            ("rng-validate-delay" variable (:default-value 1.5) nil [5587 5829])
            ("rng-validate-quick-delay" variable (:default-value 0.3) nil [5831 6034])
            ("rng-validate-timer" variable nil nil [6057 6088])
            ("make-variable-buffer-local" code nil nil [6089 6137])
            ("put" code nil nil [6215 6259])
            ("rng-validate-quick-timer" variable nil nil [6261 6298])
            ("make-variable-buffer-local" code nil nil [6299 6353])
            ("put" code nil nil [6431 6481])
            ("rng-error-count" variable nil nil [6483 6617])
            ("make-variable-buffer-local" code nil nil [6618 6663])
            ("rng-message-overlay" variable nil nil [6665 6788])
            ("make-variable-buffer-local" code nil nil [6789 6838])
            ("rng-message-overlay-inhibit-point" variable nil nil [6840 7126])
            ("make-variable-buffer-local" code nil nil [7127 7190])
            ("rng-message-overlay-current" variable nil nil [7192 7299])
            ("make-variable-buffer-local" code nil nil [7300 7357])
            ("rng-open-elements" variable nil nil [7359 7605])
            ("rng-pending-contents" variable nil nil [7607 7962])
            ("rng-collecting-text" variable nil nil [7964 7996])
            ("rng-validate-up-to-date-end" variable nil nil [7998 8100])
            ("make-variable-buffer-local" code nil nil [8101 8158])
            ("rng-conditional-up-to-date-start" variable nil nil [8160 8708])
            ("make-variable-buffer-local" code nil nil [8709 8771])
            ("rng-conditional-up-to-date-end" variable nil nil [8773 8990])
            ("make-variable-buffer-local" code nil nil [8991 9051])
            ("rng-parsing-for-state" variable nil nil [9053 9186])
            ("rng-validate-mode" variable nil nil [9188 9218])
            ("make-variable-buffer-local" code nil nil [9219 9266])
            ("rng-dtd" variable nil nil [9268 9288])
            ("make-variable-buffer-local" code nil nil [9289 9326])
            ("rng-validate-mode" function
               (:user-visible-flag t
                :arguments ("arg" "no-change-schema"))
                nil [9343 12614])
            ("rng-set-schema-file-and-validate" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [12616 12891])
            ("rng-set-document-type-and-validate" function (:arguments ("type-id")) nil [12893 13077])
            ("rng-auto-set-schema-and-validate" function (:user-visible-flag t) nil [13079 13335])
            ("rng-after-change-function" function (:arguments ("start" "end" "pre-change-len")) nil [13337 15033])
            ("rng-compute-mode-line-string" function nil nil [15035 15478])
            ("rng-cancel-timers" function nil nil [15480 15765])
            ("rng-kill-timers" function nil nil [15767 16401])
            ("rng-activate-timers" function nil nil [16403 16784])
            ("rng-validate-clear" function nil nil [16786 16841])
            ("rng-validate-display-point" variable nil nil [16996 17035])
            ("rng-validate-display-modified-p" variable nil nil [17036 17080])
            ("rng-validate-while-idle-continue-p" function nil nil [17082 17574])
            ("rng-validate-while-idle" function (:arguments ("buffer")) nil [17884 18327])
            ("rng-validate-quick-while-idle" function (:arguments ("buffer")) nil [18329 18635])
            ("rng-validate-done" function nil nil [18637 18917])
            ("rng-do-some-validation" function (:arguments ("continue-p-function")) nil [18919 19816])
            ("rng-validate-prepare" function nil nil [19818 20611])
            ("rng-dtd-trivial-p" function (:arguments ("dtd")) nil [20613 20775])
            ("rng-do-some-validation-1" function (:arguments ("continue-p-function")) nil [20777 23745])
            ("rng-clear-conditional-region" function nil nil [23747 24068])
            ("rng-clear-cached-state" function (:arguments ("start" "end")) nil [24070 24212])
            ("rng-cache-state" function (:arguments ("pos")) nil [24214 24397])
            ("rng-state-matches-current" function (:arguments ("state")) nil [24399 24587])
            ("rng-get-state" function nil nil [24589 24676])
            ("rng-restore-state" function (:arguments ("state")) nil [24678 24936])
            ("rng-set-initial-state" function nil nil [24938 25107])
            ("rng-clear-overlays" function (:arguments ("beg" "end")) nil [25109 25771])
            ("rng-mark-xmltok-errors" function nil nil [25790 26046])
            ("rng-mark-invalid" function (:arguments ("message" "beg" "end")) nil [26048 26125])
            ("rng-mark-not-well-formed" function (:arguments ("message" "beg" "end")) nil [26127 26298])
            ("rng-mark-error" function (:arguments ("message" "beg" "end")) nil [26300 27371])
            ("put" code nil nil [27373 27406])
            ("put" code nil nil [27407 27465])
            ("rng-error-modified" function (:arguments ("overlay" "after-p" "beg" "end" "pre-change-len")) nil [27552 27872])
            ("rng-echo-area-clear-function" function nil nil [27874 27954])
            ("rng-maybe-echo-error-at-point" function nil nil [27978 28170])
            ("rng-error-overlay-after" function (:arguments ("pos")) nil [28172 28553])
            ("rng-first-error" function (:user-visible-flag t) nil [28555 28987])
            ("rng-mouse-first-error" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [28989 29175])
            ("rng-next-error" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [29177 29688])
            ("rng-previous-error" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [29690 30209])
            ("rng-next-error-1" function (:arguments ("arg")) nil [30211 31174])
            ("rng-previous-error-1" function (:arguments ("arg")) nil [31176 31935])
            ("rng-goto-error-overlay" function (:arguments ("err")) nil [31937 32151])
            ("rng-error-overlay-message" function (:arguments ("err")) nil [32153 32625])
            ("rng-current-message-from-error-overlay-p" function nil nil [32627 32826])
            ("rng-find-next-error-overlay" function (:arguments ("pos")) nil [32828 33678])
            ("rng-find-previous-error-overlay" function (:arguments ("pos")) nil [33680 34460])
            ("rng-forward" function (:arguments ("limit")) nil [34475 36035])
            ("rng-process-start-tag" function (:arguments ("tag-type")) nil [36037 37003])
            ("rng-process-namespaces" function nil nil [37005 37916])
            ("rng-process-tag-name" function nil nil [37918 39068])
            ("rng-process-attributes" function nil nil [39070 40044])
            ("rng-process-start-tag-close" function nil nil [40046 40255])
            ("rng-mark-start-tag-close" function (:arguments ("args")) nil [40257 40492])
            ("rng-recover-bad-element-prefix" function nil nil [40494 40663])
            ("rng-recover-bad-attribute-prefix" function (:arguments ("att")) nil [40665 40834])
            ("rng-recover-duplicate-attribute-name" function (:arguments ("att")) nil [40836 41007])
            ("rng-recover-start-tag-open" function (:arguments ("name")) nil [41009 41867])
            ("rng-recover-attribute-value" function (:arguments ("att")) nil [41869 42174])
            ("rng-recover-attribute-name" function (:arguments ("att")) nil [42176 42339])
            ("rng-missing-attributes-message" function nil nil [42341 42846])
            ("rng-process-end-tag" function (:arguments ("partial")) nil [42848 43192])
            ("rng-end-element" function nil nil [43194 43988])
            ("rng-missing-element-message" function nil nil [43990 44218])
            ("rng-recover-mismatched-end-tag" function nil nil [44220 44968])
            ("rng-mark-missing-end-tags" function (:arguments ("missing")) nil [44970 45333])
            ("rng-mark-mismatched-end-tag" function nil nil [45335 45472])
            ("rng-push-tag" function (:arguments ("prefix-local-name")) nil [45474 45585])
            ("rng-pop-tag" function nil nil [45587 45660])
            ("rng-contents-string" function nil nil [45662 45948])
            ("rng-segment-string" function (:arguments ("segment")) nil [45950 46073])
            ("rng-segment-blank-p" function (:arguments ("segment")) nil [46075 46217])
            ("rng-contents-region" function nil nil [46219 46515])
            ("rng-process-text" function (:arguments ("start" "end" "whitespace" "value")) nil [46517 47310])
            ("rng-process-unknown-char" function nil nil [47312 47443])
            ("rng-process-unknown-entity" function nil nil [47445 47546])
            ("rng-region-blank-p" function (:arguments ("beg" "end")) nil [47548 47685])
            ("rng-flush-text" function nil nil [47687 48076])
            ("rng-process-end-document" function nil nil [48078 48576])
            ("rng-process-encoding-name" function (:arguments ("beg" "end")) nil [48578 48845])
            ("rng-name-to-string" function (:arguments ("name" "attributep")) nil [48847 49192])
            ("rng-valid" package nil nil [49194 49214]))          
      :file "rng-valid.el.gz"
      :pointmax 49243
      :fsize 12589
      :lastmodtime '(22768 58519 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("rng-pttrn" include nil nil [1177 1197])
            ("rng-util" include nil nil [1198 1217])
            ("rng-dt" include nil nil [1218 1235])
            ("cl-lib" include nil nil [1255 1272])
            ("rng-not-allowed-ipattern" variable nil nil [1275 1312])
            ("rng-empty-ipattern" variable nil nil [1313 1344])
            ("rng-text-ipattern" variable nil nil [1345 1375])
            ("rng-compile-table" variable nil nil [1377 1407])
            ("rng-being-compiled" variable nil nil [1409 1547])
            ("rng-ipattern-table" variable nil nil [1549 1580])
            ("rng-last-ipattern-index" variable nil nil [1582 1618])
            ("rng-match-state" variable nil nil [1620 1710])
            ("rng-update-match-state" function (:arguments ("new-state")) nil [1734 1941])
            ("cl-defstruct" code nil nil [1966 2545])
            ("defalias" code nil nil [2690 2750])
            ("defalias" code nil nil [2751 2808])
            ("defalias" code nil nil [2809 2868])
            ("rng-memo-map-alist-max" variable
               (:constant-flag t
                :default-value 10)
                nil [2870 2906])
            ("rng-memo-map-get" function (:arguments ("key" "mm")) nil [2908 3160])
            ("rng-memo-map-add" function (:arguments ("key" "value" "mm" "weakness")) nil [3162 4544])
            ("rng-ipattern-maybe-init" function nil nil [4546 4709])
            ("rng-ipattern-clear" function nil nil [4711 4837])
            ("rng-gen-ipattern-index" function nil nil [4839 4937])
            ("rng-put-ipattern" function (:arguments ("key" "type" "name-class" "child" "nullable")) nil [4939 5186])
            ("rng-get-ipattern" function (:arguments ("key")) nil [5188 5253])
            ("or" code nil nil [5255 5371])
            ("or" code nil nil [5373 5469])
            ("or" code nil nil [5471 5564])
            ("rng-const-ipatterns" variable
               (:constant-flag t
                :default-value (list rng-not-allowed-ipattern rng-empty-ipattern rng-text-ipattern))
                nil [5566 5669])
            ("rng-intern-after" function (:arguments ("child" "after")) nil [5671 5996])
            ("rng-intern-attribute" function (:arguments ("name-class" "ipattern")) nil [5998 6340])
            ("rng-intern-data" function (:arguments ("dt" "matches-anything")) nil [6342 6654])
            ("rng-intern-data-except" function (:arguments ("dt" "ipattern")) nil [6656 6853])
            ("rng-intern-value" function (:arguments ("dt" "obj")) nil [6855 7019])
            ("rng-intern-one-or-more" function (:arguments ("ipattern")) nil [7021 7352])
            ("rng-intern-one-or-more-shortcut" function (:arguments ("ipattern")) nil [7354 7609])
            ("rng-intern-list" function (:arguments ("ipattern")) nil [7611 7909])
            ("rng-intern-group" function (:arguments ("ipatterns")) nil [7911 8400])
            ("rng-intern-group-shortcut" function (:arguments ("ipatterns")) nil [8402 9261])
            ("rng-normalize-group-list" function (:arguments ("ipatterns")) nil [9263 10120])
            ("rng-intern-interleave" function (:arguments ("ipatterns")) nil [10122 10564])
            ("rng-normalize-interleave-list" function (:arguments ("ipatterns")) nil [10566 11450])
            ("rng-intern-choice" function (:arguments ("ipatterns")) nil [11506 11858])
            ("rng-intern-optional" function (:arguments ("ipattern")) nil [11860 12370])
            ("rng-intern-choice1" function (:arguments ("normalized" "nullable")) nil [12373 12607])
            ("rng-intern-choice-shortcut" function (:arguments ("ipatterns")) nil [12609 13181])
            ("rng-normalize-choice-list" function (:arguments ("ipatterns")) nil [13183 14691])
            ("rng-compare-ipattern" function (:arguments ("p1" "p2")) nil [14693 14790])
            ("rng-name-class-contains" function (:arguments ("nc" "nm")) nil [14810 14927])
            ("rng-name-class-contains1" function (:arguments ("nc" "nm")) nil [14929 15535])
            ("rng-name-class-possible-names" function (:arguments ("nc" "accum")) nil [15537 16282])
            ("rng-ipattern-to-string" function (:arguments ("ipattern")) nil [16309 17669])
            ("rng-name-class-to-string" function (:arguments ("nc")) nil [17671 17912])
            ("rng-compile-maybe-init" function nil nil [17930 18049])
            ("rng-compile-clear" function nil nil [18051 18138])
            ("rng-compile" function (:arguments ("pattern")) nil [18140 18356])
            ("put" code nil nil [18358 18402])
            ("put" code nil nil [18403 18445])
            ("put" code nil nil [18446 18502])
            ("put" code nil nil [18503 18551])
            ("put" code nil nil [18552 18604])
            ("put" code nil nil [18605 18651])
            ("put" code nil nil [18652 18702])
            ("put" code nil nil [18703 18747])
            ("put" code nil nil [18748 18802])
            ("put" code nil nil [18803 18843])
            ("put" code nil nil [18844 18900])
            ("put" code nil nil [18901 18959])
            ("put" code nil nil [18960 19004])
            ("put" code nil nil [19005 19047])
            ("put" code nil nil [19048 19104])
            ("put" code nil nil [19105 19149])
            ("put" code nil nil [19150 19192])
            ("rng-compile-not-allowed" function nil nil [19194 19253])
            ("rng-compile-empty" function nil nil [19254 19301])
            ("rng-compile-text" function nil nil [19302 19347])
            ("rng-compile-element" function (:arguments ("name-class" "pattern")) nil [19349 19565])
            ("rng-element-get-child" function (:arguments ("element")) nil [19567 19741])
            ("rng-compile-attribute" function (:arguments ("name-class" "pattern")) nil [19743 19879])
            ("rng-compile-ref" function (:arguments ("pattern" "name")) nil [19881 20191])
            ("rng-compile-one-or-more" function (:arguments ("pattern")) nil [20193 20283])
            ("rng-compile-zero-or-more" function (:arguments ("pattern")) nil [20285 20401])
            ("rng-compile-optional" function (:arguments ("pattern")) nil [20403 20487])
            ("rng-compile-mixed" function (:arguments ("pattern")) nil [20489 20614])
            ("rng-compile-list" function (:arguments ("pattern")) nil [20616 20692])
            ("rng-compile-choice" function (:arguments ("patterns")) nil [20694 20790])
            ("rng-compile-group" function (:arguments ("patterns")) nil [20792 20886])
            ("rng-compile-interleave" function (:arguments ("patterns")) nil [20888 20992])
            ("rng-compile-dt" function (:arguments ("name" "params")) nil [20994 21250])
            ("rng-compile-data" function (:arguments ("name" "params")) nil [21252 21374])
            ("rng-compile-data-except" function (:arguments ("name" "params" "pattern")) nil [21376 21518])
            ("rng-compile-value" function (:arguments ("name" "str" "context")) nil [21520 21845])
            ("rng-compile-name-class" function (:arguments ("nc")) nil [21847 22397])
            ("rng-map-element-attribute" function (:arguments ("function" "pattern" "accum" "args")) nil [22515 23578])
            ("rng-find-element-content-pattern" function (:arguments ("pattern" "accum" "name")) nil [23580 23784])
            ("rng-search-name" function (:arguments ("name" "nc")) nil [23786 24135])
            ("rng-find-name-class-uris" function (:arguments ("nc" "accum")) nil [24137 24589])
            ("rng-accum-namespace-uri" function (:arguments ("ns" "accum")) nil [24591 24703])
            ("rng-ipattern-text-typed-p" function (:arguments ("ipattern")) nil [24722 24971])
            ("rng-ipattern-compute-text-typed-p" function (:arguments ("ipattern")) nil [24973 25760])
            ("rng-start-tag-open-deriv" function (:arguments ("ipattern" "nm")) nil [25762 26033])
            ("rng-ipattern-memo-start-tag-open-deriv" function (:arguments ("ipattern" "nm" "deriv")) nil [26035 26406])
            ("rng-compute-start-tag-open-deriv" function (:arguments ("ipattern" "nm")) nil [26408 27783])
            ("rng-start-attribute-deriv" function (:arguments ("ipattern" "nm")) nil [27785 28060])
            ("rng-ipattern-memo-start-attribute-deriv" function (:arguments ("ipattern" "nm" "deriv")) nil [28062 28384])
            ("rng-compute-start-attribute-deriv" function (:arguments ("ipattern" "nm")) nil [28386 29773])
            ("rng-cons-group-after" function (:arguments ("x" "y")) nil [29775 29879])
            ("rng-subst-group-after" function (:arguments ("new" "old" "list")) nil [29881 30031])
            ("rng-subst-interleave-after" function (:arguments ("new" "old" "list")) nil [30033 30193])
            ("rng-apply-after" function (:arguments ("f" "ipattern")) nil [30195 30546])
            ("rng-start-tag-close-deriv" function (:arguments ("ipattern")) nil [30548 30773])
            ("rng-transform-map" variable
               (:constant-flag t
                :default-value (quote ((choice . rng-transform-choice) (group . rng-transform-group) (interleave . rng-transform-interleave) (one-or-more . rng-transform-one-or-more) (after . rng-transform-after-child))))
                nil [30775 31004])
            ("rng-compute-start-tag-close-deriv" function (:arguments ("ipattern")) nil [31006 31327])
            ("rng-ignore-attributes-deriv" function (:arguments ("ipattern")) nil [31329 31640])
            ("rng-text-only-deriv" function (:arguments ("ipattern")) nil [31642 31843])
            ("rng-compute-text-only-deriv" function (:arguments ("ipattern")) nil [31845 32365])
            ("rng-mixed-text-deriv" function (:arguments ("ipattern")) nil [32367 32572])
            ("rng-compute-mixed-text-deriv" function (:arguments ("ipattern")) nil [32574 33506])
            ("rng-end-tag-deriv" function (:arguments ("ipattern")) nil [33508 33701])
            ("rng-compute-end-tag-deriv" function (:arguments ("ipattern")) nil [33703 34110])
            ("rng-data-deriv" function (:arguments ("ipattern" "value")) nil [34112 34901])
            ("rng-namespace-context-tracer" function (:arguments ("used" "getter" "args")) nil [34903 35042])
            ("rng-namespace-context-get-no-trace" function nil nil [35044 35264])
            ("rng-memo-data-deriv-max-length" variable
               (:constant-flag t
                :default-value 80)
                nil [35266 35369])
            ("rng-ipattern-memo-data-deriv" function (:arguments ("ipattern" "value" "context" "deriv")) nil [35371 35817])
            ("rng-compute-data-deriv" function (:arguments ("ipattern" "value")) nil [35819 37791])
            ("rng-transform-multi" function (:arguments ("f" "ipattern" "interner")) nil [37793 38022])
            ("rng-transform-choice" function (:arguments ("f" "ipattern")) nil [38024 38119])
            ("rng-transform-group" function (:arguments ("f" "ipattern")) nil [38121 38214])
            ("rng-transform-interleave" function (:arguments ("f" "ipattern")) nil [38216 38319])
            ("rng-transform-one-or-more" function (:arguments ("f" "ipattern")) nil [38321 38536])
            ("rng-transform-after-child" function (:arguments ("f" "ipattern")) nil [38538 38781])
            ("rng-transform-interleave-single" function (:arguments ("f" "subster" "ipattern")) nil [38783 39239])
            ("rng-transform-group-nullable" function (:arguments ("f" "conser" "ipattern")) nil [39241 39653])
            ("rng-transform-group-nullable-gen-choices" function (:arguments ("f" "conser" "members")) nil [39655 39975])
            ("rng-members-eq" function (:arguments ("list1" "list2")) nil [39977 40176])
            ("rng-ipattern-after" function (:arguments ("ipattern")) nil [40179 40528])
            ("rng-unknown-start-tag-open-deriv" function (:arguments ("ipattern")) nil [40530 40641])
            ("rng-ipattern-optionalize-elements" function (:arguments ("ipattern")) nil [40643 40971])
            ("rng-ipattern-empty-before-p" function (:arguments ("ipattern")) nil [40973 41409])
            ("rng-ipattern-possible-start-tags" function (:arguments ("ipattern" "accum")) nil [41411 42515])
            ("rng-ipattern-start-tag-possible-p" function (:arguments ("ipattern")) nil [42517 43463])
            ("rng-ipattern-possible-attributes" function (:arguments ("ipattern" "accum")) nil [43465 44188])
            ("rng-ipattern-possible-values" function (:arguments ("ipattern" "accum")) nil [44190 44808])
            ("rng-ipattern-required-element" function (:arguments ("ipattern")) nil [44810 46270])
            ("rng-ipattern-required-attributes" function (:arguments ("ipattern" "accum")) nil [46272 47587])
            ("rng-compile-error" function (:arguments ("args")) nil [47589 47697])
            ("define-error" code nil nil [47699 47762])
            ("rng-match-state" function nil nil [47782 47827])
            ("rng-set-match-state" function (:arguments ("state")) nil [47829 47898])
            ("rng-match-state-equal" function (:arguments ("state")) nil [47900 47969])
            ("rng-schema-changed" function nil nil [47971 48045])
            ("rng-match-init-buffer" function nil nil [48047 48215])
            ("rng-match-start-document" function nil nil [48217 48428])
            ("rng-match-start-tag-open" function (:arguments ("name")) nil [48430 48554])
            ("rng-match-attribute-name" function (:arguments ("name")) nil [48556 48682])
            ("rng-match-attribute-value" function (:arguments ("value")) nil [48684 48798])
            ("rng-match-element-value" function (:arguments ("value")) nil [48800 48993])
            ("rng-match-start-tag-close" function nil nil [48995 49102])
            ("rng-match-mixed-text" function nil nil [49104 49201])
            ("rng-match-end-tag" function nil nil [49203 49294])
            ("rng-match-after" function nil nil [49296 49389])
            ("rng-match-out-of-context-start-tag-open" function (:arguments ("name")) nil [49391 49761])
            ("rng-match-possible-namespace-uris" function nil nil [49763 50115])
            ("rng-match-unknown-start-tag-open" function nil nil [50117 50241])
            ("rng-match-optionalize-elements" function nil nil [50243 50366])
            ("rng-match-ignore-attributes" function nil nil [50368 50482])
            ("rng-match-text-typed-p" function nil nil [50484 50563])
            ("rng-match-empty-content" function nil nil [50565 50690])
            ("rng-match-empty-before-p" function nil nil [50692 50954])
            ("rng-match-infer-start-tag-namespace" function (:arguments ("local-name")) nil [50956 51502])
            ("rng-match-nullable-p" function nil nil [51504 51578])
            ("rng-match-possible-start-tag-names" function nil nil [51580 51959])
            ("rng-match-start-tag-possible-p" function nil nil [52032 52174])
            ("rng-match-possible-attribute-names" function nil nil [52176 52427])
            ("rng-match-possible-value-strings" function nil nil [52429 52664])
            ("rng-match-required-element-name" function nil nil [52666 52826])
            ("rng-match-required-attribute-names" function nil nil [52828 52993])
            ("rng-match-save" function (:arguments ("body")) nil [52995 53219])
            ("rng-match-with-schema" function (:arguments ("schema" "body")) nil [53221 53565])
            ("rng-match" package nil nil [53567 53587]))          
      :file "rng-match.el.gz"
      :pointmax 53616
      :fsize 10425
      :lastmodtime '(22768 58519 0 0)
      :unmatched-syntax '((close-paren 1272 . 1273) (symbol 1237 . 1254) (open-paren 1236 . 1237)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("easymenu" include nil nil [913 932])
            ("xmltok" include nil nil [933 950])
            ("nxml-util" include nil nil [951 971])
            ("nxml-ns" include nil nil [972 990])
            ("rng-match" include nil nil [991 1011])
            ("rng-util" include nil nil [1012 1031])
            ("rng-valid" include nil nil [1032 1052])
            ("nxml-mode" include nil nil [1053 1073])
            ("rng-loc" include nil nil [1074 1092])
            ("rng-nxml-auto-validate-flag" variable (:default-value t) nil [1094 1238])
            ("rng-preferred-prefix-alist" variable (:default-value (quote (("http://www.w3.org/1999/XSL/Transform" . "xsl") ("http://www.w3.org/1999/02/22-rdf-syntax-ns#" . "rdf") ("http://www.w3.org/1999/xlink" . "xlink") ("http://www.w3.org/2001/XmlSchema" . "xsd") ("http://www.w3.org/2001/XMLSchema-instance" . "xsi") ("http://purl.org/dc/elements/1.1/" . "dc") ("http://purl.org/dc/terms/" . "dcterms")))) nil [1240 1828])
            ("rng-complete-end-tags-after-<" variable (:default-value t) nil [1830 1975])
            ("rng-nxml-easy-menu" variable (:default-value (quote ("XML" ["Show Outline Only" nxml-hide-all-text-content] ["Show Everything" nxml-show-all] "---" ["Validation" rng-validate-mode :style toggle :selected rng-validate-mode] "---" ("Set Schema" ["Automatically" rng-auto-set-schema] ("For Document Type" :filter (lambda (menu) (mapcar (lambda (type-id) (vector type-id (list (quote rng-set-document-type) type-id))) (rng-possible-type-ids)))) ["Any Well-Formed XML" rng-set-vacuous-schema] ["File..." rng-set-schema-file]) ["Show Schema Location" rng-what-schema] ["Save Schema Location" rng-save-schema-location :help "Save the location of the schema currently being used for this buffer"] "---" ["First Error" rng-first-error :active rng-validate-mode] ["Next Error" rng-next-error :active rng-validate-mode] "---" ["Customize nXML" (customize-group (quote nxml))]))) nil [1977 2921])
            ("rng-nxml-mode-init" function (:user-visible-flag t) nil [2938 4255])
            ("rng-tag-history" variable nil nil [4257 4285])
            ("rng-attribute-name-history" variable nil nil [4286 4325])
            ("rng-attribute-value-history" variable nil nil [4326 4366])
            ("rng-complete-target-names" variable nil nil [4368 4406])
            ("rng-complete-name-attribute-flag" variable nil nil [4407 4452])
            ("rng-complete-extra-strings" variable nil nil [4453 4492])
            ("rng-complete" function (:user-visible-flag t) nil [4494 4972])
            ("rng-in-start-tag-name-regex" variable
               (:constant-flag t
                :default-value (replace-regexp-in-string "w" xmltok-ncname-regexp "<\\(?:w\\(?::w?\\)?\\)?\\=" t t))
                nil [4974 5114])
            ("rng-complete-tag" function (:arguments ("lt-pos")) nil [5116 6610])
            ("rng-in-end-tag-name-regex" variable
               (:constant-flag t
                :default-value (replace-regexp-in-string "w" xmltok-ncname-regexp "</\\(?:w\\(?::w?\\)?\\)?\\=" t t))
                nil [6612 6751])
            ("rng-complete-end-tag" function (:arguments ("lt-pos")) nil [6753 7893])
            ("rng-in-attribute-regex" variable
               (:constant-flag t
                :default-value (replace-regexp-in-string "w" xmltok-ncname-regexp "<w\\(?::w\\)?\\(?:[ 	
]+w\\(?::w\\)?[ 	
]*=[ 	
]*\\(?:\"[^\"]*\"\\|'[^']*'\\)\\)*[ 	
]+\\(\\(?:w\\(?::w?\\)?\\)?\\)\\=" t t))
                nil [7895 8144])
            ("rng-undeclared-prefixes" variable nil nil [8146 8182])
            ("rng-complete-attribute-name" function (:arguments ("lt-pos")) nil [8184 8911])
            ("rng-in-attribute-value-regex" variable
               (:constant-flag t
                :default-value (replace-regexp-in-string "w" xmltok-ncname-regexp "<w\\(?::w\\)?\\(?:[ 	
]+w\\(?::w\\)?[ 	
]*=[ 	
]*\\(?:\"[^\"]*\"\\|'[^']*'\\)\\)*[ 	
]+\\(w\\(:w\\)?\\)[ 	
]*=[ 	
]*\\(\"[^\"]*\\|'[^']*\\)\\=" t t))
                nil [8913 9202])
            ("rng-complete-attribute-value" function (:arguments ("lt-pos")) nil [9204 10242])
            ("rng-possible-namespace-uris" function (:arguments ("prefix")) nil [10244 10579])
            ("rng-qname-regexp" variable
               (:constant-flag t
                :default-value (concat "\\`" xmltok-ncname-regexp "\\(?:" ":" xmltok-ncname-regexp "\\)" "?" "\\'"))
                nil [10581 10701])
            ("rng-qname-p" function (:arguments ("string")) nil [10703 10780])
            ("rng-expand-qname" function (:arguments ("qname" "defaultp" "recover-fun")) nil [10782 11128])
            ("rng-start-tag-expand-recover" function (:arguments ("prefix" "local-name")) nil [11130 11286])
            ("rng-split-qname" function (:arguments ("qname")) nil [11288 11462])
            ("rng-in-mixed-content-p" function nil nil [11464 11742])
            ("rng-set-state-after" function (:arguments ("pos")) nil [11744 13543])
            ("rng-adjust-state-for-attribute" function (:arguments ("lt-pos" "start")) nil [13545 14171])
            ("rng-find-undeclared-prefixes" function nil nil [14173 15233])
            ("rng-prune-attribute-at" function (:arguments ("start" "atts")) nil [15235 15482])
            ("rng-adjust-state-for-attribute-value" function (:arguments ("name-start" "colon" "name-end")) nil [15484 15924])
            ("rng-complete-qname-function" function (:arguments ("string" "predicate" "flag")) nil [15926 16272])
            ("rng-generate-qname-list" function (:arguments ("string")) nil [16274 18036])
            ("rng-get-preferred-unused-prefix" function (:arguments ("ns")) nil [18038 18557])
            ("rng-strings-to-completion-alist" function (:arguments ("strings")) nil [18559 18727])
            ("rng-nxml" package nil nil [18729 18748]))          
      :file "rng-nxml.el.gz"
      :pointmax 18776
      :fsize 5448
      :lastmodtime '(22768 58519 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("rng-schema-change-hook" variable nil nil [1994 2084])
            ("rng-current-schema" variable nil nil [2086 2174])
            ("make-variable-buffer-local" code nil nil [2175 2223])
            ("rng-make-ref" function (:arguments ("name")) nil [2225 2275])
            ("rng-ref-set" function (:arguments ("ref" "pattern")) nil [2277 2339])
            ("rng-ref-get" function (:arguments ("ref")) nil [2341 2377])
            ("rng-make-choice" function (:arguments ("patterns")) nil [2379 2439])
            ("rng-make-group" function (:arguments ("patterns")) nil [2441 2499])
            ("rng-make-interleave" function (:arguments ("patterns")) nil [2501 2569])
            ("rng-make-zero-or-more" function (:arguments ("pattern")) nil [2571 2641])
            ("rng-make-one-or-more" function (:arguments ("pattern")) nil [2643 2711])
            ("rng-make-optional" function (:arguments ("pattern")) nil [2713 2775])
            ("rng-make-mixed" function (:arguments ("pattern")) nil [2777 2833])
            ("rng-make-value" function (:arguments ("datatype" "str" "context")) nil [2835 2917])
            ("rng-make-data" function (:arguments ("name" "params")) nil [2919 2981])
            ("rng-make-data-except" function (:arguments ("name" "params" "pattern")) nil [2983 3075])
            ("rng-make-list" function (:arguments ("pattern")) nil [3077 3131])
            ("rng-make-element" function (:arguments ("name-class" "pattern")) nil [3133 3215])
            ("rng-make-attribute" function (:arguments ("name-class" "pattern")) nil [3217 3303])
            ("rng-make-text" function nil nil [3305 3339])
            ("rng-make-empty" function nil nil [3341 3377])
            ("rng-make-not-allowed" function nil nil [3379 3427])
            ("rng-make-any-name-name-class" function nil nil [3429 3482])
            ("rng-make-any-name-except-name-class" function (:arguments ("name-class")) nil [3484 3577])
            ("rng-make-ns-name-name-class" function (:arguments ("ns")) nil [3579 3640])
            ("rng-make-ns-name-except-name-class" function (:arguments ("ns" "name-class")) nil [3642 3739])
            ("rng-make-name-name-class" function (:arguments ("name")) nil [3741 3800])
            ("rng-make-choice-name-class" function (:arguments ("name-classes")) nil [3802 3881])
            ("rng-any-content" variable
               (:constant-flag t
                :default-value (let* ((ref (rng-make-ref "any-content")) (pattern (rng-make-zero-or-more (rng-make-choice (list (rng-make-text) (rng-make-attribute (rng-make-any-name-name-class) (rng-make-text)) (rng-make-element (rng-make-any-name-name-class) ref)))))) (rng-ref-set ref pattern) pattern))
                nil [3883 4315])
            ("rng-any-element" variable
               (:constant-flag t
                :default-value (let* ((ref (rng-make-ref "any-element")) (pattern (rng-make-element (rng-make-any-name-name-class) (rng-make-zero-or-more (rng-make-choice (list (rng-make-text) (rng-make-attribute (rng-make-any-name-name-class) (rng-make-text)) ref)))))) (rng-ref-set ref pattern) pattern))
                nil [4317 4719])
            ("rng-make-name" function (:arguments ("ns" "local-name")) nil [4732 4792])
            ("rng-make-datatype" function (:arguments ("uri" "local-name")) nil [4809 4884])
            ("rng-pttrn" package nil nil [4886 4906]))          
      :file "rng-pttrn.el.gz"
      :pointmax 4935
      :fsize 1480
      :lastmodtime '(22768 58519 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("rng-file-name-uri" function (:arguments ("f")) nil [881 1303])
            ("rng-uri-escape-multibyte" function (:arguments ("uri")) nil [1305 1495])
            ("rng-percent-encode" function (:arguments ("str")) nil [1497 1639])
            ("rng-uri-file-name" function (:arguments ("uri")) nil [1642 1799])
            ("rng-uri-pattern-file-name-regexp" function (:arguments ("pattern")) nil [1801 1964])
            ("rng-uri-pattern-file-name-replace-match" function (:arguments ("pattern")) nil [1966 2064])
            ("rng-uri-file-name-1" function (:arguments ("uri" "pattern")) nil [2111 4246])
            ("rng-uri-error" function (:arguments ("args")) nil [4248 4345])
            ("define-error" code nil nil [4347 4390])
            ("rng-uri-split" function (:arguments ("str")) nil [4392 4727])
            ("rng-uri-join" function (:arguments ("scheme" "authority" "path" "query" "fragment-id")) nil [4729 5199])
            ("rng-uri-resolve" function (:arguments ("uri-ref" "base-uri")) nil [5201 6364])
            ("rng-resolve-path" function (:arguments ("path" "base-path")) nil [6401 7479])
            ("rng-relative-uri" function (:arguments ("full" "base")) nil [7481 8294])
            ("rng-relative-path" function (:arguments ("path" "base-path")) nil [8296 9043])
            ("rng-split-path" function (:arguments ("path")) nil [9045 9320])
            ("rng-join-path" function (:arguments ("segments")) nil [9322 9413])
            ("rng-uri-unescape-multibyte" function (:arguments ("str")) nil [9415 9566])
            ("rng-multibyte-percent-decode" function (:arguments ("str")) nil [9568 9741])
            ("rng-uri-unescape-unibyte" function (:arguments ("str")) nil [9743 9926])
            ("rng-uri-unescape-unibyte-match" function (:arguments ("str")) nil [9928 10260])
            ("rng-uri-unescape-unibyte-replace" function (:arguments ("str" "next-match-index")) nil [10262 10727])
            ("rng-uri" package nil nil [10729 10747]))          
      :file "rng-uri.el.gz"
      :pointmax 10774
      :fsize 3348
      :lastmodtime '(22768 58519 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("rng-util" include nil nil [900 919])
            ("rng-dt-error-reporter" variable nil nil [921 955])
            ("rng-dt-error" function (:arguments ("string" "objs")) nil [957 1089])
            ("rng-dt-namespace-context-getter" variable nil nil [1091 1548])
            ("rng-dt-make-value" function (:arguments ("dt" "str")) nil [1550 1626])
            ("rng-dt-builtin-compile" function (:arguments ("name" "params")) nil [1628 2014])
            ("put" code nil nil [2016 2089])
            ("rng-dt" package nil nil [2091 2108]))          
      :file "rng-dt.el.gz"
      :pointmax 2134
      :fsize 1052
      :lastmodtime '(22768 58519 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("nxml-util" include nil nil [901 921])
            ("nxml-parse" include nil nil [922 943])
            ("rng-parse" include nil nil [944 964])
            ("rng-uri" include nil nil [965 983])
            ("rng-util" include nil nil [984 1003])
            ("xmltok" include nil nil [1004 1021])
            ("rng-current-schema-file-name" variable nil nil [1023 1155])
            ("make-variable-buffer-local" code nil nil [1156 1214])
            ("rng-schema-locating-files-default" variable (:default-value (list "schemas.xml" (expand-file-name "schema/schemas.xml" data-directory))) nil [1216 1396])
            ("rng-schema-locating-file-schema-file" variable (:default-value (expand-file-name "schema/locate.rnc" data-directory)) nil [1398 1553])
            ("rng-schema-locating-file-schema" variable nil nil [1555 1662])
            ("rng-schema-locating-files" variable (:default-value rng-schema-locating-files-default) nil [1664 1812])
            ("rng-schema-loader-alist" variable (:default-value (quote (("rnc" . rng-c-load-schema)))) nil [1814 1936])
            ("rng-cached-document-element" variable nil nil [1938 1978])
            ("rng-document-type-history" variable nil nil [1980 2018])
            ("rng-set-document-type" function (:arguments ("type-id")) nil [2020 2475])
            ("rng-read-type-id" function nil nil [2477 2825])
            ("rng-set-schema-file" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [2827 3549])
            ("rng-set-vacuous-schema" function (:user-visible-flag t) nil [3551 3722])
            ("rng-set-schema-file-1" function (:arguments ("filename")) nil [3724 4004])
            ("rng-load-schema" function (:arguments ("filename")) nil [4006 4360])
            ("rng-what-schema" function (:user-visible-flag t) nil [4362 4642])
            ("rng-auto-set-schema" function
               (:user-visible-flag t
                :arguments ("no-display-error"))
                nil [4644 5102])
            ("rng-locate-schema-file" function (:arguments ("type-id")) nil [5104 5971])
            ("rng-possible-type-ids" function nil nil [5973 6272])
            ("rng-locate-schema-file-using" function (:arguments ("files")) nil [6274 7864])
            ("put" code nil nil [7866 7939])
            ("put" code nil nil [7940 8000])
            ("put" code nil nil [8001 8049])
            ("put" code nil nil [8050 8117])
            ("put" code nil nil [8118 8174])
            ("rng-match-document-element-rule" function (:arguments ("props")) nil [8176 8618])
            ("rng-match-namespace-rule" function (:arguments ("props")) nil [8620 8905])
            ("rng-document-element" function nil nil [8907 9544])
            ("rng-get-start-tag-namespace" function nil nil [9546 10148])
            ("rng-match-transform-uri-rule" function (:arguments ("props")) nil [10150 10809])
            ("rng-match-uri-rule" function (:arguments ("props")) nil [10811 11387])
            ("rng-file-name-matches-uri-pattern-p" function (:arguments ("file-name" "pattern")) nil [11389 11650])
            ("rng-match-default-rule" function (:arguments ("props")) nil [11652 11833])
            ("rng-possible-type-ids-using" function (:arguments ("file" "type-ids")) nil [11835 12466])
            ("rng-locate-schema-file-from-type-id" function (:arguments ("type-id" "file")) nil [12468 13268])
            ("rng-schema-locating-file-alist" variable nil nil [13270 13313])
            ("rng-get-parsed-schema-locating-file" function (:arguments ("file")) nil [13315 14037])
            ("rng-locate-namespace-uri" variable
               (:constant-flag t
                :default-value (nxml-make-namespace "http://thaiopensource.com/ns/locating-rules/1.0"))
                nil [14039 14148])
            ("rng-parse-schema-locating-file" function (:arguments ("file")) nil [14150 15737])
            ("rng-save-schema-location" function (:user-visible-flag t) nil [15739 16104])
            ("rng-save-schema-location-1" function (:arguments ("prompt" "type-id")) nil [16106 18102])
            ("rng-loc" package nil nil [18104 18122]))          
      :file "rng-loc.el.gz"
      :pointmax 18149
      :fsize 5077
      :lastmodtime '(22768 58519 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("rng-make-datatypes-uri" function (:arguments ("uri")) nil [901 1143])
            ("rng-xsd-datatypes-uri" variable
               (:constant-flag t
                :default-value (rng-make-datatypes-uri "http://www.w3.org/2001/XMLSchema-datatypes"))
                nil [1145 1249])
            ("rng-builtin-datatypes-uri" variable
               (:constant-flag t
                :default-value (rng-make-datatypes-uri ""))
                nil [1251 1315])
            ("rng-uniquify-eq" function (:arguments ("list")) nil [1317 1565])
            ("rng-uniquify-equal" function (:arguments ("list")) nil [1567 1824])
            ("rng-blank-p" function (:arguments ("str")) nil [1826 1889])
            ("rng-substq" function (:arguments ("new" "old" "list")) nil [1891 2452])
            ("rng-complete-before-point" function (:arguments ("start" "table" "prompt" "predicate" "hist")) nil [2454 4289])
            ("rng-completion-exact-p" function (:arguments ("string" "table" "predicate")) nil [4291 4490])
            ("rng-quote-string" function (:arguments ("s")) nil [4492 4543])
            ("rng-escape-string" function (:arguments ("s")) nil [4545 4785])
            ("rng-collapse-space" function (:arguments ("string")) nil [4787 5060])
            ("define-error" code nil nil [5062 5091])
            ("rng-util" package nil nil [5093 5112]))          
      :file "rng-util.el.gz"
      :pointmax 5140
      :fsize 2048
      :lastmodtime '(22768 58519 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("nxml-parse" include nil nil [1053 1074])
            ("rng-match" include nil nil [1075 1095])
            ("rng-dt" include nil nil [1096 1113])
            ("rng-parse-prev-was-start-tag" variable nil nil [1115 1156])
            ("rng-parse-validate-file" function (:arguments ("schema" "file")) nil [1158 2122])
            ("rng-parse-do-validate" function (:arguments ("text" "start-tag")) nil [2124 3437])
            ("rng-parse-to-match-name" function (:arguments ("name")) nil [3439 3528])
            ("rng-parse" package nil nil [3530 3550]))          
      :file "rng-parse.el.gz"
      :pointmax 3579
      :fsize 1495
      :lastmodtime '(22768 58519 0 0)
      :unmatched-syntax nil))
  :file "!usr!share!emacs!25.3!lisp!nxml!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
